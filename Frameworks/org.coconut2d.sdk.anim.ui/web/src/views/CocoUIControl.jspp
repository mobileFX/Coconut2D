/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______                 __  ____________            __             __
//	  / ____/___  _________  / / / /  _/ ____/___  ____  / /__________  / /
//	 / /   / __ \/ ___/ __ \/ / / // // /   / __ \/ __ \/ __/ ___/ __ \/ /
//	/ /___/ /_/ / /__/ /_/ / /_/ // // /___/ /_/ / / / / /_/ /  / /_/ / /
//	\____/\____/\___/\____/\____/___/\____/\____/_/ /_/\__/_/   \____/_/
//
// ==================================================================================================================================

#include "CocoUIView.jspp"

var SWIPE_SENSITIVITY_PIXELS:Integer = 10;

////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoUIControl : CocoUIDataControl
{
	// We add Layers to compose the control in its different states
	// CocoUIControl layers have two keframes: 0 Normal, 1:Selected

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Events
	////////////////////////////////////////////////////////////////////////////////////////////////////
	public event OnGlyphClick();
	public event OnChevronClick();
	public event OnSwipe(dx:Integer, dy:Integer);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Selection (pressed)
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __selectable:Boolean;
	protected var __selected:Boolean;
	protected var __selectionWaitTickCycles:Integer;

	published property Selectable { function get():Boolean { return __selectable; } }

	public property Selected
	{
		function get():Boolean { return __selectable && __selected; }
		function set(v:Boolean) { __selected = (__selectable ? v : false); __selectionWaitTickCycles = 0; if(__form && __selected) { __form.ActiveControl = this; }  }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Focusable
	////////////////////////////////////////////////////////////////////////////////////////////////////

	protected var __focusable:Boolean;
	published property Focusable { function get():Boolean { return __focusable; } }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// AutoSize: control calcs its own size on RefreshLayout()
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __autoSize:Boolean;

	published property AutoSize			{ function get():Boolean { return __autoSize; 	} function set(v:Boolean) 	{ __autoSize=v; invalidate(); 	} }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Borders
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __borderStyle:COCO_CONTROL_BORDER_STYLE_ENUM;
	public var __borderRadius:Float;
	protected var __borderColor:Color;
	protected var __borderColorSel:Color;
	protected var __borderWidth:Integer;

	published property BorderStyle		{ function get():COCO_CONTROL_BORDER_STYLE_ENUM { return __borderStyle; }	function set(v:COCO_CONTROL_BORDER_STYLE_ENUM) { __borderStyle = v; invalidate(); }	}

	published property BorderWidth		{ function get():Integer 	{ return __borderWidth; 				}	function set(v:Integer)		{ __borderWidth = v; invalidate(); }}
	published property BorderRadius		{ function get():CartesianY { return AbsoluteY(__borderRadius); 	}	function set(v:CartesianY)	{ __borderRadius = RelativeY(v); invalidate(); }}
	published property BorderColor		{ function get():Color 		{ return __borderColor; 				}	function set(v:Color)		{ __borderColor = v; invalidate(); } }
	published property BorderColorSel	{ function get():Color 		{ return __borderColorSel; 				}	function set(v:Color)		{ __borderColorSel = v; invalidate(); } }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Background Gradient
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __backgroundGradient:Gradient;
	protected var __backgroundGradientSel:Gradient;

	published property BackgroundGradient		{ function get():Gradient { return __backgroundGradient;	} 	function set(v:Gradient) 	{ __backgroundGradient = v; invalidate(); 	}}
	published property BackgroundGradientSel	{ function get():Gradient { return __backgroundGradientSel; }	function set(v:Gradient) 	{ __backgroundGradientSel = v; invalidate(); }}


	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Background Gradient
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __backgroundImage:String;
	protected var __backgroundImageSel:String;

	published property BackgroundImage		{ function get():String { return __backgroundImage;	} 		function set(v:String) 	{ __backgroundImage = v; invalidate(); 	}}
	published property BackgroundImageSel	{ function get():String { return __backgroundImageSel; }	function set(v:String) 	{ __backgroundImageSel = v; invalidate(); }}


	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Skin Image
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __skinImage:String;
	protected var __skinImageSel:String;

	published property SkinImage
	{
		function get():String 	{ return (__selected && __skinImageSel ? __skinImageSel : __skinImage); }
		function set(v:String) 	{ __skinImage = v; invalidate(); }
	}

	published property SkinImageSel
	{
		function get():String { return (__skinImageSel ? __skinImageSel: __skinImage); }
		function set(v:String) 	{ __skinImageSel = v; invalidate();	}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Glyph
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __glyphImage:String;
	protected var __glyphImageSel:String;
	public var __glyphLeft:Float;
	public var __glyphTop:Float;
	protected var __glyphEvents:Boolean;

	private var __glyphClip:CocoUIView;
	private var __glyphSelClip:CocoUIView;

	published property GlyphImage		{ function get():String 	{ return __glyphImage;	 			}	function set(v:String) 		{ __glyphImage = v; invalidate(); 				}}
	published property GlyphImageSel	{ function get():String 	{ return __glyphImageSel; 			}	function set(v:String) 		{ __glyphImageSel = v; invalidate();			}}
	published property GlyphLeft		{ function get():CartesianX { return AbsoluteX(__glyphLeft);	}	function set(v:CartesianX) 	{ __glyphLeft = RelativeX(v); invalidate();		}}
	published property GlyphTop			{ function get():CartesianY	{ return AbsoluteY(__glyphTop); 	}	function set(v:CartesianY) 	{ __glyphTop = RelativeY(v); invalidate();		}}
	published property GlyphEvents		{ function get():Boolean	{ return __glyphEvents;				}	function set(v:Boolean)		{ __glyphEvents = v; 							}}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Chevron
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __chevronImage:String;
	protected var __chevronImageSel:String;
	public var __chevronLeft:Float;
	public var __chevronTop:Float;
	protected var __chevronEvents:Boolean;

	private var __chevronClip:CocoUIView;
	private var __chevronSelClip:CocoUIView;

	published property ChevronImage		{ function get():String 	{ return __chevronImage;			}	function set(v:String) 		{ __chevronImage = v; invalidate(); 				}}
	published property ChevronImageSel	{ function get():String 	{ return __chevronImageSel;			}	function set(v:String) 		{ __chevronImageSel = v; invalidate();				}}
	published property ChevronLeft		{ function get():CartesianX { return AbsoluteX(__chevronLeft); 	}	function set(v:CartesianX) 	{ __chevronLeft = RelativeX(v); invalidate();		}}
	published property ChevronTop		{ function get():CartesianY	{ return AbsoluteY(__chevronTop);	}	function set(v:CartesianY) 	{ __chevronTop = RelativeY(v); invalidate();		}}
	published property ChevronEvents	{ function get():Boolean	{ return __chevronEvents;			}	function set(v:Boolean)		{ __chevronEvents = v; 								}}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Texts
	////////////////////////////////////////////////////////////////////////////////////////////////////
	protected var __texts:Array<CocoUITextBlock>;

	// ==================================================================================================================================
	//	    ____       ____            ____     _____ _       _
	//	   / __ \___  / __/___ ___  __/ / /_   / ___/(_)___  (_)___  ____ _
	//	  / / / / _ \/ /_/ __ `/ / / / / __/   \__ \/ /_  / / / __ \/ __ `/
	//	 / /_/ /  __/ __/ /_/ / /_/ / / /_    ___/ / / / /_/ / / / / /_/ /
	//	/_____/\___/_/  \__,_/\__,_/_/\__/   /____/_/ /___/_/_/ /_/\__, /
	//	                                                          /____/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function RefreshLayout(parent:CocoUIView)
	{
		// Link Form and Scene with Parent contianer
		if (parent)
		{
			__scene = parent.__scene;
			__form = parent.Form;
		}

		// Post calculate control size if AutoSize flag is set
		if (__autoSize)
			Height = CalcHeight();

		// Anchor the control to its parent
		anchor();

		// Cause the children to RefreshLayout too
		for(var i:Integer = __children.size()-1; i>=0; i--)
		{
			var child:CocoUIView = CocoUIView(__children[i]);
			child.RefreshLayout(this);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function CalcHeight(): Integer
	{
		if(!__scene || !Width)
			return 0;

		var h:Integer = 0;

		if(__skinImage) 		h = Math.max(h, __scene.getImageSymbolHeight(__skinImage));
		if(__skinImageSel) 		h = Math.max(h, __scene.getImageSymbolHeight(__skinImageSel));
		if(__glyphImage)		h = Math.max(h, __scene.getImageSymbolHeight(__glyphImage));
		if(__glyphImageSel)		h = Math.max(h, __scene.getImageSymbolHeight(__glyphImageSel));
		if(__chevronImage)		h = Math.max(h, __scene.getImageSymbolHeight(__chevronImage));
		if(__chevronImageSel)	h = Math.max(h, __scene.getImageSymbolHeight(__chevronImageSel));

		for(var i:Integer=__texts.size()-1; i>=0; i--)
		{
			if(__texts[i].multiline)
			{
				// Force text to wrap and calc height
				__texts[i].toImage(false, __scene.ViewScale);
				h = Math.max(h, __texts[i].Height + PaddingTop + PaddingBottom);
			}
			else
			{
				h = Math.max(h, __texts[i].fontSize + PaddingTop + PaddingBottom);
			}
		}

		return h;
	}

	// ==================================================================================================================================
	//	   ______                 __                  __
	//	  / ____/___  ____  _____/ /________  _______/ /_____  _____
	//	 / /   / __ \/ __ \/ ___/ __/ ___/ / / / ___/ __/ __ \/ ___/
	//	/ /___/ /_/ / / / (__  ) /_/ /  / /_/ / /__/ /_/ /_/ / /
	//	\____/\____/_/ /_/____/\__/_/   \__,_/\___/\__/\____/_/
	//
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(scene:CocoScene, name:String) : CocoUIDataControl(scene, name)
	{
		if(name)
		__instanceName 				= name;

		__selectable				= true;
		__focusable					= true;
		__autoSize					= false;
		__selected					= false;
		__selectionWaitTickCycles	= 0;

		__borderStyle				= COCO_CONTROL_BORDER_STYLE_ENUM.BORDER_NONE;
		__borderRadius				= 0;
		__borderColor				= 0x00000000;
		__borderColorSel			= 0x00000000;
		__borderWidth				= 1;

		__backgroundGradient		= "";
		__backgroundGradientSel 	= "";

		__backgroundImage			= "";
		__backgroundImageSel		= "";

		__skinImage					= "";
		__skinImageSel				= "";

		__glyphImage				= "";
		__glyphImageSel				= "";
		__glyphLeft					= 0;
		__glyphTop					= 0;
		__glyphEvents				= false;
		__glyphClip					= null;
		__glyphSelClip				= null;

		__chevronImage				= "";
		__chevronImageSel			= "";
		__chevronLeft				= 0;
		__chevronTop				= 0;
		__chevronEvents				= false;
		__chevronClip				= null;
		__chevronSelClip			= null;

		__touch_x					= 0;
		__touch_y					= 0;

		__texts = new Array<CocoUITextBlock>;

		// Controls by default are clickable, so keyframe has handleEvnets = ture
		__timeline.clear();
		__timeline.addKeyFrameEx(null, null, 0, COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO, true, true, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, null, false, false, '', 0, 0, 0, 1, 1);

		// Hook on touch events
		if(__selectable)
		{
			addEventListener(this.OnTouchStart, __CocoUIControl_OnTouchStart);
	 		addEventListener(this.OnTouchEnd, __CocoUIControl_OnTouchEnd);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function Clone():CocoUIControl
	{
		var ctl:CocoUIControl = new CocoUIControl(__scene, __instanceName);
		__cloneTo(ctl);
		return ctl;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function __cloneTo(ctl:CocoUIControl)
	{
		__copy__(this, ctl, COPY_MEMBERS_ALL);
		super.__cloneTo(ctl);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
 		if(__selectable)
 		{
 			removeEventListener(this.OnTouchStart, __CocoUIControl_OnTouchStart);
 			removeEventListener(this.OnTouchEnd, __CocoUIControl_OnTouchEnd);
 		}

		delete __texts;
		delete __glyphClip;
		delete __glyphSelClip;
		delete __chevronClip;
		delete __chevronSelClip;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function Defaults()
	{
		if(!__scene) return;
		Width = __scene.ViewWidth * __scene.ViewPixelRatio;
		Height = COCO_DEFAULT_CONTROL_HEIGHT * __scene.ViewPixelRatio;
	}

	// ==================================================================================================================================
	//	   _____      __          __  _                __  __                _____
	//	  / ___/___  / /__  _____/ /_(_)___  ____     / / / /___ _____  ____/ / (_)___  ____ _
	//	  \__ \/ _ \/ / _ \/ ___/ __/ / __ \/ __ \   / /_/ / __ `/ __ \/ __  / / / __ \/ __ `/
	//	 ___/ /  __/ /  __/ /__/ /_/ / /_/ / / / /  / __  / /_/ / / / / /_/ / / / / / / /_/ /
	//	/____/\___/_/\___/\___/\__/_/\____/_/ /_/  /_/ /_/\__,_/_/ /_/\__,_/_/_/_/ /_/\__, /
	//	                                                                             /____/
	// ==================================================================================================================================

	private var __touch_x:Integer;
	private var __touch_y:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function __CocoUIControl_OnTouchStart(sender:CocoEventSource, e:CocoEvent, x:Integer, y:Integer) :Boolean
	{
		__touch_x = x;
		__touch_y = y;

		if(__selectable && __focusable && __form)
			__form.ActiveControl = this;

		if(__selectable && __selectionWaitTickCycles==0)
			__selectionWaitTickCycles = 5;

		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUIControl_OnTouchEnd(sender:CocoEventSource, e:CocoEvent, x:Integer, y:Integer) :Boolean
	{
		if(Selected)
		{
			var dx:Integer = x - __touch_x;
			var dy:Integer = y - __touch_y;

			// Detect swipe gesture
			if((Math.abs(dx) > SWIPE_SENSITIVITY_PIXELS) || (Math.abs(dy) > SWIPE_SENSITIVITY_PIXELS))
			{
				dispatchEvent(this.OnSwipe, dx, dy);
			}
		}

		__selectionWaitTickCycles = 0;
		Selected = false;
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUIControl_Graphic_OnClick(sender:CocoClip, e:CocoEvent) :Boolean
	{
		if(sender==__glyphClip || sender == __glyphSelClip)
		{
			dispatchEvent(this.OnGlyphClick);
			__onGlyphClick();
		}
		if(sender==__chevronClip || sender == __chevronSelClip)
		{
			dispatchEvent(this.OnChevronClick);
			__onChevronClick();
		}
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function __onChevronClick()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function __onGlyphClick()
	{
	}

	// ==================================================================================================================================
	//	    ____        _       __        __   ______                                 _ __  _
	//	   / __ \____ _(_)___  / /_     _/_/  / ____/___  ____ ___  ____  ____  _____(_) /_(_)___  ____
	//	  / /_/ / __ `/ / __ \/ __/   _/_/   / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ / __/ / __ \/ __ \
	//	 / ____/ /_/ / / / / / /_   _/_/    / /___/ /_/ / / / / / / /_/ / /_/ (__  ) / /_/ / /_/ / / / /
	//	/_/    \__,_/_/_/ /_/\__/  /_/      \____/\____/_/ /_/ /_/ .___/\____/____/_/\__/_/\____/_/ /_/
	//	                                                        /_/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer, index:Integer)
	{
		if(!__visible || !parentClip || !scene)
			return;

		__scene = scene;

		// It control is invlid, recompose it.
		if(__invalidated)
		{
			ComposeView();
			__invalidated = false;
		}

		// Set normal/selected control state
		if(__selectable && __selectionWaitTickCycles)
		{
			__selectionWaitTickCycles--;
			if(__selectionWaitTickCycles==0)
			{
				Selected = true;
			}
		}
		gotoFrameByIndex( __selected ? 1 : 0, true);

		// Enabler/Disable Event Handling
		for(var i:Integer = __timeline.__keyFrames.size()-1; i>=0; i--)
		{
			__timeline.keyFrame(i).handleEvents = __selectable;
		}

		super.paint;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function ComposeView(optional ctx:CanvasRenderingContext2D)
	{
		if(__width==0 || __height==0 || !__invalidated)
			return;

		// Dettach children clip events
		if(__glyphClip) __glyphClip.removeEventListener(__glyphClip.OnClick, __CocoUIControl_Graphic_OnClick);
		if(__glyphSelClip) __glyphSelClip.removeEventListener(__glyphSelClip.OnClick, __CocoUIControl_Graphic_OnClick);
		if(__chevronClip) __chevronClip.removeEventListener(__chevronClip.OnClick, __CocoUIControl_Graphic_OnClick);
		if(__chevronSelClip) __chevronSelClip.removeEventListener(__chevronSelClip.OnClick, __CocoUIControl_Graphic_OnClick);

		// Dispose unused textures
		dispose();

		// Clear children clips
		clear();

		// Sanity check: we need a scene
		if(!__scene) return;

		// Add Background Layer
		if(__backgroundImage)
			NewLayerFromImage(ctx, "__Background_Image", 0, __scene.getImageSymbol(__backgroundImage), 0, 0, false);

		// Add Background Layer
		if(__backgroundGradient)
			NewLayerFromImage(ctx, "__Background_Grad", 0, CocoGraphics.CreateGradient(0, 0, Width, Height, __backgroundGradient, __borderColor, __borderStyle, BorderRadius, __borderWidth, __scene.ViewPixelRatio), 0, 0, false);

		// Add Skin Layer
		if(__skinImage)
			NewLayerFromImage(ctx, "__Background_Skin", 0, CocoGraphics.GetSkinFromCache(__scene.getImageSymbol(__skinImage), Width, Height), 0, 0, false);

		// Add Glyph Layer
		__addGlyph(ctx, __glyphImage, "__Glyph", false);

		// Add chevron Layer
		__addChevron(ctx, __chevronImage, "__Chevron", false);

		// Add text Layers
		for(var i:Integer = __texts.size()-1; i>=0; i--)
		{
			__texts[i].parent = this;
			__texts[i].SetTextRect( PaddingLeft, PaddingTop, PaddingWidth, PaddingHeight);
			NewLayerFromImage(ctx, "__Text" + String(i), 0, __texts[i].toImage(false, __scene.ViewPixelScale), __texts[i].Left, __texts[i].Top, false);
		}

		// SELECTED STATE //
		if(__selectable && !ctx)
		{
			// Add Background Layer
			if(__backgroundImageSel)
				NewLayerFromImage(ctx, "__Background_Image_Sel", 0, __scene.getImageSymbol(__backgroundImageSel), 0, 0, false);

			// Add Background Layer
			if(__backgroundGradientSel)
				NewLayerFromImage(ctx, "__Background_Grad_Sel", 1, CocoGraphics.CreateGradient(0, 0, Width, Height, __backgroundGradientSel, __borderColorSel, __borderStyle, BorderRadius, __borderWidth, __scene.ViewPixelRatio), 0, 0, false);

			// Add Skin Layer
			if(SkinImageSel)
				NewLayerFromImage(ctx, "__Background_Skin_Sel", 1, CocoGraphics.GetSkinFromCache(__scene.getImageSymbol(SkinImageSel), Width, Height), 0, 0, false);

			// Add Glyph Layer
			__addGlyph(ctx, GlyphImageSel, "__Glyph_Sel", true);

			// Add chevron Layer
			__addChevron(ctx, ChevronImageSel, "__Chevron_Sel", true);

			// Add text Layers
			for(var i:Integer = __texts.size()-1; i>=0; i--)
			{
				__texts[i].parent = this;
				NewLayerFromImage(ctx, "__Text" + String(i), 1, __texts[i].toImage(true, __scene.ViewPixelScale), __texts[i].Left, __texts[i].Top, false);
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function __addGlyph(ctx:CanvasRenderingContext2D, image:String, id:String, selected:Boolean)
	{
		if(!__glyphImage) return;

		var img:CocoImage = __scene.getImageSymbol(__glyphImage);
		if(!img) return;

		var x:Integer = __glyphLeft;
		var y:Integer = (Height - img.textureViewHeight)/2 + __glyphTop;

		var view:CocoUIView = NewLayerFromImage(ctx, id, selected ? 1 : 0, img, x, y, __glyphEvents);

		if(!selected && view)
		{
			__glyphClip = view;
			__glyphClip.addEventListener(__glyphClip.OnClick, __CocoUIControl_Graphic_OnClick);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function __addChevron(ctx:CanvasRenderingContext2D, image:String, id:String, selected:Boolean)
	{
		if(!__chevronImage) return;

		var img:CocoImage = __scene.getImageSymbol(__chevronImage);
		if(!img) return;

		var x:Integer = Width - img.textureViewWidth + __chevronLeft;
		var y:Integer = (Height - img.textureViewHeight)/2 + __chevronTop;

		var view:CocoUIView = NewLayerFromImage(ctx, id, selected ? 1 : 0, img, x, y, __chevronEvents);

		if(!selected && view)
		{
			__chevronClip = view;
			__chevronClip.addEventListener(__chevronClip.OnClick, __CocoUIControl_Graphic_OnClick);
		}
	}
}
