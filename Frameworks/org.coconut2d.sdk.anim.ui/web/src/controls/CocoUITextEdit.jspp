/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______                 __  ____________          __  ______    ___ __
//	  / ____/___  _________  / / / /  _/_  __/__  _  __/ /_/ ____/___/ (_) /_
//	 / /   / __ \/ ___/ __ \/ / / // /  / / / _ \| |/_/ __/ __/ / __  / / __/
//	/ /___/ /_/ / /__/ /_/ / /_/ // /  / / /  __/>  </ /_/ /___/ /_/ / / /_
//	\____/\____/\___/\____/\____/___/ /_/  \___/_/|_|\__/_____/\__,_/_/\__/
//
// ==================================================================================================================================

#include "CocoUIControl.jspp"

control class CocoUITextEdit : CocoUIControl
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// Caption
	////////////////////////////////////////////////////////////////////////////////////////////////////

	public var __text:CocoUITextBlock;
	public var __prompt:CocoUITextBlock;
	private var __password:Boolean;

	published property Password						{ function get():Boolean { return __password; 						} 	function set(v:Boolean) 	{ __password = v; invalidate(); 					}}

	public property __promptFontSize				{ function get():Float	 { return __prompt.fontSize; 				} 	function set(v:CartesianY)	{ __prompt.fontSize = v; invalidate(); 				}}
	public property __textFontSize					{ function get():Float	 { return __text.fontSize; 					} 	function set(v:CartesianY)	{ __text.fontSize = v; invalidate(); 				}}

	published property Text							{ function get():String  { return __text.text; 						} 	function set(v:String) 		{ __text.text = v; invalidate(); 					}}
	published property TextFontName					{ function get():String  { return __text.fontName; 					} 	function set(v:String) 		{ __text.fontName = v; invalidate(); 				}}
	published property TextFontSize					{ function get():CartesianY	 { return AbsoluteY(__text.fontSize);	} 	function set(v:CartesianY)	 	{ __text.fontSize = RelativeY(v); invalidate(); }}
	published property TextFontBold					{ function get():Boolean { return __text.fontBold; 					} 	function set(v:Boolean) 	{ __text.fontBold = v; invalidate(); 				}}
	published property TextFontItalic				{ function get():Boolean { return __text.fontItalic; 				} 	function set(v:Boolean) 	{ __text.fontItalic = v; invalidate(); 				}}
	published property TextFontUnderline			{ function get():Boolean { return __text.fontUnderline; 			} 	function set(v:Boolean) 	{ __text.fontUnderline = v; invalidate(); 			}}
	published property TextFontShadowX				{ function get():Integer { return __text.fontShadowX;				} 	function set(v:Integer) 	{ __text.fontShadowX = v; invalidate(); 			}}
	published property TextFontShadowY				{ function get():Integer { return __text.fontShadowY;				} 	function set(v:Integer) 	{ __text.fontShadowY = v; invalidate(); 			}}
	published property TextFontBlur					{ function get():Integer { return __text.fontBlur;					} 	function set(v:Integer) 	{ __text.fontBlur = v; invalidate(); 				}}
	published property TextFontColorSel				{ function get():Color   { return __text.fontColorSel; 				} 	function set(v:Color) 		{ __text.fontColorSel = v; invalidate(); 			}}
	published property TextFontShadowColorSel 		{ function get():Color	 { return __text.fontShadowColorSel;		} 	function set(v:Color) 		{ __text.fontShadowColorSel = v; invalidate(); 		}}
	published property TextFontColor				{ function get():Color   { return __text.fontColor;					} 	function set(v:Color) 		{ __text.fontColor = v; invalidate(); 				}}
	published property TextFontShadowColor 			{ function get():Color	 { return __text.fontColorSel;				}	function set(v:Color) 		{ __text.fontShadowColor = v; invalidate(); 		}}

	published property Prompt						{ function get():String  { return __prompt.text; 					} 	function set(v:String) 		{ __prompt.text = v; invalidate(); 					}}
	published property PromptFontName				{ function get():String  { return __prompt.fontName; 				} 	function set(v:String) 		{ __prompt.fontName = v; invalidate(); 				}}
	published property PromptFontSize				{ function get():CartesianY	 { return AbsoluteY(__prompt.fontSize);	} 	function set(v:CartesianY) 	{ __prompt.fontSize = RelativeY(v); invalidate(); 	}}
	published property PromptFontBold				{ function get():Boolean { return __prompt.fontBold; 				} 	function set(v:Boolean) 	{ __prompt.fontBold = v; invalidate(); 				}}
	published property PromptFontItalic				{ function get():Boolean { return __prompt.fontItalic; 				} 	function set(v:Boolean) 	{ __prompt.fontItalic = v; invalidate(); 			}}
	published property PromptFontUnderline			{ function get():Boolean { return __prompt.fontUnderline; 			} 	function set(v:Boolean) 	{ __prompt.fontUnderline = v; invalidate(); 		}}
	published property PromptFontShadowX			{ function get():Integer { return __prompt.fontShadowX;				} 	function set(v:Integer) 	{ __prompt.fontShadowX = v; invalidate(); 			}}
	published property PromptFontShadowY			{ function get():Integer { return __prompt.fontShadowY;				} 	function set(v:Integer) 	{ __prompt.fontShadowY = v; invalidate(); 			}}
	published property PromptFontBlur				{ function get():Integer { return __prompt.fontBlur;				} 	function set(v:Integer) 	{ __prompt.fontBlur = v; invalidate(); 				}}
	published property PromptFontColorSel			{ function get():Color   { return __prompt.fontColorSel; 			} 	function set(v:Color) 		{ __prompt.fontColorSel = v; invalidate(); 			}}
	published property PromptFontShadowColorSel 	{ function get():Color	 { return __prompt.fontShadowColorSel;		} 	function set(v:Color) 		{ __prompt.fontShadowColorSel = v; invalidate(); 	}}
	published property PromptFontColor				{ function get():Color   { return __prompt.fontColor;				} 	function set(v:Color) 		{ __prompt.fontColor = v; invalidate(); 			}}
	published property PromptFontShadowColor 		{ function get():Color	 { return __prompt.fontColorSel;			}	function set(v:Color) 		{ __prompt.fontShadowColor = v; invalidate(); 		}}

	public var __readOnly:Boolean;
	published property ReadOnly				 		{ function get():Boolean { return __readOnly;						}	function set(v:Boolean) 	{ __readOnly = v; 									}}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(scene:CocoScene, name:String) : CocoUIControl(scene, name)
	{
		// Init private vars
		__password = false;
		__readOnly = false;

		// Create sub views
		__text = new CocoUITextBlock(this, "", COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT);
		__prompt = new CocoUITextBlock(this, Name, COCO_CONTROL_ANCHOR_ENUM.ANCHOR_MIDDLE_LEFT);
		__texts.push(__prompt);

		// Handle Clicks
		addEventListener(this.OnClick, __CocoUITextEdit_OnClick);

		// Apply default style and vaules
		Defaults();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function Clone():CocoUITextEdit
	{
		var ctl:CocoUITextEdit = new CocoUITextEdit(__scene, __instanceName);
		__cloneTo(ctl);
		return ctl;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function __cloneTo(ctl:CocoUITextEdit)
	{
		__copy__(this, ctl, COPY_MEMBERS_ALL);
		super.__cloneTo(ctl);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function Defaults()
	{
		if(!__scene) return;

		// Control can be selected
		__selectable = true;

		// Display Passwords
		__password = false;

		// Default margins and paddings
		SetMargins(0,0,4,0);
		SetPaddings(4,4,0,0);

		// Placed inside a stack
		__stacked = STACKED_NORMAL;

		// Default size
		Width = __scene.ViewWidth * __scene.ViewPixelRatio;
		Height = COCO_DEFAULT_EDIT_CONTROL_HEIGHT * __scene.ViewPixelRatio;

		// Default background gradients
		__backgroundGradient = "0,0xffffffff,0.47,0xfff6f6f6,1,0xffededed";
		__backgroundGradientSel = "0,0xffffd65e,1,0xfffebf04";

		// Default prompt text
		__prompt.fontSize = RelativeY(COCO_DEFAULT_FONT_SIZE + 2);
		__prompt.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
		__prompt.text = "Please enter value...";
		__prompt.fontColor = 0xff444444;
		__prompt.fontColorSel = 0xff444444;
		__prompt.fontBold = false;
		__prompt.multiline = false;

		// Default user text
		__text.fontSize   = RelativeY(COCO_DEFAULT_FONT_SIZE + 2);
		__text.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
		__text.fontColor = 0xff000000;
		__text.fontColorSel = 0xff000000;
		__text.fontBold = false;
		__text.multiline = false;

		// Default text display
		SetText();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function RefreshLayout(parent:CocoUIView)
	{
		super.RefreshLayout;

		__text.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
		__text.fontSize = RelativeY(COCO_DEFAULT_FONT_SIZE);

		__prompt.SetTextRect(PaddingLeft,PaddingTop,PaddingWidth,PaddingHeight);
		__prompt.fontSize = RelativeY(COCO_DEFAULT_FONT_SIZE);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		removeEventListener(this.OnClick, __CocoUITextEdit_OnClick);
		delete __text;
		delete __prompt;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function SetText()
	{
		__texts.clear();

		if(__text.text)
			__texts.push(__text);
		else
			__texts.push(__prompt);

		__text.password = Password;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function StartEdit():Boolean
	{
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer, index:Integer)
	{
		SetText();
		super.paint;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __CocoUITextEdit_OnClick(sender:CocoEventSource, e:CocoEvent) :Boolean
	{
		return StartEdit();
	}

	// ==================================================================================================================================
	//	    ____                                     __           __   ______                        ______                 __
	//	   / __ \_________  ____  ____ _____ _____ _/ /____  ____/ /  / ____/___  _________ ___     / ____/   _____  ____  / /______
	//	  / /_/ / ___/ __ \/ __ \/ __ `/ __ `/ __ `/ __/ _ \/ __  /  / /_  / __ \/ ___/ __ `__ \   / __/ | | / / _ \/ __ \/ __/ ___/
	//	 / ____/ /  / /_/ / /_/ / /_/ / /_/ / /_/ / /_/  __/ /_/ /  / __/ / /_/ / /  / / / / / /  / /___ | |/ /  __/ / / / /_(__  )
	//	/_/   /_/   \____/ .___/\__,_/\__, /\__,_/\__/\___/\__,_/  /_/    \____/_/  /_/ /_/ /_/  /_____/ |___/\___/_/ /_/\__/____/
	//	                /_/          /____/
	// ==================================================================================================================================

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function KeyDown(msg:DEVICE_MESSAGE) :Boolean
	{
		if(ReadOnly)
			return true;

		switch(msg.special)
		{
		case DEVICE_KEYS_ENUM.DEVICE_KEY_BACKSPACE:
			if(Text)
				Text = Text.substr(0, Text.size()-1);
			break;

		case DEVICE_KEYS_ENUM.DEVICE_KEY_ESCAPE:
			Text = "";
			break;

		default:
			if(msg.special==DEVICE_KEY_NONE)
			{
				if(Text)
					Text += msg.char;
				else
					Text = msg.char;
			}
			break;
		}

		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function KeyUp(msg:DEVICE_MESSAGE) : Boolean
	{
		return false;
	}
}
