/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#include "CocoScene.jspp"

class Stage : CocoScene
{
	// Special Game Sprites
	published reference var StageClip:CocoClip;
	published reference var Player:PlayerSprite;
	published reference var TouchHandlerClip:CocoClip;
	published var EnemiesClassName:String;
	published var BonusesClassName:String;

	public var EnemiesSprites:Array<CocoClip>;
	public var BonusesSprites:Array<CocoClip>;
	public var MazesSprites:Array<CocoClip>;
	public var PlatformsSprites:Array<CocoClip>;
	public var DeadSprites:Array<CocoClip>;

	// Physics
	published var EnablePhysics:Boolean;
	published var PhysicsGravity:Float;
	published var PhysicsVelocityIterations:Integer;
	published var PhysicsPositionIterations:Integer;
	public var world:b2World;
	public var worldTick:Float;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		StageClip=null;
		Player=null;
		EnemiesClassName = "CocoGameSpriteEnemy";
		BonusesClassName = "CocoGameSpriteBonus";

		EnemiesSprites = null;
		BonusesSprites = null;
		MazesSprites = null;
		PlatformsSprites = null;
		DeadSprites = new Array<CocoClip>;

		EnablePhysics = false;
		PhysicsGravity = 20;
		PhysicsVelocityIterations = 2;
		PhysicsPositionIterations = 2;
		world = null;
		worldTick = 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function prepare(ctx:ICocoRenderContext)
	{
		// Create a Box2D World
		if(EnablePhysics)
		{
			var gravity:b2Vec2 = new b2Vec2(0.0, -PhysicsGravity);
			world = new b2World(gravity);
			worldTick = (( Float(engine.RTC_TICK_TIME) * __fps / 60.0) /1000.0);
		}

		// Prepare Scene and Sprites
		super.prepare;

		// Collect Enemy and Bonus Sprites
		EnemiesSprites = this.getClipsByClassName(EnemiesClassName);
		BonusesSprites = this.getClipsByClassName(BonusesClassName);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
		// Remove dead sprites from previous cycle
		removeDeadSprites();

		// Tick Physics
		if(world)
			world.Step(worldTick, PhysicsVelocityIterations, PhysicsPositionIterations);

		// Perform Collision Detections
		collisionDetection();

		// Scroll the Stage
		scrollStage();

		// Tick Sprites (incl. Player sprite, enemy sprites, etc.)
		super.tick;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, time:Time)
	{
		super.paint;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function scrollStage()
	{
		// Overwrite this virtual function to implement your game's stage scrolling logic.
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function collisionDetection()
	{
		// Overwrite this virtual function to implement your game's collision detection logic.
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function removeDeadSprites()
	{
		while(DeadSprites.size())
		{
			var sprite:CocoClip = DeadSprites[0];
			sprite.__parent.removeChild(sprite);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete EnemiesSprites;
		delete BonusesSprites;
		delete MazesSprites;
		delete PlatformsSprites;
		delete DeadSprites;
		delete world;
		Player = null;
	}
}
