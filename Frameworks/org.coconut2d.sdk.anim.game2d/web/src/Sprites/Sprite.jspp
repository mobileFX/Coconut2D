/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#include "CocoClip.jspp"

class Sprite : CocoClip
{
	// Box2D Physics of this Sprite
	// ============================
	// restitution	- How bouncy the fixture is, values from 0 to 1
	// friction 	- How slippery it is, values from 0 to 1
	// density 		- How heavy it is in relation to its area, density multiplied by area becomes the mass

	published var EnablePhysics:Boolean;
	published var BodyType:b2BodyType;
	published var PhysicsDensity:Float;
	published var PhysicsRestitution:Float;
	published var PhysicsFriction:Float;
	published var CollisionShapes: Shapes;

	public var body:b2Body;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage) : CocoClip(image)
	{
		EnablePhysics = false;
		BodyType = b2BodyType.b2_staticBody;
		PhysicsDensity = 1.0;
		PhysicsRestitution = 0.5;
		PhysicsFriction = 0.5;
		CollisionShapes = new Shapes();
		body = null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete CollisionShapes;
		delete body;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function prepare(ctx:ICocoRenderContext, scene:CocoScene)
	{
		if(EnablePhysics && CollisionShapes.size()>0)
		{
			if(body) delete body;
			var kf:CocoKeyFrame = __parent.__timeline.keyFrame(0);
			var x:Float = kf.x / BOX2D_SCALE;
			var y:Float	=  kf.y / BOX2D_SCALE;
			var stage:Stage = Stage(scene);
			body = CollisionShapes.toBody(stage.world, BodyType, x, y, PhysicsDensity, PhysicsRestitution, PhysicsFriction);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
		super.tick;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer, index:Integer)
	{
		super.paint;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function collidesWith(sprite:Sprite) :Boolean
	{
		if(!EnablePhysics || !sprite || !body || !sprite.body) return false;

		// Collision Detection using Box2D
		var first:b2ContactEdge = b2ContactEdge(body.GetContactList());
		var ce:b2ContactEdge = first;
		while(ce);
		{
			if(ce.get_other() == sprite.body && b2Contact(ce.get_contact()).IsTouching())
				return true;

			if(ce == b2ContactEdge(ce.get_next()))
				return false;

			ce = b2ContactEdge(ce.get_next());
			if(ce == first)
				return false;
		}
		return false;
	}
}
