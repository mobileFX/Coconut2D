/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______               _______ __         ____                          ____                   ____
//	  / ____/___  _________/_  __(_) /__  ____/ / /   ____ ___  _____  _____/ __ \____ __________ _/ / /___ __  __
//	 / /   / __ \/ ___/ __ \/ / / / / _ \/ __  / /   / __ `/ / / / _ \/ ___/ /_/ / __ `/ ___/ __ `/ / / __ `/ |/_/
//	/ /___/ /_/ / /__/ /_/ / / / / /  __/ /_/ / /___/ /_/ / /_/ /  __/ /  / ____/ /_/ / /  / /_/ / / / /_/ />  <
//	\____/\____/\___/\____/_/ /_/_/\___/\__,_/_____/\__,_/\__, /\___/_/  /_/    \__,_/_/   \__,_/_/_/\__,_/_/|_|
//	                                                     /____/
// ==================================================================================================================================

#include "CocoClip.jspp"

class ParallaxFollowPoint : CocoClip
{
 	public function Constructor(optional image:CocoImage) : CocoClip(image)
 	{
 	}

 	public function Destructor()
 	{
 	}
 }

////////////////////////////////////////////////////////////////////////////////////////////////////

#include "TiledLayer.jspp"

class ParallaxLayer : TiledLayer
{
	published var FollowPoint:ParallaxFollowPoint;
	published var ParallaxDistance:Float;

	private reference var kf:CocoKeyFrame;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(optional image:CocoImage) : TiledLayer(image)
	{
		FollowPoint = null;
		ParallaxDistance = 0.0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
 		delete FollowPoint;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
 	public virtual function prepare(ctx:ICocoRenderContext, scene:CocoScene)
 	{
 		super.prepare;

 		// Change Shader to Parallax
 		kf = __timeline.keyFrame(0);
 		kf.filter = 0;
 	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function tick(time:Time)
	{
		super.tick;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function paint(ctx:ICocoRenderContext, scene:CocoScene, parentClip:CocoClip, calcBoundingBox:Boolean, level:Integer, index:Integer)
 	{
 		if(FollowPoint && FollowPoint.__parent.__currentFrame)
 		{
 			var img:CocoImage = __children.size()>0 ?  __children[0].__image : __image;
 			var fkf:CocoKeyFrame = FollowPoint.__parent.__currentFrame;
 			var d:Float = fkf.x * img.pixelRatio / img.textureCellWidth * ParallaxDistance / 1000.0;
 			kf.red = (d - Math.floor(d));
 			kf.y = -Math.min(0.0, fkf.y + 400.0) * ParallaxDistance / 1000.0;
 		}
 		super.paint;
 	}
}
