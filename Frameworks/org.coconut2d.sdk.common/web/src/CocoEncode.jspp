/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#pragma export_nodejs;
#module org.coconut2d.sdk.common;

export class CocoUUID
{
	public function Constructor()
	{
	}

	public function Destructor()
	{
	}

	public static function Create():String
	{
		// RFC 4122
		//
		// A UUID is 128 bits long
		//
		// String representation is five fields of 4, 2, 2, 2, and 6 bytes.
		// Fields represented as lowercase, zero-filled, hexadecimal strings, and
		// are separated by dash characters
		//
		// A version 4 UUID is generated by setting all but six bits to randomly
		// chosen values

		/*

		var uuid:Array<String> = new Array<String>;

		uuid.push(Math.random().toString(16).slice(2, 10));
		uuid.push(Math.random().toString(16).slice(2, 6));

		// Set the four most significant bits (bits 12 through 15) of the
		// time_hi_and_version field to the 4-bit version number from Section
		// 4.1.3
		uuid.push((Math.random() * .0625 + .25).toString(16).slice(2, 6));

		// Set the two most significant bits (bits 6 and 7) of the
		// clock_seq_hi_and_reserved to zero and one, respectively
		uuid.push((Math.random() * .25 + .5).toString(16).slice(2, 6));

		uuid.push(Math.random().toString(16).slice(2, 14));

		return uuid.join('-');

		*/

		return "68C19D95-AEDE-4323-BB0B-D37B43D26170";
	}
}

export class CocoEncode
{
	public function Constructor()
	{
	}

	public function Destructor()
	{
	}

	public static function HTMLEncode(Text:String):String
	{
	    var i:Integer;
	    var L:Integer = Text.size();
	    var acode:Integer;
	    var repl:String;
	    var out:String = Text;
	    for(i=L-1; i>=0; i--)
	    {
	        acode = Text.charCodeAt(i);
	        switch(acode)
	        {
            case 32:
                repl = "&nbsp;";
                break;

            case 34:
                repl = "&quot;";
                break;

            case 38:
                repl = "&amp;";
                break;

            case 60:
                repl = "&lt;";
                break;

            case 62:
                repl = "&gt;";
                break;

            default:
                repl = "&#" + String(acode) + ";";
	        }
	        if(repl.size())
	        {
	            out = out.substr(0, i-1) + repl + out.substr(i+1);
	            repl = "";
	        }
	    }
	    return out;
	}

	/*
	public function HTMLDecode(ByVal HTML As String) As String
	{
	    var i As Long
	    HTMLDecode = HTML
	    Do
	        i = InStr(i + 1, HTMLDecode, "&")
	        If i = 0 Then Exit Do
	        If StrComp(Mid$(HTMLDecode, i, 6), "&nbsp;", vbTextCompare) = 0 Then
	            HTMLDecode = Left$(HTMLDecode, i - 1) & " " & Mid$(HTMLDecode, i + 6)
	        ElseIf StrComp(Mid$(HTMLDecode, i, 6), "&quot;", vbTextCompare) = 0 Then
	            HTMLDecode = Left$(HTMLDecode, i - 1) & """" & Mid$(HTMLDecode, i + 6)
	        ElseIf StrComp(Mid$(HTMLDecode, i, 5), "&amp;", vbTextCompare) = 0 Then
	            HTMLDecode = Left$(HTMLDecode, i - 1) & "&" & Mid$(HTMLDecode, i + 5)
	        ElseIf StrComp(Mid$(HTMLDecode, i, 4), "&lt;", vbTextCompare) = 0 Then
	            HTMLDecode = Left$(HTMLDecode, i - 1) & "<" & Mid$(HTMLDecode, i + 4)
	        ElseIf StrComp(Mid$(HTMLDecode, i, 4), "&gt;", vbTextCompare) = 0 Then
	            HTMLDecode = Left$(HTMLDecode, i - 1) & ">" & Mid$(HTMLDecode, i + 4)
	        End If
	    Loop
	}
	*/
}
