/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#pragma export_nodejs;
#module org.coconut2d.sdk.common;


// ==================================================================================================================================
//	   ______               _______
//	  / ____/___  _________/_  __(_)___ ___  ___  _____
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ /
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_/
//
// ==================================================================================================================================

export class CocoTimer
{
	private var m_Interval:Integer;
	private var m_Started:Integer;
	private var m_Handle:Integer;
	private var m_Signalled:Boolean;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(Interval:Integer)
	{
		m_Interval = Interval;
		m_Started = 0;
		m_Handle = 0;
		m_Signalled = false;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		StopTimer();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property Interval
	{
		function get():Integer
		{
			return m_Interval;
		}
		function set(v:Integer)
		{
			StopTimer();
			m_Interval = v;
			StartTimer();
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property Uptime
	{
		function get():Integer
		{
			var u:Integer = Date.now() - m_Started;
			return u;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property Running
	{
		function get():Boolean
		{
			return m_Handle!=0;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property Signalled
	{
		function get():Boolean
		{
			return m_Signalled;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function ResetTimer()
	{
		m_Started = Date.now();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function StartTimer()
	{
		StopTimer();
		ResetTimer();
		m_Handle = setInterval(__on_timer, m_Interval);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function StopTimer()
	{
		if(m_Handle)
		{
			clearInterval(m_Handle);
			m_Handle = 0;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function __on_timer()
	{
		m_Signalled = true;
		OnTimer();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function OnTimer()
	{
	}
}