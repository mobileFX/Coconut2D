/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *

 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	 _       __     __    ________    ____                 __          _             ______            __            __
//	| |     / /__  / /_  / ____/ /   / __ \___  ____  ____/ /__  _____(_)___  ____ _/ ____/___  ____  / /____  _  __/ /_
//	| | /| / / _ \/ __ \/ / __/ /   / /_/ / _ \/ __ \/ __  / _ \/ ___/ / __ \/ __ `/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	| |/ |/ /  __/ /_/ / /_/ / /___/ _, _/  __/ / / / /_/ /  __/ /  / / / / / /_/ / /___/ /_/ / / / / /_/  __/>  </ /_
//	|__/|__/\___/_.___/\____/_____/_/ |_|\___/_/ /_/\__,_/\___/_/  /_/_/ /_/\__, /\____/\____/_/ /_/\__/\___/_/|_|\__/
//	                                                                       /____/
// ==================================================================================================================================

struct WEBGL_CALL
{
	name:String;
	args:Object;
}

class WebGLRenderingContext
{
	public const ACTIVE_ATTRIBUTES:Integer = 0x8B89;
	public const ACTIVE_TEXTURE:Integer = 0x84E0;
	public const ACTIVE_UNIFORMS:Integer = 0x8B86;
	public const ALIASED_LINE_WIDTH_RANGE:Integer = 0x846E;
	public const ALIASED_POINT_SIZE_RANGE:Integer = 0x846D;
	public const ALPHA:Integer = 0x1906;
	public const ALPHA_BITS:Integer = 0x0D55;
	public const ALWAYS:Integer = 0x0207;
	public const ARRAY_BUFFER:Integer = 0x8892;
	public const ARRAY_BUFFER_BINDING:Integer = 0x8894;
	public const ATTACHED_SHADERS:Integer = 0x8B85;
	public const BACK:Integer = 0x0405;
	public const BLEND:Integer = 0x0BE2;
	public const BLEND_COLOR:Integer = 0x8005;
	public const BLEND_DST_ALPHA:Integer = 0x80CA;
	public const BLEND_DST_RGB:Integer = 0x80C8;
	public const BLEND_EQUATION:Integer = 0x8009;
	public const BLEND_EQUATION_ALPHA:Integer = 0x883D;
	public const BLEND_EQUATION_RGB:Integer = 0x8009;
	public const BLEND_SRC_ALPHA:Integer = 0x80CB;
	public const BLEND_SRC_RGB:Integer = 0x80C9;
	public const BLUE_BITS:Integer = 0x0D54;
	public const BOOL:Integer = 0x8B56;
	public const BOOL_VEC2:Integer = 0x8B57;
	public const BOOL_VEC3:Integer = 0x8B58;
	public const BOOL_VEC4:Integer = 0x8B59;
	public const BROWSER_DEFAULT_WEBGL:Integer = 0x9244;
	public const BUFFER_SIZE:Integer = 0x8764;
	public const BUFFER_USAGE:Integer = 0x8765;
	public const BYTE:Integer = 0x1400;
	public const CCW:Integer = 0x0901;
	public const CLAMP_TO_EDGE:Integer = 0x812F;
	public const COLOR_ATTACHMENT0:Integer = 0x8CE0;
	public const COLOR_BUFFER_BIT:Integer = 0x00004000;
	public const COLOR_CLEAR_VALUE:Integer = 0x0C22;
	public const COLOR_WRITEMASK:Integer = 0x0C23;
	public const COMPILE_STATUS:Integer = 0x8B81;
	public const COMPRESSED_TEXTURE_FORMATS:Integer = 0x86A3;
	public const CONSTANT_ALPHA:Integer = 0x8003;
	public const CONSTANT_COLOR:Integer = 0x8001;
	public const CONTEXT_LOST_WEBGL:Integer = 0x9242;
	public const CULL_FACE:Integer = 0x0B44;
	public const CULL_FACE_MODE:Integer = 0x0B45;
	public const CURRENT_PROGRAM:Integer = 0x8B8D;
	public const CURRENT_VERTEX_ATTRIB:Integer = 0x8626;
	public const CW:Integer = 0x0900;
	public const DECR:Integer = 0x1E03;
	public const DECR_WRAP:Integer = 0x8508;
	public const DELETE_STATUS:Integer = 0x8B80;
	public const DEPTH_ATTACHMENT:Integer = 0x8D00;
	public const DEPTH_BITS:Integer = 0x0D56;
	public const DEPTH_BUFFER_BIT:Integer = 0x00000100;
	public const DEPTH_CLEAR_VALUE:Integer = 0x0B73;
	public const DEPTH_COMPONENT:Integer = 0x1902;
	public const DEPTH_COMPONENT16:Integer = 0x81A5;
	public const DEPTH_FUNC:Integer = 0x0B74;
	public const DEPTH_RANGE:Integer = 0x0B70;
	public const DEPTH_STENCIL:Integer = 0x84F9;
	public const DEPTH_STENCIL_ATTACHMENT:Integer = 0x821A;
	public const DEPTH_TEST:Integer = 0x0B71;
	public const DEPTH_WRITEMASK:Integer = 0x0B72;
	public const DITHER:Integer = 0x0BD0;
	public const DONT_CARE:Integer = 0x1100;
	public const DST_ALPHA:Integer = 0x0304;
	public const DST_COLOR:Integer = 0x0306;
	public const DYNAMIC_DRAW:Integer = 0x88E8;
	public const ELEMENT_ARRAY_BUFFER:Integer = 0x8893;
	public const ELEMENT_ARRAY_BUFFER_BINDING:Integer = 0x8895;
	public const EQUAL:Integer = 0x0202;
	public const FASTEST:Integer = 0x1101;
	public const FLOAT:Integer = 0x1406;
	public const FLOAT_MAT2:Integer = 0x8B5A;
	public const FLOAT_MAT3:Integer = 0x8B5B;
	public const FLOAT_MAT4:Integer = 0x8B5C;
	public const FLOAT_VEC2:Integer = 0x8B50;
	public const FLOAT_VEC3:Integer = 0x8B51;
	public const FLOAT_VEC4:Integer = 0x8B52;
	public const FRAGMENT_SHADER:Integer = 0x8B30;
	public const FRAMEBUFFER:Integer = 0x8D40;
	public const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME:Integer = 0x8CD1;
	public const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE:Integer = 0x8CD0;
	public const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE:Integer = 0x8CD3;
	public const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL:Integer = 0x8CD2;
	public const FRAMEBUFFER_BINDING:Integer = 0x8CA6;
	public const FRAMEBUFFER_COMPLETE:Integer = 0x8CD5;
	public const FRAMEBUFFER_INCOMPLETE_ATTACHMENT:Integer = 0x8CD6;
	public const FRAMEBUFFER_INCOMPLETE_DIMENSIONS:Integer = 0x8CD9;
	public const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:Integer = 0x8CD7;
	public const FRAMEBUFFER_UNSUPPORTED:Integer = 0x8CDD;
	public const FRONT:Integer = 0x0404;
	public const FRONT_AND_BACK:Integer = 0x0408;
	public const FRONT_FACE:Integer = 0x0B46;
	public const FUNC_ADD:Integer = 0x8006;
	public const FUNC_REVERSE_SUBTRACT:Integer = 0x800B;
	public const FUNC_SUBTRACT:Integer = 0x800A;
	public const GENERATE_MIPMAP_HINT:Integer = 0x8192;
	public const GEQUAL:Integer = 0x0206;
	public const GREATER:Integer = 0x0204;
	public const GREEN_BITS:Integer = 0x0D53;
	public const HIGH_FLOAT:Integer = 0x8DF2;
	public const HIGH_INT:Integer = 0x8DF5;
	public const INCR:Integer = 0x1E02;
	public const INCR_WRAP:Integer = 0x8507;
	public const INT:Integer = 0x1404;
	public const INT_VEC2:Integer = 0x8B53;
	public const INT_VEC3:Integer = 0x8B54;
	public const INT_VEC4:Integer = 0x8B55;
	public const INVALID_ENUM:Integer = 0x0500;
	public const INVALID_FRAMEBUFFER_OPERATION:Integer = 0x0506;
	public const INVALID_OPERATION:Integer = 0x0502;
	public const INVALID_VALUE:Integer = 0x0501;
	public const INVERT:Integer = 0x150A;
	public const KEEP:Integer = 0x1E00;
	public const LEQUAL:Integer = 0x0203;
	public const LESS:Integer = 0x0201;
	public const LINE_LOOP:Integer = 0x0002;
	public const LINE_STRIP:Integer = 0x0003;
	public const LINE_WIDTH:Integer = 0x0B21;
	public const LINEAR:Integer = 0x2601;
	public const LINEAR_MIPMAP_LINEAR:Integer = 0x2703;
	public const LINEAR_MIPMAP_NEAREST:Integer = 0x2701;
	public const LINES:Integer = 0x0001;
	public const LINK_STATUS:Integer = 0x8B82;
	public const LOW_FLOAT:Integer = 0x8DF0;
	public const LOW_INT:Integer = 0x8DF3;
	public const LUMINANCE:Integer = 0x1909;
	public const LUMINANCE_ALPHA:Integer = 0x190A;
	public const MAX_COMBINED_TEXTURE_IMAGE_UNITS:Integer = 0x8B4D;
	public const MAX_CUBE_MAP_TEXTURE_SIZE:Integer = 0x851C;
	public const MAX_FRAGMENT_UNIFORM_VECTORS:Integer = 0x8DFD;
	public const MAX_RENDERBUFFER_SIZE:Integer = 0x84E8;
	public const MAX_TEXTURE_IMAGE_UNITS:Integer = 0x8872;
	public const MAX_TEXTURE_SIZE:Integer = 0x0D33;
	public const MAX_VARYING_VECTORS:Integer = 0x8DFC;
	public const MAX_VERTEX_ATTRIBS:Integer = 0x8869;
	public const MAX_VERTEX_TEXTURE_IMAGE_UNITS:Integer = 0x8B4C;
	public const MAX_VERTEX_UNIFORM_VECTORS:Integer = 0x8DFB;
	public const MAX_VIEWPORT_DIMS:Integer = 0x0D3A;
	public const MEDIUM_FLOAT:Integer = 0x8DF1;
	public const MEDIUM_INT:Integer = 0x8DF4;
	public const MIRRORED_REPEAT:Integer = 0x8370;
	public const NEAREST:Integer = 0x2600;
	public const NEAREST_MIPMAP_LINEAR:Integer = 0x2702;
	public const NEAREST_MIPMAP_NEAREST:Integer = 0x2700;
	public const NEVER:Integer = 0x0200;
	public const NICEST:Integer = 0x1102;
	public const NO_ERROR:Integer = 0;
	public const NONE:Integer = 0;
	public const NOTEQUAL:Integer = 0x0205;
	public const ONE:Integer = 1;
	public const ONE_MINUS_CONSTANT_ALPHA:Integer = 0x8004;
	public const ONE_MINUS_CONSTANT_COLOR:Integer = 0x8002;
	public const ONE_MINUS_DST_ALPHA:Integer = 0x0305;
	public const ONE_MINUS_DST_COLOR:Integer = 0x0307;
	public const ONE_MINUS_SRC_ALPHA:Integer = 0x0303;
	public const ONE_MINUS_SRC_COLOR:Integer = 0x0301;
	public const OUT_OF_MEMORY:Integer = 0x0505;
	public const PACK_ALIGNMENT:Integer = 0x0D05;
	public const POINTS:Integer = 0x0000;
	public const POLYGON_OFFSET_FACTOR:Integer = 0x8038;
	public const POLYGON_OFFSET_FILL:Integer = 0x8037;
	public const POLYGON_OFFSET_UNITS:Integer = 0x2A00;
	public const RED_BITS:Integer = 0x0D52;
	public const RENDERBUFFER:Integer = 0x8D41;
	public const RENDERBUFFER_ALPHA_SIZE:Integer = 0x8D53;
	public const RENDERBUFFER_BINDING:Integer = 0x8CA7;
	public const RENDERBUFFER_BLUE_SIZE:Integer = 0x8D52;
	public const RENDERBUFFER_DEPTH_SIZE:Integer = 0x8D54;
	public const RENDERBUFFER_GREEN_SIZE:Integer = 0x8D51;
	public const RENDERBUFFER_HEIGHT:Integer = 0x8D43;
	public const RENDERBUFFER_INTERNAL_FORMAT:Integer = 0x8D44;
	public const RENDERBUFFER_RED_SIZE:Integer = 0x8D50;
	public const RENDERBUFFER_STENCIL_SIZE:Integer = 0x8D55;
	public const RENDERBUFFER_WIDTH:Integer = 0x8D42;
	public const RENDERER:Integer = 0x1F01;
	public const REPEAT:Integer = 0x2901;
	public const REPLACE:Integer = 0x1E01;
	public const RGB:Integer = 0x1907;
	public const RGB5_A1:Integer = 0x8057;
	public const RGB565:Integer = 0x8D62;
	public const MULTISAMPLE:Integer = 0x809D;

	public const RGBA:Integer = 0x1908;
	public const BGRA:Integer = 0x80E1;

	public const RGBA4:Integer = 0x8056;
	public const SAMPLE_ALPHA_TO_COVERAGE:Integer = 0x809E;
	public const SAMPLE_BUFFERS:Integer = 0x80A8;
	public const SAMPLE_COVERAGE:Integer = 0x80A0;
	public const SAMPLE_COVERAGE_INVERT:Integer = 0x80AB;
	public const SAMPLE_COVERAGE_VALUE:Integer = 0x80AA;
	public const SAMPLER_2D:Integer = 0x8B5E;
	public const SAMPLER_CUBE:Integer = 0x8B60;
	public const SAMPLES:Integer = 0x80A9;
	public const SCISSOR_BOX:Integer = 0x0C10;
	public const SCISSOR_TEST:Integer = 0x0C11;
	public const SHADER_TYPE:Integer = 0x8B4F;
	public const SHADING_LANGUAGE_VERSION:Integer = 0x8B8C;
	public const SHORT:Integer = 0x1402;
	public const SRC_ALPHA:Integer = 0x0302;
	public const SRC_ALPHA_SATURATE:Integer = 0x0308;
	public const SRC_COLOR:Integer = 0x0300;
	public const STATIC_DRAW:Integer = 0x88E4;
	public const STENCIL_ATTACHMENT:Integer = 0x8D20;
	public const STENCIL_BACK_FAIL:Integer = 0x8801;
	public const STENCIL_BACK_FUNC:Integer = 0x8800;
	public const STENCIL_BACK_PASS_DEPTH_FAIL:Integer = 0x8802;
	public const STENCIL_BACK_PASS_DEPTH_PASS:Integer = 0x8803;
	public const STENCIL_BACK_REF:Integer = 0x8CA3;
	public const STENCIL_BACK_VALUE_MASK:Integer = 0x8CA4;
	public const STENCIL_BACK_WRITEMASK:Integer = 0x8CA5;
	public const STENCIL_BITS:Integer = 0x0D57;
	public const STENCIL_BUFFER_BIT:Integer = 0x00000400;
	public const STENCIL_CLEAR_VALUE:Integer = 0x0B91;
	public const STENCIL_FAIL:Integer = 0x0B94;
	public const STENCIL_FUNC:Integer = 0x0B92;
	public const STENCIL_INDEX:Integer = 0x1901;
	public const STENCIL_INDEX8:Integer = 0x8D48;
	public const STENCIL_PASS_DEPTH_FAIL:Integer = 0x0B95;
	public const STENCIL_PASS_DEPTH_PASS:Integer = 0x0B96;
	public const STENCIL_REF:Integer = 0x0B97;
	public const STENCIL_TEST:Integer = 0x0B90;
	public const STENCIL_VALUE_MASK:Integer = 0x0B93;
	public const STENCIL_WRITEMASK:Integer = 0x0B98;
	public const STREAM_DRAW:Integer = 0x88E0;
	public const SUBPIXEL_BITS:Integer = 0x0D50;
	public const TEXTURE:Integer = 0x1702;
	public const TEXTURE_2D:Integer = 0x0DE1;
	public const TEXTURE_BINDING_2D:Integer = 0x8069;
	public const TEXTURE_BINDING_CUBE_MAP:Integer = 0x8514;
	public const TEXTURE_CUBE_MAP:Integer = 0x8513;
	public const TEXTURE_CUBE_MAP_NEGATIVE_X:Integer = 0x8516;
	public const TEXTURE_CUBE_MAP_NEGATIVE_Y:Integer = 0x8518;
	public const TEXTURE_CUBE_MAP_NEGATIVE_Z:Integer = 0x851A;
	public const TEXTURE_CUBE_MAP_POSITIVE_X:Integer = 0x8515;
	public const TEXTURE_CUBE_MAP_POSITIVE_Y:Integer = 0x8517;
	public const TEXTURE_CUBE_MAP_POSITIVE_Z:Integer = 0x8519;
	public const TEXTURE_MAG_FILTER:Integer = 0x2800;
	public const TEXTURE_MIN_FILTER:Integer = 0x2801;
	public const TEXTURE_WRAP_S:Integer = 0x2802;
	public const TEXTURE_WRAP_T:Integer = 0x2803;
	public const TEXTURE0:Integer = 0x84C0;
	public const TEXTURE1:Integer = 0x84C1;
	public const TEXTURE10:Integer = 0x84CA;
	public const TEXTURE11:Integer = 0x84CB;
	public const TEXTURE12:Integer = 0x84CC;
	public const TEXTURE13:Integer = 0x84CD;
	public const TEXTURE14:Integer = 0x84CE;
	public const TEXTURE15:Integer = 0x84CF;
	public const TEXTURE16:Integer = 0x84D0;
	public const TEXTURE17:Integer = 0x84D1;
	public const TEXTURE18:Integer = 0x84D2;
	public const TEXTURE19:Integer = 0x84D3;
	public const TEXTURE2:Integer = 0x84C2;
	public const TEXTURE20:Integer = 0x84D4;
	public const TEXTURE21:Integer = 0x84D5;
	public const TEXTURE22:Integer = 0x84D6;
	public const TEXTURE23:Integer = 0x84D7;
	public const TEXTURE24:Integer = 0x84D8;
	public const TEXTURE25:Integer = 0x84D9;
	public const TEXTURE26:Integer = 0x84DA;
	public const TEXTURE27:Integer = 0x84DB;
	public const TEXTURE28:Integer = 0x84DC;
	public const TEXTURE29:Integer = 0x84DD;
	public const TEXTURE3:Integer = 0x84C3;
	public const TEXTURE30:Integer = 0x84DE;
	public const TEXTURE31:Integer = 0x84DF;
	public const TEXTURE4:Integer = 0x84C4;
	public const TEXTURE5:Integer = 0x84C5;
	public const TEXTURE6:Integer = 0x84C6;
	public const TEXTURE7:Integer = 0x84C7;
	public const TEXTURE8:Integer = 0x84C8;
	public const TEXTURE9:Integer = 0x84C9;
	public const TRIANGLE_FAN:Integer = 0x0006;
	public const TRIANGLE_STRIP:Integer = 0x0005;
	public const TRIANGLES:Integer = 0x0004;
	public const UNPACK_ALIGNMENT:Integer = 0x0CF5;
	public const UNPACK_COLORSPACE_CONVERSION_WEBGL:Integer = 0x9243;
	public const UNPACK_FLIP_Y_WEBGL:Integer = 0x9240;
	public const UNPACK_PREMULTIPLY_ALPHA_WEBGL:Integer = 0x9241;
	public const UNSIGNED_BYTE:Integer = 0x1401;
	public const UNSIGNED_INT:Integer = 0x1405;
	public const UNSIGNED_SHORT:Integer = 0x1403;
	public const UNSIGNED_SHORT_4_4_4_4:Integer = 0x8033;
	public const UNSIGNED_SHORT_5_5_5_1:Integer = 0x8034;
	public const UNSIGNED_SHORT_5_6_5:Integer = 0x8363;
	public const VALIDATE_STATUS:Integer = 0x8B83;
	public const VENDOR:Integer = 0x1F00;
	public const VERSION:Integer = 0x1F02;
	public const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING:Integer = 0x889F;
	public const VERTEX_ATTRIB_ARRAY_ENABLED:Integer = 0x8622;
	public const VERTEX_ATTRIB_ARRAY_NORMALIZED:Integer = 0x886A;
	public const VERTEX_ATTRIB_ARRAY_POINTER:Integer = 0x8645;
	public const VERTEX_ATTRIB_ARRAY_SIZE:Integer = 0x8623;
	public const VERTEX_ATTRIB_ARRAY_STRIDE:Integer = 0x8624;
	public const VERTEX_ATTRIB_ARRAY_TYPE:Integer = 0x8625;
	public const VERTEX_SHADER:Integer = 0x8B31;
	public const VIEWPORT:Integer = 0x0BA2;
	public const ZERO:Integer = 0;

    public var __uid:Integer;
    public reference var canvas:HTMLCanvasElement;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static var ENABLE_WEBGL_TRACE:Boolean = true;
    public static var __trace_data:Array<WEBGL_CALL> = null;

    public static function __trace_reset()
    {
    	delete[] __trace_data;
    	__trace_data = new Array<WEBGL_CALL>;
    }

	public static function __trace(data:WEBGL_CALL)
	{
		if(ENABLE_WEBGL_TRACE)
			__trace_data.push(data);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
    public function Constructor(canvas:HTMLCanvasElement)
    {
		__uid = 1;
    	this.canvas = canvas;
    	webgl = this;

    	if(ENABLE_WEBGL_TRACE)
    		__trace_reset();
    }

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property drawingBufferWidth
	{
		function get():Integer { return !canvas ? 0 : canvas.width; }
	}

	public property drawingBufferHeight
	{
		function get():Integer { return !canvas ? 0 : canvas.height; }
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function finish()
	{
		__WebGLRenderingContext_finish(__uid);
		__trace_reset();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function flush()
	{
		__WebGLRenderingContext_flush(__uid);
		__trace_reset();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function activeTexture(texture:Integer) // UNUSED
	{
		__WebGLRenderingContext_activeTexture(__uid, texture);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function attachShader(program:WebGLProgram, shader:WebGLShader)
	{
		__WebGLRenderingContext_attachShader(__uid, program.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindAttribLocation(program:WebGLProgram, index:Integer, name:String) // UNUSED
	{
		__WebGLRenderingContext_bindAttribLocation(__uid, program.__uid, index, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindBuffer(target:Integer, buffer:WebGLBuffer)
	{
		if(buffer==null)
			__WebGLRenderingContext_bindBuffer(__uid, target, 0);
		else
			__WebGLRenderingContext_bindBuffer(__uid, target, buffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindFramebuffer(target:Integer, framebuffer:WebGLFramebuffer)
	{
		if(!framebuffer) return;
		__WebGLRenderingContext_bindFramebuffer(__uid, target, framebuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindRenderbuffer(target:Integer, renderbuffer:WebGLRenderbuffer)
	{
		if(renderbuffer==null)
			__WebGLRenderingContext_bindRenderbuffer(__uid, target, 0);
		else
			__WebGLRenderingContext_bindRenderbuffer(__uid, target, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bindTexture(target:Integer, texture:WebGLTexture)
	{
		if(texture==null)
			__WebGLRenderingContext_bindTexture(__uid, target, 0);
		else
			__WebGLRenderingContext_bindTexture(__uid, target, texture.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendColor(red:Float, green:Float, blue:Float, alpha:Float)
	{
		__WebGLRenderingContext_blendColor(__uid, red, green, blue, alpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendEquation(mode:Integer)
	{
		__WebGLRenderingContext_blendEquation(__uid, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendEquationSeparate(modeRGB:Integer, modeAlpha:Integer)
	{
		__WebGLRenderingContext_blendEquationSeparate(__uid, modeRGB, modeAlpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendFunc(sfactor:Integer, dfactor:Integer)
	{
		__WebGLRenderingContext_blendFunc(__uid, sfactor, dfactor);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function blendFuncSeparate(srcRGB:Integer, dstRGB:Integer, srcAlpha:Integer, dstAlpha:Integer)
	{
		__WebGLRenderingContext_blendFuncSeparate(__uid, srcRGB, dstRGB, srcAlpha, dstAlpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bufferData(target:Integer, data:Float32Array, usage:Integer)
	{
		__WebGLRenderingContext_bufferData(__uid, target, data.buffer.__uid, data.byteOffset, data.length * data.BYTES_PER_ELEMENT, usage);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function bufferSubData(target:Integer, offset:Integer, data:Float32Array)
	{
		__WebGLRenderingContext_bufferSubData(__uid, target, offset, data.buffer.__uid, data.byteOffset, data.length * data.BYTES_PER_ELEMENT);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function checkFramebufferStatus(target:Integer) :Integer
	{
		return __WebGLRenderingContext_checkFramebufferStatus(__uid, target);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear(mask:Integer)
	{
		__WebGLRenderingContext_clear(__uid, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clearColor(red:Float, green:Float, blue:Float, alpha:Float)
	{
		__WebGLRenderingContext_clearColor(__uid, red, green, blue, alpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clearDepth(depth:Float)
	{
		__WebGLRenderingContext_clearDepth(__uid, depth);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clearStencil(s:Integer)
	{
		__WebGLRenderingContext_clearStencil(__uid, s);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function colorMask(red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean)
	{
		__WebGLRenderingContext_colorMask(__uid, red, green, blue, alpha);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function compileShader(shader:WebGLShader)
	{
		__WebGLRenderingContext_compileShader(__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function compressedTexImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, data:Float32Array)
	{
		__WebGLRenderingContext_compressedTexImage2D(__uid, target, level, internalformat, width, height, border, data.buffer.__uid, data.byteOffset, data.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function compressedTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, data:Float32Array)
	{
		__WebGLRenderingContext_compressedTexSubImage2D(__uid, target, level, xoffset, yoffset, width, height, format, data.buffer.__uid, data.byteOffset, data.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function copyTexImage2D(target:Integer, level:Integer, internalformat:Integer, x:Integer, y:Integer, width:Integer, height:Integer, border:Integer)
	{
		__WebGLRenderingContext_copyTexImage2D(__uid, target, level, internalformat, x, y, width, height, border);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function copyTexSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, x:Integer, y:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_copyTexSubImage2D(__uid, target, level, xoffset, yoffset, x, y, width, height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createBuffer() :WebGLBuffer
	{
		return new WebGLBuffer(__WebGLRenderingContext_createBuffer(__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFramebuffer() :WebGLFramebuffer
	{
		return new WebGLFramebuffer(__WebGLRenderingContext_createFramebuffer(__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createProgram() :WebGLProgram
	{
		return new WebGLProgram(__WebGLRenderingContext_createProgram(__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createRenderbuffer() :WebGLRenderbuffer
	{
		return new WebGLRenderbuffer(__WebGLRenderingContext_createRenderbuffer(__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createShader(type:Integer) :WebGLShader
	{
		return new WebGLShader(__WebGLRenderingContext_createShader(__uid, type), type);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createTexture() :WebGLTexture
	{
		return new WebGLTexture(__WebGLRenderingContext_createTexture(__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function cullFace(mode:Integer)
	{
		__WebGLRenderingContext_cullFace(__uid, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteBuffer(buffer:WebGLBuffer)
	{
		__WebGLRenderingContext_deleteBuffer(__uid, buffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteFramebuffer(framebuffer:WebGLFramebuffer)
	{
		__WebGLRenderingContext_deleteFramebuffer(__uid, framebuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_deleteProgram(__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteRenderbuffer(renderbuffer:WebGLRenderbuffer)
	{
		__WebGLRenderingContext_deleteRenderbuffer(__uid, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteShader(shader:WebGLShader)
	{
		__WebGLRenderingContext_deleteShader(__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function deleteTexture(texture:WebGLTexture)
	{
		__WebGLRenderingContext_deleteTexture(__uid, texture.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function depthFunc(func:Integer)
	{
		__WebGLRenderingContext_depthFunc(__uid, func);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function depthMask(flag:Boolean)
	{
		__WebGLRenderingContext_depthMask(__uid, flag);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function depthRange(zNear:Float, zFar:Float)
	{
		__WebGLRenderingContext_depthRange(__uid, zNear, zFar);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function detachShader(program:WebGLProgram, shader:WebGLShader)
	{
		__WebGLRenderingContext_detachShader(__uid, program.__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function disable(cap:Integer)
	{
		__WebGLRenderingContext_disable(__uid, cap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function disableVertexAttribArray(index:Integer)
	{
		__WebGLRenderingContext_disableVertexAttribArray(__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawArrays(mode:Integer, first:Integer, count:Integer)
	{
		__WebGLRenderingContext_drawArrays(__uid, mode, first, count);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawElements(mode:Integer, count:Integer, type:Integer, offset:Integer)
	{
		__WebGLRenderingContext_drawElements(__uid, mode, count, type, offset);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function enable(cap:Integer)
	{
		__WebGLRenderingContext_enable(__uid, cap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function enableVertexAttribArray(index:Integer)
	{
		__WebGLRenderingContext_enableVertexAttribArray(__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function framebufferRenderbuffer(target:Integer, attachment:Integer, renderbuffertarget:Integer, renderbuffer:WebGLRenderbuffer)
	{
		__WebGLRenderingContext_framebufferRenderbuffer(__uid, target, attachment, renderbuffertarget, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function framebufferTexture2D(target:Integer, attachment:Integer, textarget:Integer, texture:WebGLTexture, level:Integer)
	{
		__WebGLRenderingContext_framebufferTexture2D(__uid, target, attachment, textarget, texture.__uid, level);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function frontFace(mode:Integer)
	{
		__WebGLRenderingContext_frontFace(__uid, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function generateMipmap(target:Integer)
	{
		__WebGLRenderingContext_generateMipmap(__uid, target);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getActiveAttrib(program:WebGLProgram, index:Integer) :WebGLActiveInfo
	{
		return new WebGLActiveInfo(__WebGLRenderingContext_getActiveAttrib(__uid, program.__uid, index), program.__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getActiveUniform(program:WebGLProgram, index:Integer) :WebGLActiveInfo
	{
		return new WebGLActiveInfo(__WebGLRenderingContext_getActiveUniform(__uid, program.__uid, index), program.__uid, index);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getAttachedShaders(program:WebGLProgram) :Array<WebGLShader>
	{
		return __WebGLRenderingContext_getAttachedShaders(__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getAttribLocation(program:WebGLProgram, name:String) :Integer
	{
		return __WebGLRenderingContext_getAttribLocation(__uid, program.__uid, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getBufferParameter(target:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getBufferParameter(__uid, target, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getContextAttributes() :WebGLContextAttributes
	{
		return new WebGLContextAttributes(__WebGLRenderingContext_getContextAttributes(__uid));
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getError() :Integer
	{
		return __WebGLRenderingContext_getError(__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getExtension(name:String) :Object
	{
		return __WebGLRenderingContext_getExtension(__uid, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getFramebufferAttachmentParameter(target:Integer, attachment:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getFramebufferAttachmentParameter(__uid, target, attachment, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getParameter(pname:Integer) :String
	{
		return __WebGLRenderingContext_getParameter(__uid, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getProgramInfoLog(program:WebGLProgram) :String
	{
		return __WebGLRenderingContext_getProgramInfoLog(__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getProgramParameter(program:WebGLProgram, pname:Integer) :Boolean
	{
		return __WebGLRenderingContext_getProgramParameter(__uid, program.__uid, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getRenderbufferParameter(target:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getRenderbufferParameter(__uid, target, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderInfoLog(shader:WebGLShader) :String
	{
		return __WebGLRenderingContext_getShaderInfoLog(__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderParameter_boolean(shader:WebGLShader, pname:Integer) :Boolean
	{
		return __WebGLRenderingContext_getShaderParameter_boolean(__uid, shader.__uid, pname);
	}

		////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderParameter_enum(shader:WebGLShader, pname:Integer) :Integer
	{
		return __WebGLRenderingContext_getShaderParameter_enum(__uid, shader.__uid, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderPrecisionFormat(shadertype:Integer, precisiontype:Integer) :WebGLShaderPrecisionFormat
	{
		return new WebGLShaderPrecisionFormat(__WebGLRenderingContext_getShaderPrecisionFormat(__uid, shadertype, precisiontype), shadertype, precisiontype);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getShaderSource(shader:WebGLShader) :String
	{
		return __WebGLRenderingContext_getShaderSource(__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSupportedExtensions() :Array<String>
	{
		return __WebGLRenderingContext_getSupportedExtensions(__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getTexParameter(target:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getTexParameter(__uid, target, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getUniform(program:WebGLProgram, location:WebGLUniformLocation) :String
	{
		return __WebGLRenderingContext_getUniform(__uid, program.__uid, location.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getUniformLocation(program:WebGLProgram, name:String) :WebGLUniformLocation
	{
		return new WebGLUniformLocation(__WebGLRenderingContext_getUniformLocation(__uid, program.__uid, name), program.__uid, name);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getVertexAttrib(index:Integer, pname:Integer) :String
	{
		return __WebGLRenderingContext_getVertexAttrib(__uid, index, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getVertexAttribOffset(index:Integer, pname:Integer) :Integer
	{
		return __WebGLRenderingContext_getVertexAttribOffset(__uid, index, pname);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function hint(target:Integer, mode:Integer)
	{
		__WebGLRenderingContext_hint(__uid, target, mode);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isBuffer(buffer:WebGLBuffer) :Boolean
	{
		return __WebGLRenderingContext_isBuffer(__uid, buffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isContextLost() :Boolean
	{
		return __WebGLRenderingContext_isContextLost(__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isEnabled(cap:Integer) :Boolean
	{
		return __WebGLRenderingContext_isEnabled(__uid, cap);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isFramebuffer(framebuffer:WebGLFramebuffer) :Boolean
	{
		return __WebGLRenderingContext_isFramebuffer(__uid, framebuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isProgram(program:WebGLProgram) :Boolean
	{
		return __WebGLRenderingContext_isProgram(__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isRenderbuffer(renderbuffer:WebGLRenderbuffer) :Boolean
	{
		return __WebGLRenderingContext_isRenderbuffer(__uid, renderbuffer.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isShader(shader:WebGLShader) :Boolean
	{
		return __WebGLRenderingContext_isShader(__uid, shader.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function isTexture(texture:WebGLTexture) :Boolean
	{
		return __WebGLRenderingContext_isTexture(__uid, texture.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function lineWidth(width:Float)
	{
		__WebGLRenderingContext_lineWidth(__uid, width);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function linkProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_linkProgram(__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function pixelStorei(pname:Integer, param:Integer)
	{
		__WebGLRenderingContext_pixelStorei(__uid, pname, param);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function polygonOffset(factor:Float, units:Float)
	{
		__WebGLRenderingContext_polygonOffset(__uid, factor, units);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function readPixels(x:Integer, y:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array)
	{
		__WebGLRenderingContext_readPixels(__uid, x, y, width, height, format, type, pixels.buffer.__uid, pixels.byteOffset, pixels.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function renderbufferStorage(target:Integer, internalformat:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_renderbufferStorage(__uid, target, internalformat, width, height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function sampleCoverage(value:Float, invert:Boolean)
	{
		__WebGLRenderingContext_sampleCoverage(__uid, value, invert);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function scissor(x:Integer, y:Integer, width:Integer, height:Integer)
	{
		__WebGLRenderingContext_scissor(__uid, x, y, width, height);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function shaderSource(shader:WebGLShader, source:String)
	{
		__WebGLRenderingContext_shaderSource(__uid, shader.__uid, source);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilFunc(func:Integer, ref:Integer, mask:Integer)
	{
		__WebGLRenderingContext_stencilFunc(__uid, func, ref, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilFuncSeparate(face:Integer, func:Integer, ref:Integer, mask:Integer)
	{
		__WebGLRenderingContext_stencilFuncSeparate(__uid, face, func, ref, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilMask(mask:Integer)
	{
		__WebGLRenderingContext_stencilMask(__uid, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilMaskSeparate(face:Integer, mask:Integer)
	{
		__WebGLRenderingContext_stencilMaskSeparate(__uid, face, mask);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilOp(fail:Integer, zfail:Integer, zpass:Integer)
	{
		__WebGLRenderingContext_stencilOp(__uid, fail, zfail, zpass);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function stencilOpSeparate(face:Integer, fail:Integer, zfail:Integer, zpass:Integer)
	{
		__WebGLRenderingContext_stencilOpSeparate(__uid, face, fail, zfail, zpass);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, format:Integer, type:Integer, pixels:ArrayBufferView)
	{
		__WebGLRenderingContext_texImage2D(__uid, target, level, internalformat, width, height, 0, format, type, pixels ? pixels.buffer.__uid : 0, pixels ? pixels.byteOffset : 0, pixels ? pixels.byteLength : 0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, image:Image)
	{
		__WebGLRenderingContext_texImage2D(__uid, target, level, internalformat, image.width, image.height, 0, format, type, image.__imageData.data.buffer.__uid, 0, image.__imageData.data.buffer.byteLength);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texImage2D(target:Integer, level:Integer, internalformat:Integer, format:Integer, type:Integer, video:HTMLVideoElement)
	{
		__WebGLRenderingContext_texImage2D(__uid, target, level, internalformat, video.width, video.height, 0, format, type, video.__imageData.data.buffer.__uid, 0, video.__imageData.data.buffer.byteLength);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texParameterf(target:Integer, pname:Integer, param:Float)
	{
		__WebGLRenderingContext_texParameterf(__uid, target, pname, param);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texParameteri(target:Integer, pname:Integer, param:Integer)
	{
		__WebGLRenderingContext_texParameteri(__uid, target, pname, param);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function texSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels:Float32Array)
	{
		__WebGLRenderingContext_texSubImage2D(__uid, target, level, xoffset, yoffset, width, height, format, type, pixels.buffer.__uid, pixels.byteOffset, pixels.length);
	}

	public function texSubImage2D(target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, format:Integer, type:Integer, video:HTMLVideoElement)
	{
		__WebGLRenderingContext_texSubImage2D(__uid, target, level, xoffset, yoffset, video.width, video.height, format, type, video.__imageData.data.buffer.__uid, video.__imageData.data.byteOffset, video.__imageData.data.byteLength);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1f(location:WebGLUniformLocation, x:Float)
	{
		__WebGLRenderingContext_uniform1f(__uid, location.__uid, x);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform1fv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1i(location:WebGLUniformLocation, x:Integer)
	{
		__WebGLRenderingContext_uniform1i(__uid, location.__uid, x);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform1iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform1iv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2f(location:WebGLUniformLocation, x:Float, y:Float)
	{
		__WebGLRenderingContext_uniform2f(__uid, location.__uid, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform2fv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2i(location:WebGLUniformLocation, x:Integer, y:Integer)
	{
		__WebGLRenderingContext_uniform2i(__uid, location.__uid, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform2iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform2iv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3f(location:WebGLUniformLocation, x:Float, y:Float, z:Float)
	{
		__WebGLRenderingContext_uniform3f(__uid, location.__uid, x, y, z);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform3fv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer)
	{
		__WebGLRenderingContext_uniform3i(__uid, location.__uid, x, y, z);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform3iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform3iv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4f(location:WebGLUniformLocation, x:Float, y:Float, z:Float, w:Float)
	{
		__WebGLRenderingContext_uniform4f(__uid, location.__uid, x, y, z, w);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4fv(location:WebGLUniformLocation, v:Float32Array)
	{
		__WebGLRenderingContext_uniform4fv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4i(location:WebGLUniformLocation, x:Integer, y:Integer, z:Integer, w:Integer)
	{
		__WebGLRenderingContext_uniform4i(__uid, location.__uid, x, y, z, w);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniform4iv(location:WebGLUniformLocation, v:Int32Array)
	{
		__WebGLRenderingContext_uniform4iv(__uid, location.__uid, v.buffer.__uid, v.byteOffset, v.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniformMatrix2fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array)
	{
		__WebGLRenderingContext_uniformMatrix2fv(__uid, location.__uid, transpose, value.buffer.__uid, value.byteOffset, value.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniformMatrix3fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array)
	{
		__WebGLRenderingContext_uniformMatrix3fv(__uid, location.__uid, transpose, value.buffer.__uid, value.byteOffset, value.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function uniformMatrix4fv(location:WebGLUniformLocation, transpose:Boolean, value:Float32Array)
	{
		__WebGLRenderingContext_uniformMatrix4fv(__uid, location.__uid, transpose, value.buffer.__uid, value.byteOffset, value.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function useProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_useProgram(__uid, program ? program.__uid : 0);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function validateProgram(program:WebGLProgram)
	{
		__WebGLRenderingContext_validateProgram(__uid, program.__uid);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib1f(indx:Integer, x:Float)
	{
		__WebGLRenderingContext_vertexAttrib1f(__uid, indx, x);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib1fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib1fv(__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib2f(indx:Integer, x:Float, y:Float)
	{
		__WebGLRenderingContext_vertexAttrib2f(__uid, indx, x, y);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib2fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib2fv(__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib3f(indx:Integer, x:Float, y:Float, z:Float)
	{
		__WebGLRenderingContext_vertexAttrib3f(__uid, indx, x, y, z);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib3fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib3fv(__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib4f(indx:Integer, x:Float, y:Float, z:Float, w:Float)
	{
		__WebGLRenderingContext_vertexAttrib4f(__uid, indx, x, y, z, w);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttrib4fv(indx:Integer, values:Float32Array)
	{
		__WebGLRenderingContext_vertexAttrib4fv(__uid, indx, values.buffer.__uid, values.byteOffset, values.length);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function vertexAttribPointer(indx:Integer, size:Integer, type:Integer, normalized:Boolean, stride:Integer, offset:Integer)
	{
		__WebGLRenderingContext_vertexAttribPointer(__uid, indx, size, type, normalized, stride, offset);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function viewport(x:Float, y:Float, width:Float, height:Float)
	{
		__WebGLRenderingContext_viewport(__uid, x, y, width, height);
	}
}

