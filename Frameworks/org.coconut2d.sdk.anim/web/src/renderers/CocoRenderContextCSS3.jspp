/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	    __________                 ____                 __          ______            __            __
//	   /  _/ ____/___  _________  / __ \___  ____  ____/ /__  _____/ ____/___  ____  / /____  _  __/ /_
//	   / // /   / __ \/ ___/ __ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	 _/ // /___/ /_/ / /__/ /_/ / _, _/  __/ / / / /_/ /  __/ /  / /___/ /_/ / / / / /_/  __/>  </ /_
//	/___/\____/\____/\___/\____/_/ |_|\___/_/ /_/\__,_/\___/_/   \____/\____/_/ /_/\__/\___/_/|_|\__/
//
// ==================================================================================================================================

class CocoRenderContextCSS3 implements ICocoRenderContext
{
	private reference var __CONTAINER:HTMLDivElement;

	// Matrix
	private var __modelViewMatrix:CocoMatrix;
	private var __projectionMatrix:CocoMatrix;
	private var __modelViewMatrixCSS3:CocoMatrix;

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Constructor(ctx:HTMLDivElement)
 	{
 		__CONTAINER = ctx;

 		prepareContainer();

 		__modelViewMatrix = new CocoMatrix();
		__projectionMatrix = new CocoMatrix();
		__modelViewMatrixCSS3 = new CocoMatrix();
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
 		delete __modelViewMatrix;
 		delete __projectionMatrix;
 		delete __modelViewMatrixCSS3;
 	}

 	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function getName():String									{ return "CSS3"; }
 	public function getType():COCO_RENDERING_CONTEXT_ENUM				{ return COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_CSS3; }
	public function getCanvasLogicalWidth():Integer						{ return __CONTAINER.offsetWidth; }
	public function getCanvasLogicalHeight():Integer					{ return __CONTAINER.offsetHeight; }
	public function getScreenBufferWidth():Integer						{ return __CONTAINER.offsetWidth; }
	public function getScreenBufferHeight():Integer						{ return __CONTAINER.offsetHeight; }
	public function getFrameBufferWidth():Integer						{ return getCanvasLogicalWidth(); }
	public function getFrameBufferHeight():Integer						{ return getCanvasLogicalHeight(); }
	public function getFrameBufferViewScale():Float						{ return engine.device.LogicalViewScale; }
	public function getModelViewMatrix():CocoMatrix						{ return __modelViewMatrix; }
	public function getProjectionMatrix():CocoMatrix					{ return __projectionMatrix; }
	public function hide()												{ __CONTAINER.style.visibility="hidden"; }
	public function show()												{ __CONTAINER.style.visibility="hidden"; }
	public function ready():Boolean										{ return true; }
	public function getHtmlElement():HTMLElement						{ return __CONTAINER; }
	public function swapBinAtlasRenderData(clip:CocoClip):Boolean		{ return true; }

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function cls()
	{
		__modelViewMatrix.identity();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function clip(x:Float, y:Float, w:Float, h:Float)
	{
		__CONTAINER.style.clip = "rect(" + String(y) + "px, " + String(x+w)  + "px, " + String(y+h) + "px, " + String(x) + "px)";
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function clipDisable()
	{
		__CONTAINER.style.clip = "rect(0px, " + String(getScreenBufferHeight()) + "px, 0px, " + String(getScreenBufferWidth()) + "px)";
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function flush()
 	{
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function finish()
 	{
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(viewScale:Float)
	{
		prepareContainer();

		// Initialize the matrices
		__projectionMatrix.identity();
		__projectionMatrix.translate(getScreenBufferWidth()/2.0, getScreenBufferHeight()/2.0);
		__projectionMatrix.scale(viewScale*engine.PixelRatio, viewScale*engine.PixelRatio);
		__modelViewMatrix.identity();

		// Print out a device report
		engine.device.report(this);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function prepareContainer()
	{
		__CONTAINER.style.position				= "absolute";
		__CONTAINER.style.overflow				= "hidden";
		__CONTAINER.style.top					= "0px";
		__CONTAINER.style.left					= "0px";
		__CONTAINER.style.width  				= String(engine.device.LogicalPixelsWidth)  + 'px';
		__CONTAINER.style.height 				= String(engine.device.LogicalPixelsHeight) + 'px';
		__CONTAINER.style.margin				= "0px";
		__CONTAINER.style.padding				= "0px";
		__CONTAINER.style.visibility			= "visible";
		__CONTAINER.style.backfaceVisibility	= "hidden";
		__CONTAINER.style.backgroundColor		= "transparent";
		__CONTAINER.style.transformStyle		= "preserve-3d";
		__CONTAINER.style.webkitTransformStyle	= "preserve-3d";
		__CONTAINER.style.transformOrigin		= "0% 0% 0px";
		__CONTAINER.style.webkitTransformOrigin	= "0% 0% 0px";
		__CONTAINER.style.transform				= "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
		__CONTAINER.style.webkitTransformStyle	= "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
		__CONTAINER.style.borderSpacing			= 0;
		__CONTAINER.style.borderWidth			= 0;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareImage(img:CocoImage):ICocoImageRenderData
	{
		return new CocoImageRenderData2D();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareClip(clip:CocoClip)
	{
	}

	public function prepareVideoFrame(img:CocoImage, video:HTMLVideoElement):CocoImage
	{
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function apply(clip:CocoClip, keyFrame:CocoKeyFrame, matrix:CocoMatrix)
	{
		if(!clip || !keyFrame || !matrix) return;

	 	if(keyFrame.x!=0 || keyFrame.y!=0)	 			matrix.translate(keyFrame.x, keyFrame.y);
	 	if(keyFrame.scaleX!=1 ||keyFrame.scaleY!=1) 	matrix.scale(keyFrame.scaleX, keyFrame.scaleY);
	 	if(keyFrame.rotation!=0) 						matrix.rotateZ(keyFrame.rotation * RADIANS);
	 	if(keyFrame.pivotX!=0 || keyFrame.pivotY!=0) 	matrix.translate(-keyFrame.pivotX, -keyFrame.pivotY);

	 	if(matrix==__modelViewMatrix)
	 	{
	 		var DIV:HTMLElement = document.getElementById(clip.__uniqueID);
	 		if(DIV)
	 		{
				DIV.style.opacity = DIV.getAttribute("ready")=="true" && keyFrame.visible ? keyFrame.alpha : 0;
				if(DIV.style.opacity==0)
				{
					DIV.parentNode.removeChild(DIV);
				}
				else
				{
					__modelViewMatrixCSS3.copyFrom(__modelViewMatrix.__m);
					__modelViewMatrixCSS3.translate(-(clip.__image.textureCellWidth/clip.__image.multiplier)/2, -(clip.__image.textureCellHeight/clip.__image.multiplier)/2);
					__modelViewMatrixCSS3.multiplyByMatrix(__projectionMatrix, true, true);
					__modelViewMatrixCSS3.__m.rc34 = clip.__zIndex;
					var tm:String = __modelViewMatrixCSS3.toCSS3D(true);
					if(DIV.style.transform != tm)
					{
						DIV.style.webkitTransform = DIV.style.transform = tm;
						DIV.style.zIndex = clip.__zIndex;
					}
				}
	 		}
	 		if((!keyFrame.visible || keyFrame.alpha==0) && clip.__children.size()>0)
	 		{
	 			if(hideClipChildren(clip))
	 			{
					//clip.__scene.__root.reindex_z();
	 			}
	 		}
	 	}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function hideClipChildren(clip:CocoClip):Boolean
	{
		if(!clip) return false;

		var layout_changed:Boolean = false;
		var item:CocoClip;
		var DIV:HTMLElement;

		for(var i:Integer=clip.__children.size()-1; i>=0; i--)
		{
			item = clip.__children[i];
			DIV = document.getElementById(item.__uniqueID);
			if(DIV)
			{
				DIV.parentNode.removeChild(DIV);
				layout_changed = true;
			}
			layout_changed |= hideClipChildren(item);
		}

		return layout_changed;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(scene:CocoScene, clip:CocoClip)
	{
		if(!clip.__image || !clip.__image.hImage) return;

		var DIV:HTMLElement = clip.__ANCHOR ? clip.__ANCHOR : document.getElementById(clip.__uniqueID);

		if(!DIV || (DIV && DIV.getAttribute("ready")!="true"))
		{
			DIV = DIV ? DIV : document.createElement("div");
			DIV.id = clip.__uniqueID;
			DIV.setAttribute("instanceName", clip.__instanceName);

			DIV.style.display				= "inline-block";
			DIV.style.position				= "absolute";
			DIV.style.top					= "0px";
			DIV.style.left					= "0px";
			DIV.style.width					= String(clip.__image.textureCellWidth/clip.__image.multiplier) + "px";
			DIV.style.height				= String(clip.__image.textureCellHeight/clip.__image.multiplier) + "px";
			DIV.style.opacity				= 0;
			DIV.style.margin				= "0px";
			DIV.style.padding				= "0px";
			DIV.style.visibility			= "visible";
			DIV.style.backfaceVisibility	= "hidden";
			DIV.style.overflow				= "hidden";
			DIV.style.backgroundColor		= "transparent";
			DIV.style.transformStyle		= "preserve-3d";
			DIV.style.webkitTransformStyle	= "preserve-3d";
			DIV.style.transformOrigin		= "0% 0% 0px";
			DIV.style.webkitTransformOrigin	= "0% 0% 0px";
			DIV.style.transform				= "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
			DIV.style.webkitTransformStyle	= "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
			DIV.style.borderSpacing			= 0;
			DIV.style.borderWidth			= 0;

			// Set DIV background image
			DIV.style.backgroundImage 		= "url(" + clip.__image.hImage.src + ")";
			DIV.style.backgroundPosition	= "0px 0px";
			DIV.style.backgroundRepeat		= "no-repeat";
			DIV.style.backgroundSize		= String(Math.floor(clip.__image.hImage.naturalWidth/clip.__image.multiplier)) + "px " + String(Math.floor(clip.__image.hImage.naturalHeight/clip.__image.multiplier)) + "px";
			DIV.style.backgroundBlendMode	= "normal";
			DIV.style.backgroundClip		= "border-box";
			DIV.style.backgroundOrigin		= "border-box";

			DIV = __CONTAINER.appendChild(DIV);
			DIV.setAttribute("ready", "true");
		}

		// Spritesheet Animation in pure HTML5 with CSS3!!

		if(DIV.style.backgroundImage != "url(" + clip.__image.hImage.src + ")")
			DIV.style.backgroundImage = "url(" + clip.__image.hImage.src + ")";

		var tx:Float = -((clip.__image.textureGrid[clip.__currentFrame.spriteSequenceFrameIndex * 2 + 1]) * clip.__image.textureCellWidth/clip.__image.multiplier);
		var ty:Float = -((clip.__image.textureGrid[clip.__currentFrame.spriteSequenceFrameIndex * 2 + 0]) * clip.__image.textureCellHeight/clip.__image.multiplier);

		tx -= 0;//clip.__image.binpackX;
		ty -= 0;//clip.__image.binpackY;

		DIV.style.backgroundPosition = String(Math.floor(tx)) + "px " + String(Math.floor(ty)) + "px";
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawImage(image:CocoImage, optional tx:Float, optional ty:Float, optional flipH:Boolean, optional flipV:Boolean)
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskBegin()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskEnd(invert:Boolean)
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawBoundingBox(clip:CocoClip)
	{
	}
}

