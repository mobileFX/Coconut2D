/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

///////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_SCREEN_ORIENTATION
{
	SCREEN_ORIENTATION_PORTRAIT						= 0,
	SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN			= 180,
	SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE			= -90,
	SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE	= 90,
	SCREEN_ORIENTATION_ANY							= 255
};

///////////////////////////////////////////////////////////////////////////////////////////////
enum COCO_DEVICE
{
	DEVICE_GENERIC_MDPI			= 0x0,
	DEVICE_GENERIC_HDPI			= 0x1,
	DEVICE_GENERIC_XHDPI		= 0x2,
	DEVICE_GENERIC_XXHDPI		= 0x3,
	DEVICE_GENERIC_TVDPI		= 0x4,
	DEVICE_GENERIC_LDPI			= 0x5,
	DEVICE_IPHONE_3GS			= 0xa1,
	DEVICE_IPHONE_4             = 0xa2,
	DEVICE_IPHONE_4S            = 0xa3,
	DEVICE_IPHONE_5             = 0xa4,
	DEVICE_IPHONE_5S            = 0xa5,
	DEVICE_IPHONE_5C            = 0xa6,
	DEVICE_IPHONE_6             = 0xa7,
	DEVICE_IPHONE_6_PLUS        = 0xa8,
	DEVICE_IPAD                 = 0xb1,
	DEVICE_IPAD_2               = 0xb2,
	DEVICE_IPAD_3               = 0xb3,
	DEVICE_IPAD_MINI            = 0xb4,
	DEVICE_IPAD_AIR             = 0xb5,
	DEVICE_IPAD_MINI_RETINA     = 0xb6
};

// ==================================================================================================================================
//	    ____            _           __  ___
//	   / __ \___ _   __(_)_______  /  |/  /__  ______________ _____ ____
//	  / / / / _ \ | / / / ___/ _ \/ /|_/ / _ \/ ___/ ___/ __ `/ __ `/ _ \
//	 / /_/ /  __/ |/ / / /__/  __/ /  / /  __(__  |__  ) /_/ / /_/ /  __/
//	/_____/\___/|___/_/\___/\___/_/  /_/\___/____/____/\__,_/\__, /\___/
//	                                                        /____/
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////
enum DEVICE_MESSAGE_ENUM
{
	MESSAGE_NONE			= 0,

	MESSAGE_TOUCH_MASK		= 0x100,
	MESSAGE_TOUCH_START		= 0x101,
	MESSAGE_TOUCH_MOVE		= 0x102,
	MESSAGE_TOUCH_END		= 0x103,
	MESSAGE_TOUCH_CLICK		= 0x104,
	MESSAGE_TOUCH_DBLCLICK	= 0x105,

	MESSAGE_KEY_MASK		= 0x200,
	MESSAGE_KEY_DOWN		= 0x201,
	MESSAGE_KEY_UP			= 0x300,

	MESSAGE_HTTP_MASK		= 0x500,
	MESSAGE_HTTP_DONE		= 0x501
};

///////////////////////////////////////////////////////////////////////////////////////////////
enum DEVICE_KEYS_ENUM
{
	DEVICE_KEY_NONE				= 0,
	DEVICE_KEY_ALT				= 18,
	DEVICE_KEY_BACKSPACE		= 8,
	DEVICE_KEY_BREAK			= 19,
	DEVICE_KEY_CAPS_LOCK		= 20,
	DEVICE_KEY_CTRL				= 17,
	DEVICE_KEY_DELETE			= 46,
	DEVICE_KEY_DOWN				= 40,
	DEVICE_KEY_END				= 35,
	DEVICE_KEY_ENTER			= 13,
	DEVICE_KEY_ESCAPE			= 27,
	DEVICE_KEY_F1				= 112,
	DEVICE_KEY_F10				= 121,
	DEVICE_KEY_F11				= 122,
	DEVICE_KEY_F12				= 123,
	DEVICE_KEY_F2				= 113,
	DEVICE_KEY_F3				= 114,
	DEVICE_KEY_F4				= 115,
	DEVICE_KEY_F5				= 116,
	DEVICE_KEY_F6				= 117,
	DEVICE_KEY_F7				= 118,
	DEVICE_KEY_F8				= 119,
	DEVICE_KEY_F9				= 120,
	DEVICE_KEY_HOME				= 36,
	DEVICE_KEY_INSERT			= 45,
	DEVICE_KEY_LEFT				= 37,
	DEVICE_KEY_NUM_LOCK			= 144,
	DEVICE_KEY_PAGE_DOWN		= 34,
	DEVICE_KEY_PAGE_UP			= 33,
	DEVICE_KEY_RIGHT			= 39,
	DEVICE_KEY_SCROLL_LOCK		= 145,
	DEVICE_KEY_SHIFT			= 16,
	DEVICE_KEY_SPACE			= 32,
	DEVICE_KEY_TAB				= 9,
	DEVICE_KEY_UP				= 38,
	DEVICE_KEY_DECIMAL			= 110
};

///////////////////////////////////////////////////////////////////////////////////////////////
struct DEVICE_MESSAGE
{
	name:String;
	handled:Boolean;
	handledBy:CocoClip;
	type:DEVICE_MESSAGE_ENUM;
	timestamp:Time;
	cycle:Integer;
	peeked:Boolean;

	// Mouse/Touch
	touches:Integer;
	x0:Float;
	x1:Float;
	x2:Float;
	x3:Float;
	x4:Float;
	y0:Float;
	y1:Float;
	y2:Float;
	y3:Float;
	y4:Float;

	// World x,y
	wx:Float;
	wy:Float;

	// View x,y
	vx:Float;
	vy:Float;

	// Keyboard
	keyCode:Integer;
	special:DEVICE_KEYS_ENUM;
	character:String;
	ctrlKey:Boolean;
	altKey:Boolean;
	shiftKey:Boolean;
}

///////////////////////////////////////////////////////////////////////////////////////////////
class CocoDevice
{
	public var DEBUG_HOST:String;

	public var __BASE_WIDTH:Integer;
	public var __BASE_HEIGHT:Integer;

	public var Force2D:Boolean;
	public var ForceCSS3:Boolean;
	public var isChrome:Boolean;
	public var isFirefox:Boolean;
	public var isSafari:Boolean;
	public var isIE10Plus:Boolean;
	public var isIPhone:Boolean;
	public var isIPad:Boolean;
	public var isDesktopSafari:Boolean;
	public var isAndroid:Boolean;
	public var isIPad1:Boolean;
	public var isIPad2:Boolean;
	public var isIPad3:Boolean;
	public var isIPhone3:Boolean;
	public var isIPhone4:Boolean;
	public var isIPhone5:Boolean;
	public var isIPhone6:Boolean;
	public var isIPhone6Plus:Boolean;
	public var HasTouchscreen:Boolean;
	public var isIOS:Boolean;
	public var pixelRatio:Float;
	public var zoom:Float;
	public var unorientedScreenWidth:Integer;
	public var unorientedScreenHeight:Integer;
	public var isMobileHTML5Browser:Boolean;
	public var isHTML5Browser:Boolean;
	public var isDesktop:Boolean;
	public var isNative:Boolean;
	public var isCoconut2DPlayer:Boolean;
	public var HasWebAudio:Boolean;

	public var ISO_LOCALE:String;
	public var EXPLICIT_DECIMAL_CHAR:String;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function userAgent():String
	{
		var ua:String;
		if(window.navigator.userAgent) ua = window.navigator.userAgent;
		else if(window.navigator.vendor) ua = window.navigator.vendor;
		else if(window.opera) ua = window.opera;
		return ua;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function __isMobileBrowser():Boolean
	{
		var rx:RegExp = new RegExp("(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-", "i");
		var result:Boolean = rx.test(userAgent().substr(0,4));
		delete rx;
		return !result;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		var ua:String = userAgent();

		__BASE_WIDTH				= 480;
		__BASE_HEIGHT				= 320;

		DEBUG_HOST					= argv("trace");

		Force2D						= (window.location.search.indexOf("ctx=2d")!=-1);
		ForceCSS3					= (window.location.search.indexOf("ctx=css3")!=-1);

		isNative					= (global.__native);
		isCoconut2DPlayer			= (global.__Coconut2DPlayer);

		// systemXDPI: gets the number of horizontal dots per inch (dpi) of display resolution at normal zoom level.
		// deviceXDPI: gets the actual number of horizontal dots per inch (dpi) of the system's screen.
		// logicalXDPI: gets the normal number of horizontal dots per inch (DPI) of the system's screen.
		// window.devicePixelRatio = window.screen.deviceXDPI / window.screen.logicalXDPI

		pixelRatio					= window.devicePixelRatio;
		zoom						= window.deviceZoom;

		unorientedScreenWidth		= Math.min(window.screen.width, window.screen.height);
		unorientedScreenHeight		= Math.max(window.screen.width, window.screen.height);

		isChrome					= (ua.indexOf("Chrome")!=-1);
		isFirefox					= (ua.indexOf("Firefox")!=-1);
		isSafari					= (ua.indexOf("Safari")!=-1);
		isIE10Plus					= (ua.indexOf("Trident")!=-1);

		isIPhone					= (ua.indexOf("iPhone")!=-1);
		isDesktopSafari				= (ua.indexOf("Windows")!=-1) && (ua.indexOf("Safari")!=-1);
		isAndroid					= (ua.indexOf("Android")!=-1);

		isIPad						= (ua.indexOf("iPad")!=-1);
		isIPad1						= (isIPad && (ua.indexOf("Mobile/8F190")!=-1));
		isIPad2						= (isIPad   && pixelRatio==1);
		isIPad3						= (isIPad   && pixelRatio==2);

		isIPhone3					= (isIPhone && pixelRatio==1 && unorientedScreenHeight*pixelRatio==480);
		isIPhone4					= (isIPhone && pixelRatio==2 && unorientedScreenHeight*pixelRatio==960);
		isIPhone5					= (isIPhone && pixelRatio==2 && unorientedScreenHeight*pixelRatio==1136);
		isIPhone6					= (isIPhone && pixelRatio==2 && unorientedScreenHeight*pixelRatio==1334);
		isIPhone6Plus				= (isIPhone && pixelRatio==3 && window.innerHeight*pixelRatio==2208);

		isIOS						= (isIPhone || isIPad);
		HasTouchscreen				= (isAndroid || isIOS);

		isHTML5Browser				= !isNative && (isChrome || isFirefox || isSafari || isIE10Plus || isDesktopSafari);
		isDesktop					= (!(isIOS || isAndroid));
		isMobileHTML5Browser		= (isHTML5Browser && !isDesktop);

		//if(!isMobileHTML5Browser)
		//	pixelRatio = 1.0;

		// Hack for mobile and tablet devices, limit images at @2x
		//if(isMobileHTML5Browser && pixelRatio>1)
		//	pixelRatio = 2;

		HasWebAudio					= global.__webAudio;

		ISO_LOCALE					= "";
		EXPLICIT_DECIMAL_CHAR		= "";
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function report(ctx:ICocoRenderContext)
	{
		var msg:String = userAgent();

		msg = "\n === Created with mobileFX Coconut2D (http://www.mobilefx.com) ===";

		msg += "\nUser Agent\t\t\t\t\t\t\t: " + userAgent();

		if(isCoconut2DPlayer)	msg += "\nDetected Device\t\t\t\t\t\t: Coconut2D Player";
		if(isIPad1) 			msg += "\nDetected Device\t\t\t\t\t\t: iPad";
		if(isIPad2) 			msg += "\nDetected Device\t\t\t\t\t\t: iPad 2";
		if(isIPad3) 			msg += "\nDetected Device\t\t\t\t\t\t: iPad 3";
		if(isIPhone3)			msg += "\nDetected Device\t\t\t\t\t\t: iPhone 3";
		if(isIPhone4)			msg += "\nDetected Device\t\t\t\t\t\t: iPhone 4";
		if(isIPhone5)			msg += "\nDetected Device\t\t\t\t\t\t: iPhone 5";
		if(isIPhone6)			msg += "\nDetected Device\t\t\t\t\t\t: iPhone 6";
		if(isIPhone6Plus) 		msg += "\nDetected Device\t\t\t\t\t\t: iPhone 6 Plus";

		msg += "\nBrowser Type\t\t\t\t\t\t: " + (isHTML5Browser ? "Mobile Browser" : "Desktop Browser");
		msg += "\nRendering Engine\t\t\t\t\t: " + engine.__ctx.getName();
		msg += "\nAudio Engine\t\t\t\t\t\t: " + (HasWebAudio ? "WebAudio" : "Legacy");
		msg += "\nPhysical Pixels\t\t\t\t\t\t: " + String(PhysicalPixelsWidth) + " x " + String(PhysicalPixelsHeight) + " pixels";
		msg += "\nLogical Pixels:\t\t\t\t\t\t: " + String(LogicalPixelsWidth) + " x " + String(LogicalPixelsHeight) + " points";
		msg += "\nScreen Buffer:\t\t\t\t\t\t: " + String(ctx.getScreenBufferWidth()) + " x " + String(ctx.getScreenBufferHeight()) + " pixels";

		if(engine.__ENABLE_RENDERING_ON_FRAME_BUFFER)
			msg += "\nFrame Buffer:\t\t\t\t\t\t: " + String(ctx.getFrameBufferWidth()) + " x " + String(ctx.getFrameBufferHeight()) + " pixels";

		msg += "\nDevice Pixel Ratio\t\t\t\t\t: x" + String(pixelRatio);
		msg += "\nEngine Pixel Ratio\t\t\t\t\t: x" + String(engine.PixelRatio);
		msg += "\nScreen Multiplier\t\t\t\t\t: x" + String(ScreenMultiplier);

		msg += "\nWebGL Enable Alpha\t\t\t\t\t: " + engine.device.argv("WebGL_Alpha", "true");
		msg += "\nWebGL Enable Antialias\t\t\t\t: " + engine.device.argv("WebGL_Antialias", "true");
		msg += "\nWebGL Enable Depth\t\t\t\t\t: " + engine.device.argv("WebGL_Depth", "true");
		msg += "\nWebGL Enable Stencil\t\t\t\t: " + engine.device.argv("WebGL_Stencil", "false");
		msg += "\nWebGL Premultiplied Alpha\t\t\t: " + engine.device.argv("WebGL_PremultipliedAlpha", "false");
		msg += "\nWebGL Preserve Drawing Buffer\t\t: " + engine.device.argv("WebGL_PreserveDrawingBuffer", "false");
		msg += "\nWebGL Fail on Performance Caveat\t: " + engine.device.argv("WebGL_FailIfMajorPerformanceCaveat", "false");

		msg += "\nEnable Rendering Optimizations\t\t: " + (engine.__ENABLE_RENDERING_OPTIMIZATIONS?"true":"false");
		msg += "\nUse Rendering Frame Buffer\t\t\t: " + (engine.__ENABLE_RENDERING_ON_FRAME_BUFFER?"true":"false");
		msg += "\nUse Physical Frame Buffer\t\t\t: " + (engine.__ENABLE_PHYSICAL_FRAME_BUFFER?"true":"false");

		msg += "\nMax Image Multiplier\t\t\t\t: " + String(engine.__MAX_IMAGE_MULTIPLIER);
		msg += "\nMax Mobile Image Multiplier\t\t\t: " + String(engine.__MAX_MOBILE_IMAGE_MULTIPLIER);
		msg += "\nFrame Buffer Max Multiplier\t\t\t: " + String(engine.__FRAME_BUFFER_TEXTURE_MAX_MULTIPLIER);

		msg += "\n";

		trace(msg);
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////
	public function argv(Key:String, optional Default:String):String
	{
		var qs:String = window.location.search.substr(1);
		var v:Array<String> = qs.split("&");
		var p:Array<String> = null;
		var result:String = Default;
		for(var i:Integer=v.size()-1; i>=0; i--)
		{
			p = v[i].split("=");
			if(p[0].toLowerCase() == Key.toLowerCase())
			{
				result = p[1];
				delete p;
				break;
			}
			delete p;
		}
		delete v;
		return result;
	}


	// ==================================================================================================================================
	//	    ____            _              ____      ____
	//	   / __ \___ _   __(_)_______     /  _/___  / __/___
	//	  / / / / _ \ | / / / ___/ _ \    / // __ \/ /_/ __ \
	//	 / /_/ /  __/ |/ / / /__/  __/  _/ // / / / __/ /_/ /
	//	/_____/\___/|___/_/\___/\___/  /___/_/ /_/_/  \____/
	//
	// ==================================================================================================================================

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property LogicalPixelsWidth
	{
		function get():Integer { return Math.floor(window.innerWidth); }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property LogicalPixelsHeight
	{
		function get():Integer { return Math.floor(window.innerHeight); }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property PhysicalPixelsWidth
	{
		function get():Integer { return Math.floor(window.innerWidth*pixelRatio); }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property PhysicalPixelsHeight
	{
		function get():Integer { return Math.floor(window.innerHeight*pixelRatio); }
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property ScreenFit
	{
		function get():COCO_SCREEN_FIT_ENUM
		{
			var w:Float = LogicalPixelsWidth;
			var h:Float = LogicalPixelsHeight;

		    if(w / h == __BASE_WIDTH / __BASE_HEIGHT)
		        return COCO_SCREEN_FIT_BOTH;
		    else if(w / 1620.0 > h / 1024.0)
		        return COCO_SCREEN_FIT_HEIGHT;

		    return COCO_SCREEN_FIT_WIDTH;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property ScreenMultiplier
	{
		function get():Float
		{
			if(isMobileHTML5Browser)
				return pixelRatio;

		    switch(ScreenFit)
		    {
		    case COCO_SCREEN_FIT_WIDTH:     return Float(PhysicalPixelsWidth) / Float(__BASE_WIDTH);
		    case COCO_SCREEN_FIT_HEIGHT:    return Float(PhysicalPixelsHeight) / Float(__BASE_HEIGHT);
		    }

		    return Float(PhysicalPixelsWidth) / Float(__BASE_WIDTH);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property LogicalViewScale
	{
		function get():Float
		{
		    return Math.min(LogicalPixelsWidth / __BASE_WIDTH, LogicalPixelsHeight / __BASE_HEIGHT);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property PhysicalViewScale
	{
		function get():Float
		{
		    return Math.min(PhysicalPixelsWidth / __BASE_WIDTH, PhysicalPixelsHeight / __BASE_HEIGHT);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property screenOrientation
	{
		function get():COCO_SCREEN_ORIENTATION
		{
			if (isAndroid && !isMobileHTML5Browser)
			{
				switch (window.orientation)
				{
				case 0: 	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE;
				case 90:  	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT;
				case 180:  	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE;
				case -90:	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN;
				}
			}
			else if(isIOS)
			{
				switch (window.orientation)
				{
				case 90:  	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_COUNTER_CLOCKWISE;
				case 180:  	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT_UPSIDE_DOWN;
				case -90:	return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE;
				}

				// Hack for Chrome Device Simulator
				if(PhysicalPixelsWidth>PhysicalPixelsHeight)
				{
					return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE;
				}
				else
				{
					return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT;
				}
			}
			else
			{
				if(PhysicalPixelsWidth>PhysicalPixelsHeight)
				{
					return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_LANDSCAPE_CLOCKWISE;
				}
				else
				{
					return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT;
				}
			}

			return COCO_SCREEN_ORIENTATION.SCREEN_ORIENTATION_PORTRAIT;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property type
	{
		function get():COCO_DEVICE
		{
			     if(isIPad1)		return COCO_DEVICE.DEVICE_IPAD;
			else if(isIPad2)		return COCO_DEVICE.DEVICE_IPAD_2;
			else if(isIPad3)		return COCO_DEVICE.DEVICE_IPAD_3;
			else if(isIPhone3)		return COCO_DEVICE.DEVICE_IPHONE_3GS;
			else if(isIPhone4)		return COCO_DEVICE.DEVICE_IPHONE_4;
			else if(isIPhone5)		return COCO_DEVICE.DEVICE_IPHONE_5;
			else if(isIPhone6)		return COCO_DEVICE.DEVICE_IPHONE_6;
			else if(isIPhone6Plus)	return COCO_DEVICE.DEVICE_IPHONE_6_PLUS;

			else
			{
					 if(pixelRatio==0.75)	return COCO_DEVICE.DEVICE_GENERIC_LDPI;
				else if(pixelRatio==1.25)	return COCO_DEVICE.DEVICE_GENERIC_TVDPI;
				else if(pixelRatio==1.50)	return COCO_DEVICE.DEVICE_GENERIC_HDPI;
				else if(pixelRatio==2.00)	return COCO_DEVICE.DEVICE_GENERIC_XHDPI;
				else if(pixelRatio==3.00)	return COCO_DEVICE.DEVICE_GENERIC_XXHDPI;
			}

			return COCO_DEVICE.DEVICE_GENERIC_MDPI;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property DeviceClass
	{
		function get():String
		{
			var out:Array<String> = new Array<String>;

			if(this.isAndroid) 					out.push("ANDROID");
			if(this.isIOS) 						out.push("IOS");
			if(this.isDesktop)					out.push("DESKTOP");
			if(this.isChrome)					out.push("BROWSER_CHROME");
			if(this.isDesktopSafari)			out.push("BROWSER_SAFARI");
			if(this.isFirefox)					out.push("BROWSER_FIREFOX");

			var deviceClass:String = out.join(";");
			delete out;
			return deviceClass;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property DeviceModel
	{
		function get():String
		{
			switch(this.type)
			{

			// Android or Generic Device
			case DEVICE_GENERIC_MDPI			: return "DEVICE_GENERIC_MDPI";
			case DEVICE_GENERIC_HDPI            : return "DEVICE_GENERIC_HDPI";
			case DEVICE_GENERIC_XHDPI           : return "DEVICE_GENERIC_XHDPI";
			case DEVICE_GENERIC_XXHDPI          : return "DEVICE_GENERIC_XXHDPI";
			case DEVICE_GENERIC_TVDPI		    : return "DEVICE_GENERIC_TVDPI";
			case DEVICE_GENERIC_LDPI		    : return "DEVICE_GENERIC_LDPI";

			// iPhone Devices
			case DEVICE_IPHONE_3GS			    : return "DEVICE_IPHONE_3GS";
			case DEVICE_IPHONE_4                : return "DEVICE_IPHONE_4";
			case DEVICE_IPHONE_4S               : return "DEVICE_IPHONE_4S";
			case DEVICE_IPHONE_5                : return "DEVICE_IPHONE_5";
			case DEVICE_IPHONE_5S               : return "DEVICE_IPHONE_5S";
			case DEVICE_IPHONE_5C               : return "DEVICE_IPHONE_5C";
			case DEVICE_IPHONE_6                : return "DEVICE_IPHONE_6";
			case DEVICE_IPHONE_6_PLUS           : return "DEVICE_IPHONE_6_PLUS";

			// iPad Devices
			case DEVICE_IPAD                    : return "DEVICE_IPAD";
			case DEVICE_IPAD_2                  : return "DEVICE_IPAD_2";
			case DEVICE_IPAD_3                  : return "DEVICE_IPAD_3";
			case DEVICE_IPAD_MINI               : return "DEVICE_IPAD_MINI";
			case DEVICE_IPAD_AIR                : return "DEVICE_IPAD_AIR";
			case DEVICE_IPAD_MINI_RETINA        : return "DEVICE_IPAD_MINI_RETINA";
			}

			return "UNKNOWN";
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property DeviceMobileBrowserName
	{
		function get():String
		{
			if(this.isChrome)					return "BROWSER_CHROME";
			else if(this.isDesktopSafari)		return "BROWSER_SAFARI";
			else if(this.isFirefox)				return "BROWSER_FIREFOX";
			return "BROWSER_UNKNOWN";

		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property dpi
	{
		function get():COCO_DEVICE
		{
				 if(pixelRatio==0.75)	return COCO_DEVICE.DEVICE_GENERIC_LDPI;
			else if(pixelRatio==1.25)	return COCO_DEVICE.DEVICE_GENERIC_TVDPI;
			else if(pixelRatio==1.50)	return COCO_DEVICE.DEVICE_GENERIC_HDPI;
			else if(pixelRatio==2.00)	return COCO_DEVICE.DEVICE_GENERIC_XHDPI;
			else if(pixelRatio==3.00)	return COCO_DEVICE.DEVICE_GENERIC_XXHDPI;

			return COCO_DEVICE.DEVICE_GENERIC_MDPI;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property iOSVersion
	{
		function get():String
		{
			return "";//isIPhone ? navigator.userAgent.match(/iPhone OS (\d+)/)[1] : 0;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property AndroidSDKVersion
	{
		function get():String
		{
			return "";//isAndroid ? navigator.userAgent.match(/Android (\d+\.\d+\.\d+)/)[1] : 0;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public property DeviceSDKVersion
	{
		function get():String
		{
			return "Device SDK " + iOSVersion + AndroidSDKVersion;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function fixKeyboardEvent(e:HTMLEvent)
	{
		e.special = DEVICE_KEY_NONE;

		// Chrome, Firefox
		if(e.key=="ArrowUp"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_UP;
		if(e.key=="ArrowDown"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_DOWN;
		if(e.key=="ArrowLeft"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_LEFT;
		if(e.key=="ArrowRight"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_RIGHT;
		if(e.key=="Insert"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_INSERT;
		if(e.key=="Delete"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_DELETE;
		if(e.key=="Home"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_HOME;
		if(e.key=="End"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_END;
		if(e.key=="PageUp"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_PAGE_UP;
		if(e.key=="PageDown"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_PAGE_DOWN;
		if(e.key=="NumLock"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_NUM_LOCK;
		if(e.key=="Backspace"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_BACKSPACE;
		if(e.key=="Enter"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_ENTER;
		if(e.key=="Shift"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_SHIFT;
		if(e.key=="Control"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_CTRL;
		if(e.key=="Alt"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_ALT;
		if(e.key=="CapsLock"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_CAPS_LOCK;
		if(e.key=="Tab"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_TAB;
		if(e.key=="F1"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F1;
		if(e.key=="F2"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F2;
		if(e.key=="F3"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F3;
		if(e.key=="F4"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F4;
		if(e.key=="F5"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F5;
		if(e.key=="F6"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F6;
		if(e.key=="F7"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F7;
		if(e.key=="F8"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F8;
		if(e.key=="F9"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F9;
		if(e.key=="F10"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F10;
		if(e.key=="F11"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F11;
		if(e.key=="F12"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_F12;
		if(e.key=="Pause"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_BREAK;
		if(e.key=="Escape"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_ESCAPE;
		if(e.key=="Space"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_SPACE;
		if(e.key==" "				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_SPACE;

		// Internet Explorer
		if(e.key=="Up"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_UP;
		if(e.key=="Down"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_DOWN;
		if(e.key=="Left"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_LEFT;
		if(e.key=="Right"			) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_RIGHT;
		if(e.key=="Del"				) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_DELETE;
		if(e.key=="Spacebar"		) e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_SPACE;

		e.character = e.special==DEVICE_KEY_NONE ? e.key : "";

		if(e.key=="Decimal")
		{
			var locale:String = ISO_LOCALE;
			var decimal:String = EXPLICIT_DECIMAL_CHAR;
			e.special = DEVICE_KEYS_ENUM.DEVICE_KEY_DECIMAL;
			__javascript
			{
				if(decimal)
					e.character = decimal;
				else if(locale)
					e.character = (new Number(3.14)).toLocaleString(locale, { style: 'decimal' }).substr(1,1);
				else
					e.character = (new Number(3.14)).toLocaleString({ style: 'decimal' }).substr(1,1);
			}
			__end
		}

		if(e.special == DEVICE_KEYS_ENUM.DEVICE_KEY_BACKSPACE)
		{
			e.preventDefault();
		}
	}

}


/*

JSFiddle to debug keyboard events

//////////////////////////////////////////////////////////////////////////////////////////////////////////

window.addEventListener("keydown", __translateDeviceMessage);
window.addEventListener("keyup", __translateDeviceMessage);
window.addEventListener("keypress", __translateDeviceMessage);

var s = "";
function __translateDeviceMessage(e)
{
	for(var i in e)
  	{
    	if(/isTrusted|DOM_|location|MOUSE|PHASE|SELECT|CHANGE|detail|NONE|AT_|CLICK|KEY\w+|DRAGDROP|FOCUS|BLUR|bubbles|cancel|default|time|Phase|returnVlaue|composed|SCROLL|MASK|range|layer|page|isComposing/.test(i)) continue;

        if(typeof e[i] === 'function') continue;
        if(typeof e[i] === 'object') continue;
        s += i + ": " + e[i] + "\n";
	}
    s += "\n";
    document.body.innerText = s;
    if(e.type=="keyup") s = "";
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////

window.addEventListener("keydown", __translateDeviceMessage);
var s = "";
function __translateDeviceMessage(e)
{
    e.preventDefault();
    s += 'if(e.key=="' + e.key + '") return DEVICE_KEYS_ENUM.DEVICE_KEY_;\n';
    document.body.innerText = s;
}

*/


