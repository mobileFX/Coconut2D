/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_web;

// ==================================================================================================================================
//	   ______                 ______                 __  _____
//	  / ____/___  _________  / ____/   _____  ____  / /_/ ___/____  __  _______________
//	 / /   / __ \/ ___/ __ \/ __/ | | / / _ \/ __ \/ __/\__ \/ __ \/ / / / ___/ ___/ _ \
//	/ /___/ /_/ / /__/ /_/ / /___ | |/ /  __/ / / / /_ ___/ / /_/ / /_/ / /  / /__/  __/
//	\____/\____/\___/\____/_____/ |___/\___/_/ /_/\__//____/\____/\__,_/_/   \___/\___/
//
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
class CocoEventSource
{
	protected var __eventListeners:Array<CocoEventConnectionPoint>;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__eventListeners = new Array<CocoEventConnectionPoint>;
	}

	public function Destructor()
	{
		delete __eventListeners;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addEventListener(Event:CocoEvent, Callback:Function, optional Listener:IEventListener)
	{
		// If we din't have the "__THIS__" implementation in our inheritance mechanism,
		// the following code would never work. It would store the CocoEventSource
		// instance of the prototype instead of the top-level instance.
		var item:CocoEventConnectionPoint = new CocoEventConnectionPoint(this, Event, Listener, Callback);
		__eventListeners.push(item);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeEventListener(Event:CocoEvent, Callback:Function, optional Listener:IEventListener) :Boolean
	{
		var i:Integer;
		var c:CocoEventConnectionPoint;

		for(i=__eventListeners.size()-1;i>=0;i--)
		{
			//FIX: if(__eventListeners[i].Event.is(Event) && __eventListeners[i].Listener.__THIS__==Listener.__THIS__ && __eventListeners[i].Callback==Callback)

			c = __eventListeners[i];

			if(c.Event.is(Event) && c.Listener==Listener && c.Callback==Callback)
			{
				__eventListeners.splice(i, 1);
				return true;
			}
		}
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispatchEvent(Event:CocoEvent, ...)
	{
		if(Event.stopPropagation) return;

		var L:Integer = __eventListeners.size();
		if(L==0) return;

		var i:Integer;
		var event_arguments:Array<Object> = new Array<Object>;
		event_arguments.push(this);
		event_arguments.push(Event);
		for(i=1;i<arguments.size();i++)
			event_arguments.push(arguments[i]);

		for(i=L-1;i>=0;i--)
		{
			var cp:CocoEventConnectionPoint = __eventListeners[i];

			if(cp.Event.is(Event))
			{
				var cancel:Boolean = cp.Callback.apply(cp.Listener, event_arguments);
				if(cancel)
				{
					Event.cancelBubble();
				}
				if(Event.stopPropagation)
				{
					return;
				}
			}
		}
		delete event_arguments;
	}
}

