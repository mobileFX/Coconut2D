/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______                 ___             ___       ____        ________
//	  / ____/___  _________  /   | __  ______/ (_)___  / __ )__  __/ __/ __/__  _____
//	 / /   / __ \/ ___/ __ \/ /| |/ / / / __  / / __ \/ __  / / / / /_/ /_/ _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / ___ / /_/ / /_/ / / /_/ / /_/ / /_/ / __/ __/  __/ /
//	\____/\____/\___/\____/_/  |_\__,_/\__,_/_/\____/_____/\__,_/_/ /_/  \___/_/
//
// ==================================================================================================================================

class CocoAudioBuffer
{
	public var id:String;
	public var src:String;

	public var legacy_buffer:Audio;
	public var web_audio_buffer:AudioBuffer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(id:String, url:String)
	{
		this.id = id;
		this.src = url;

		var ctx:AudioContext = CocoAudioManager.getContext();

		if(ctx)
		{
			// Load the Audio File using WebAudio
		    var request:XMLHttpRequest = new XMLHttpRequest();
		    request.open('GET', url, true);
		    request.responseType = 'arraybuffer';
		    request.onload = function()
		    {
				//web_audio_buffer = ctx.createBuffer(request.response, false);

		        ctx.decodeAudioData(request.response,

		        	function onSuccess(buffer:AudioBuffer)
			        {
			        	web_audio_buffer = buffer;
			        	delete request;
			        },

			        function onError()
			        {
						trace("ERROR: Failed to load audio " + src);
						delete request;
			        }
		        );

		        //delete request;

		    };
		    request.send();
		}
		else
		{
			// Load the Audio File using legacy Audio
			legacy_buffer = new Audio;

			// Load the sound as if it would start playing immediately.
			// We need to make sure the sound will download.

			legacy_buffer.id			= id;
			legacy_buffer.preload		= "auto";
			legacy_buffer.autoplay		= true;
			legacy_buffer.loop			= true;
			legacy_buffer.volume		= 0.001;
			legacy_buffer.muted			= false;
			legacy_buffer.src			= url;

			// Wait for the legacy audio to load and then add it to the DOM.
			// With that, Firefox 3.6, Firefox 4, Opera 11, Chrome 11 and IE9,
			// all load the sound file just once and cloneNode will allow us
			// to re-use the audio file.

			legacy_buffer.oncanplaythrough = function()
			{
				// Sound is loaded (at least partially)
				if(CocoAudioManager.__legacy_ready(legacy_buffer))
				{
					trace("Buffered Audio: " + legacy_buffer.src);

					// Won't be needing that any more
					legacy_buffer.oncanplaythrough = null;

					// Add the audio to DOM
					window.document.body.appendChild(legacy_buffer);

					// Pause it (it will continue to download)
					legacy_buffer.pause();

					legacy_buffer.autoplay			= false;
					legacy_buffer.loop				= false;
					legacy_buffer.volume			= 0.0;
					legacy_buffer.muted				= false;
					legacy_buffer.currentTime		= 0.0;
				}
			};

			legacy_buffer.load();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		// Remove legacy audio from DOM
		if(legacy_buffer)
			document.body.removeChild(legacy_buffer);

		delete legacy_buffer;
		delete web_audio_buffer;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function loaded():Boolean
	{
		if(web_audio_buffer)
			return true;

		if(legacy_buffer && CocoAudioManager.__legacy_ready(legacy_buffer))
			return true;

		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property duration
	{
		function get():Time
		{
			if(loaded())
			{
				if(web_audio_buffer)
					return web_audio_buffer.duration;

				if(legacy_buffer)
					return legacy_buffer.duration;
			}
			return 0.0;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property numberOfChannels
	{
		function get():Integer
		{
			if(loaded())
			{
				if(web_audio_buffer)
					return web_audio_buffer.numberOfChannels;
			}
			return -1;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property samples
	{
		function get():Integer
		{
			if(loaded())
			{
				if(web_audio_buffer)
					return web_audio_buffer.length;
			}
			return -1;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public property sampleRate
	{
		function get():Float
		{
			if(loaded())
			{
				if(web_audio_buffer)
					return web_audio_buffer.sampleRate;
			}
			return -1;
		}
	}
}
