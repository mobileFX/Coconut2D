/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______                 __ __           ______
//	  / ____/___  _________  / //_/__  __  __/ ____/________ _____ ___  ___
//	 / /   / __ \/ ___/ __ \/ ,< / _ \/ / / / /_  / ___/ __ `/ __ `__ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / /| /  __/ /_/ / __/ / /  / /_/ / / / / / /  __/
//	\____/\____/\___/\____/_/ |_\___/\__, /_/   /_/   \__,_/_/ /_/ /_/\___/
//	                                /____/
// ==================================================================================================================================

struct CocoKeyFrame
{
	frameIndex:Integer;
	__frameIndex:Float;
	frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM;
	handleEvents:Boolean;
	visible:Boolean;
	alpha:Float;
	shader:CocoShader;
	uniforms:Float32Array; // stride = 4 floats
	x:Float;
	y:Float;
	pivotX:Float;
	pivotY:Float;
	scaleX:Float;
	scaleY:Float;
	rotation:Float;
	action:CocoAction;
	nextState:State;
	audio:CocoAudioSource;

	audioFadeMillis:Integer;
	audioFadeRamp:COCO_AUDIO_RAMP_ENUM;
	audioFadeValue:Float;

	flipH:Boolean;
	flipV:Boolean;
	spriteSequenceName:String;
	spriteSequenceFPS:Float;
	spriteSequencePlayWhenPaused:Boolean;
	spriteSequenceFrameIndex:Integer;
	__isCloned:Boolean;
	__Preserve:Boolean;
	__isExact:Boolean;
	__time:Time;
}

// ==================================================================================================================================
//	   ______               _______                __          __         __
//	  / ____/___  _________/_  __(_)___ ___  ___  / /   ____ _/ /_  ___  / /
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ /   / __ `/ __ \/ _ \/ /
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ /___/ /_/ / /_/ /  __/ /
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_____/\__,_/_.___/\___/_/
//
// ==================================================================================================================================

class CocoTimeLabel
{
	public var frameIndex:Integer;
	public var name:String;

	public function Constructor(FrameIndex:Integer, LabelName:String)
	{
		frameIndex = FrameIndex;
		name = LabelName;
	}
	public function Destructor()
	{
	}
}

// ==================================================================================================================================
//	   ______               _______                ___
//	  / ____/___  _________/_  __(_)___ ___  ___  / (_)___  ___
//	 / /   / __ \/ ___/ __ \/ / / / __ `__ \/ _ \/ / / __ \/ _ \
//	/ /___/ /_/ / /__/ /_/ / / / / / / / / /  __/ / / / / /  __/
//	\____/\____/\___/\____/_/ /_/_/ /_/ /_/\___/_/_/_/ /_/\___/
//
// ==================================================================================================================================

class CocoTimeline
{
	public var __invalidated:Boolean;
	public var __labels:Array<CocoTimeLabel>;
	public var __keyFrames:Array<CocoKeyFrame>;
	public var __singleFrameDurationTime:Time;
	public var __durationInTime:Time;
	public var __durationInFrames:Integer;
	public var __paused:Boolean;
	public var __pausedFromGoto:Boolean;
	public var __fps:Float;
	public var __currentFrameIndex:Integer;
	public var __firstKeyFrameIndex:Integer;
	public var __lastKeyFrameIndex:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function NewKeyFrame():CocoKeyFrame
	{
		var kf:CocoKeyFrame = new CocoKeyFrame();
		CocoTimeline.ResetKeyFrame(kf);
		return kf;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function ResetKeyFrame(kf:CocoKeyFrame)
	{
		if(kf.__isCloned && !kf.__isExact)
			delete kf.uniforms;

		kf.frameIndex						= -1;
		kf.__frameIndex						= -1;
		kf.frameInterpolation				= COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN;
		kf.handleEvents						= false;
		kf.visible							= true;
		kf.alpha							= 1;
		kf.x								= 0;
		kf.y								= 0;
		kf.pivotX							= 0;
		kf.pivotY							= 0;
		kf.scaleX							= 1;
		kf.scaleY							= 1;
		kf.rotation							= 0;
		kf.action							= null;
		kf.nextState						= null;
		kf.audio							= null;
		kf.audioFadeMillis					= 0;
		kf.audioFadeRamp					= COCO_AUDIO_RAMP_ENUM.FADE_LINEAR;
		kf.audioFadeValue					= 1.0;
		kf.flipH							= false;
		kf.flipV							= false;
		kf.spriteSequenceName				= "";
		kf.spriteSequenceFPS				= 0;
		kf.spriteSequencePlayWhenPaused		= false;
		kf.__isCloned						= false;
		kf.__Preserve						= false;
		kf.__isExact						= false;
		kf.__time							= 0;
		kf.spriteSequenceFrameIndex			= 0;
		kf.shader							= null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function CloneKeyFrame(src:CocoKeyFrame, dst:CocoKeyFrame, exact:Boolean)
	{
		dst.frameIndex						= src.frameIndex;
		dst.__frameIndex					= src.__frameIndex;
		dst.frameInterpolation				= src.frameInterpolation;
		dst.handleEvents					= src.handleEvents;
		dst.visible							= src.visible;
		dst.alpha							= src.alpha;
		dst.shader							= src.shader;
		dst.uniforms						= !exact && src.uniforms ? new Float32Array(src.uniforms) : src.uniforms;
		dst.x								= src.x;
		dst.y								= src.y;
		dst.pivotX							= src.pivotX;
		dst.pivotY							= src.pivotY;
		dst.scaleX							= src.scaleX;
		dst.scaleY							= src.scaleY;
		dst.rotation						= src.rotation;
		dst.action							= src.action;
		dst.nextState						= src.nextState;
		dst.audio							= src.audio;
		dst.audioFadeMillis					= src.audioFadeMillis;
		dst.audioFadeRamp					= src.audioFadeRamp;
		dst.audioFadeValue					= src.audioFadeValue;
		dst.flipH							= src.flipH;
		dst.flipV							= src.flipV;
		dst.spriteSequenceName				= src.spriteSequenceName;
		dst.spriteSequenceFPS				= src.spriteSequenceFPS;
		dst.spriteSequencePlayWhenPaused	= src.spriteSequencePlayWhenPaused;
		dst.__isCloned						= src.__isCloned;
		dst.__Preserve						= src.__Preserve;
		dst.__isExact						= src.__isExact;
		dst.__time							= src.__time;
		dst.spriteSequenceFrameIndex		= src.spriteSequenceFrameIndex;

		/*
		if(!exact && src.uniforms)
		{
			dst.uniforms = new Float32Array(src.uniforms.length);
			for(var i:Integer = src.uniforms.length-1; i>=0; i--)
				dst.uniforms[i] = src.uniforms[i];
		}
		*/

		if(!exact)
		{
			dst.action		= null;
			dst.nextState	= null;
			dst.audio		= null;
		}

		dst.__isExact = exact;
		dst.__isCloned = true;
		dst.__time = engine.__clock;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		__firstKeyFrameIndex 		= 0;
		__lastKeyFrameIndex			= 0;
		__labels					= new Array<CocoTimeLabel>;
		__keyFrames					= new Array<CocoKeyFrame>;
		__singleFrameDurationTime	= 0.0;
		__durationInTime			= 0.0;
		__durationInFrames			= 0;
		__paused					= false;
		__pausedFromGoto			= false;
		__fps						= 30;
		__currentFrameIndex			= -1;
		__invalidated				= true;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete[] __labels;
		delete[] __keyFrames;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(scene:CocoScene, clip:CocoClip)
	{
		__fps = scene.__fps;
		normalizetimeline();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function clear()
	{
		reset();
		delete[] __labels;
		delete[] __keyFrames;
		__labels = new Array<CocoTimeLabel>;
		__keyFrames = new Array<CocoKeyFrame>;
		normalizetimeline();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function reset()
	{
		__paused = false;
		__currentFrameIndex = -1;
		var kf:CocoKeyFrame;
		for (var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			kf = __keyFrames[i];
			if(kf.audio)
				kf.audio.reset();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addLabel(Label:CocoTimeLabel) :CocoTimeLabel
	{
		if (Label) __labels.push(Label);
		return Label;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addLabelEx(FrameIndex:Integer, LabelName:String) :CocoTimeLabel
	{
		var Label:CocoTimeLabel = new CocoTimeLabel(FrameIndex, LabelName);
		return addLabel(Label);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findLabelByName(LabelName:String) :CocoTimeLabel
	{
		var label:CocoTimeLabel;
		for(var i:Integer = __labels.size() - 1; i >= 0; i--)
		{
			label = __labels[i];
			if(label.name == LabelName)
				return label;
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function keyFrame(frameIndex:Integer) :CocoKeyFrame
	{
		__invalidated = true;

		var kf:CocoKeyFrame;
		for(var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			kf = __keyFrames[i];
			if(kf.frameIndex == frameIndex)
			{
				return kf;
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function firstKeyFrame() :CocoKeyFrame
	{
		__invalidated = true;
		return __keyFrames[0];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function lastKeyFrame() :CocoKeyFrame
	{
		__invalidated = true;
		return __keyFrames[__keyFrames.size() - 1];
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrame(KeyFrame:CocoKeyFrame) :CocoKeyFrame
	{
		if(!KeyFrame) return null;
		__invalidated = true;
		KeyFrame.frameIndex = Math.floor(KeyFrame.frameIndex);
		__keyFrames.push(KeyFrame);
		normalizetimeline();
		return KeyFrame;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addKeyFrameEx(nextState:State,
								  actionCallback:CocoAction,
								  frameIndex:Integer,
								  frameInterpolation:COCO_KEYFRAME_INTERPOLATION_ENUM,
								  handleEvents:Boolean,
								  visible:Boolean,
								  alpha:Float,
								  x:Float,
								  y:Float,
								  scaleX:Float,
								  scaleY:Float,
								  rotation:Float,
								  pivotX:Float,
								  pivotY:Float,
								  flipH:Boolean,
								  flipV:Boolean,
								  spriteSequenceName:String,
								  spriteSequenceFPS:Float,
								  spriteSequencePlayWhenPaused:Boolean,
								  shader:CocoShader,
								  uniforms:Float32Array,
								  audio:CocoAudioSource,
								  audioFadeMillis:Integer,
								  audioFadeRamp:COCO_AUDIO_RAMP_ENUM,
								  audioFadeValue:Float
								  ) :CocoKeyFrame
	{
	    var KeyFrame:CocoKeyFrame = new CocoKeyFrame();

		KeyFrame.nextState							= nextState;
		KeyFrame.action								= actionCallback;
		KeyFrame.frameIndex							= frameIndex;
		KeyFrame.frameInterpolation					= frameInterpolation;
		KeyFrame.handleEvents						= handleEvents;
		KeyFrame.visible							= visible;
		KeyFrame.alpha								= alpha;
		KeyFrame.x									= x;
		KeyFrame.y									= y;
		KeyFrame.scaleX								= scaleX;
		KeyFrame.scaleY								= scaleY;
		KeyFrame.rotation							= rotation;
		KeyFrame.pivotX								= pivotX;
		KeyFrame.pivotY								= pivotY;
		KeyFrame.flipH								= flipH;
		KeyFrame.flipV								= flipV;
		KeyFrame.spriteSequenceName					= spriteSequenceName;
		KeyFrame.spriteSequenceFPS					= spriteSequenceFPS;
		KeyFrame.spriteSequencePlayWhenPaused		= spriteSequencePlayWhenPaused;
		KeyFrame.spriteSequenceFrameIndex			= 0;
		KeyFrame.shader								= shader;
		KeyFrame.uniforms							= uniforms;
		KeyFrame.audio								= audio;
		KeyFrame.audioFadeMillis					= audioFadeMillis;
		KeyFrame.audioFadeRamp						= audioFadeRamp;
	  	KeyFrame.audioFadeValue						= audioFadeValue;

	    return addKeyFrame(KeyFrame);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function normalizetimeline()
	{
		__invalidated = true;
		__durationInFrames = 0;
		__durationInTime = 0;
		__singleFrameDurationTime = 0;
		if (__keyFrames.size() > 0)
		{
			__durationInFrames = __keyFrames[__keyFrames.size() - 1].frameIndex + 1;
			__singleFrameDurationTime = 1000.0 / __fps;
			__durationInTime = __durationInFrames * __singleFrameDurationTime;
			__firstKeyFrameIndex = firstKeyFrame().frameIndex;
			__lastKeyFrameIndex = lastKeyFrame().frameIndex;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function translateTo(x:Float , y:Float)
	{
		__invalidated = true;

		if(!__keyFrames.size())
		{
			addKeyFrame(CocoTimeline.NewKeyFrame());
		}

		var kf:CocoKeyFrame;
		for (var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			kf = __keyFrames[i];
			kf.x = x;
			kf.y = y;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function translateBy(dx:Float , dy:Float)
	{
		__invalidated = true;

		var kf:CocoKeyFrame;
		for (var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			kf = __keyFrames[i];
			kf.x += dx;
			kf.y += dy;
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameBeforeframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame
	{
		var KeyFrame:CocoKeyFrame;
		for (var i:Integer = __keyFrames.size() - 1; i >= 0; i--)
		{
			if (i != excludeListIndex)
			{
				KeyFrame = __keyFrames[i];
				if (inclusive)
				{
					if (KeyFrame.frameIndex <= frameIndex)
					return KeyFrame;
				}
				else
				{
					if (KeyFrame.frameIndex < frameIndex)
					return KeyFrame;
				}
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function findKeyFrameAfterframeIndex(frameIndex:Float, inclusive:Boolean, excludeListIndex:Float) :CocoKeyFrame
	{
		var KeyFrame:CocoKeyFrame;
		var L:Integer = __keyFrames.size();
		for(var i:Integer = 0; i < L; i++)
		{
			if (i != excludeListIndex)
			{
				KeyFrame = __keyFrames[i];
				if (inclusive)
				{
					if (KeyFrame.frameIndex >= frameIndex)
					return KeyFrame;
				}
				else
				{
					if (KeyFrame.frameIndex > frameIndex)
					return KeyFrame;
				}
			}
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function interpolate(frameIndex:Float, KF:CocoKeyFrame)
	{
	    var F1:CocoKeyFrame = null;
	    var F2:CocoKeyFrame = null;
	    var s:Float = 1.0;
	    if(frameIndex<=0) frameIndex = 0;
	    var iFrameIndex:Integer = Math.floor(frameIndex);

	    __invalidated = false;

	    CocoTimeline.ResetKeyFrame(KF);

	    // Timeline is empty?
	    if(__keyFrames.size()==0)
	    {
	        KF.frameIndex = iFrameIndex;
	        KF.visible = false;
	        return;
	    }

	    // Seek previous KeyFrame
    	F1 = findKeyFrameBeforeframeIndex(frameIndex, true, -1);

	    if(!F1)
	    {
	        // No previous KeyFrame
	        KF.frameIndex = iFrameIndex;
	        KF.__frameIndex = frameIndex;
	        KF.visible = false;
	        return;
	    }
	    else
	    {
	    	// 07 June 2016: bug fix
	    	//var exact:Boolean = !__paused && ((__currentFrameIndex == -1) || (__currentFrameIndex != F1.frameIndex));

	    	var exact:Boolean = !__paused && F1.frameIndex==iFrameIndex;
	    	__currentFrameIndex = F1.frameIndex;

	    	if(F1.frameIndex==iFrameIndex)
	    	{
	    		CocoTimeline.CloneKeyFrame(F1, KF, exact);
	    		KF.__frameIndex = frameIndex;
	    		return;
	    	}

	    	__currentFrameIndex = iFrameIndex;

	        switch(F1.frameInterpolation)
	        {
	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_ECHO:

	            CocoTimeline.CloneKeyFrame(F1, KF, exact);
	            KF.frameIndex = iFrameIndex;
	            KF.__frameIndex = frameIndex;
	            return;

	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_NONE:

	            CocoTimeline.CloneKeyFrame(F1, KF, exact);
	            KF.frameIndex = iFrameIndex;
	            KF.__frameIndex = frameIndex;
	            KF.visible = false;
	            return;

	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_MOTION_TWEEN:

	            // We need the next KeyFrame now
	            F2 = findKeyFrameAfterframeIndex(frameIndex, (frameIndex>iFrameIndex), -1);

	            if(!F2)
	            {
	                // Fallback to echo
	                CocoTimeline.CloneKeyFrame(F1, KF, exact);
	                KF.frameIndex = iFrameIndex;
	                KF.__frameIndex = frameIndex;
	                return;
	            }
	            else
	            {
	                // Interpolate between frames
	                CocoTimeline.CloneKeyFrame(F1, KF, exact);
	                KF.frameIndex = iFrameIndex;
	                KF.__frameIndex = frameIndex;
	                s = (frameIndex - F1.frameIndex) / (F2.frameIndex - F1.frameIndex);
	                interpolate(KF, F1, F2, s);
	                return;
	            }

	        case COCO_KEYFRAME_INTERPOLATION_ENUM.KEYFRAME_INTERPOLATION_PHYSICS:
	        	break;
	        }
	    }

	    delete KF;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function interpolate(F:CocoKeyFrame, F1:CocoKeyFrame, F2:CocoKeyFrame, s:Float)
	{
	    F.x = F1.x + s * (F2.x - F1.x);
	    F.y = F1.y + s * (F2.y - F1.y);
	    F.scaleX = F1.scaleX + s * (F2.scaleX - F1.scaleX);
	    F.scaleY = F1.scaleY + s * (F2.scaleY - F1.scaleY);
	    F.rotation = F1.rotation + s * (F2.rotation - F1.rotation);
	    F.pivotX = F1.pivotX + s * (F2.pivotX - F1.pivotX);
	    F.pivotY = F1.pivotY + s * (F2.pivotY - F1.pivotY);

	    F.alpha = F1.alpha + s * (F2.alpha - F1.alpha);

		if(F.shader)
			F.shader.interpolate(F, F1, F2, s);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function combine(F1:CocoKeyFrame, F2:CocoKeyFrame)
	{
		if(!F2) return;

		F1.alpha   = F1.alpha * F2.alpha;
		F1.visible = F1.visible && F2.visible;
		F1.flipH   = (F1.flipH && !F2.flipH) || (!F1.flipH && F2.flipH);
		F1.flipV   = (F1.flipV && !F2.flipV) || (!F1.flipV && F2.flipV);

		if(!F1.shader)
			F1.shader = F2.shader;

		if(F1.shader)
			F1.shader.combine(F1, F2);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function debug(head:Integer, max_frames:Integer, current:Boolean) : String
	{
		var s:String;
		var t:Integer = 0;
		var i:Integer = 0;
		var f:Integer = 0;
		var F:CocoKeyFrame;

		if(current)
		{
			for(i=0; i<=max_frames; i++)
			{
				s += head==i ? "^" : " ";
			}
			return s;
		}

		for(f=0; f<__keyFrames.size(); f++)
		{
			F = __keyFrames[f];

			for(i=t; i<F.frameIndex; i++)
				s += ".";

			switch(F.frameInterpolation)
			{
			case KEYFRAME_INTERPOLATION_NONE:
				s += "N";
				break;

			case KEYFRAME_INTERPOLATION_MOTION_TWEEN:
				s += "M";
				break;

			case KEYFRAME_INTERPOLATION_ECHO:
				s += "E";
				break;

			case KEYFRAME_INTERPOLATION_PHYSICS:
				s += "P";
				break;
			}

			t = F.frameIndex + 1;
		}
		for(i=t; i<=max_frames; i++)
		{
			s += ".";
		}
		return s;
	}
}
