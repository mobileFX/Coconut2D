/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____    ____                                        __
//	   / / / /_  __/  |/  / /   / __ \____  _______  ______ ___  ___  ____  / /_
//	  / /_/ / / / / /|_/ / /   / / / / __ \/ ___/ / / / __ `__ \/ _ \/ __ \/ __/
//	 / __  / / / / /  / / /___/ /_/ / /_/ / /__/ /_/ / / / / / /  __/ / / / /_
//	/_/ /_/ /_/ /_/  /_/_____/_____/\____/\___/\__,_/_/ /_/ /_/\___/_/ /_/\__/
//
// ==================================================================================================================================

#pragma export_native;

callback HTMLDocumentEvent(e:HTMLEvent);

class HTMLDocument
{
	public var body:HTMLElement;
	public var all:Array<HTMLElement>;
	public var visibilityState:String;
	public var cookie:String;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		visibilityState = "visible";
		body = new HTMLElement();
		body.document = this;
		all = new Array<HTMLElement>;
		all.push(body);
		cookie = "";
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete all;
		delete body;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __add(el:HTMLElement)
	{
		el.document = this;

		for(var i:Integer=0; i<all.size(); i++)
			if(all[i]==el)
				return;

		all.push(el);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __remove(el:HTMLElement)
	{
		el.document = null;
		el.parentNode = null;

		for(var i:Integer=0; i<all.size(); i++)
		{
			if(all[i]==el)
			{
				all.splice(i,1);
				return;
			}
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createElement(tagName:String) :HTMLElement
	{
		var el:HTMLElement = null;

		if(tagName=="div")
		{
			el = new HTMLDivElement();
		}
		else if(tagName=="a")
		{
			el = new  HTMLAnchorElement();
		}
		else if(tagName=="canvas")
		{
			el = new HTMLCanvasElement();
		}
		else if(tagName=="video")
		{
			el = new HTMLVideoElement();
		}
		else
		{
			el = new HTMLElement();
		}

		el.document = this;
		return el;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getElementById(id:String) : HTMLElement
	{
		var el:HTMLElement;
		for(var i:Integer=0; i<all.size(); i++)
		{
			el = all[i];
			if(el.id==id)
				return el;
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addEventListener(eventType:String, listener:HTMLDocumentEvent, optional missing useCapture:Boolean)
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeEventListener(eventType:String, listener:HTMLDocumentEvent, optional missing useCapture:Boolean)
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function querySelector(selector:String):HTMLElement
	{
		return null;
	}
}




