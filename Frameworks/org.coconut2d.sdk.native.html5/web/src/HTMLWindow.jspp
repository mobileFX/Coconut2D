/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____ _       ___           __
//	   / / / /_  __/  |/  / /| |     / (_)___  ____/ /___ _      __
//	  / /_/ / / / / /|_/ / / | | /| / / / __ \/ __  / __ \ | /| / /
//	 / __  / / / / /  / / /__| |/ |/ / / / / / /_/ / /_/ / |/ |/ /
//	/_/ /_/ /_/ /_/  /_/_____/__/|__/_/_/ /_/\__,_/\____/|__/|__/
//
// ==================================================================================================================================

// HTMLWindow is our "device wrapper" and in native ports such as iOS, Android, desktop
// and other pors, HTMLWindow exposes the device capabilities and receives the device
// events. Device Events are wrapped isnide an HTMLEvent object and passed to the game
// engine for further processing. In CocoEngine an HTMLEvent is processed and converted
// to a DEVICE_MESSAGE structure. Device messages stay available for 1 tick cycle before
// they are dismissed. During that tick cycle ITickable objects can retreive device
// messages directly from CocoEngine and handle them. Such handling can produce a CocoEvent
// which is the Coconut2D internal event mechanism.

callback HTMLWindowEvent(e:HTMLEvent);
callback HTMLWindowDispatchEvent(uid:Integer, eventType:String);


class HTMLWindow
{
	public var __uid:Integer;
	public var document:HTMLDocument;
	public var location:HTMLLocation;
	public var navigator:HTMLNavigator;
	public var screen:HTMLScreen;
	public var innerHeight:Integer;
	public var innerWidth:Integer;
	public var devicePixelRatio:Float;
	public var deviceZoom:Float;
	public var deviceRotation:Float;
	public var orientation:Integer;
	public var __elements:Array<Function>;
	public var e:HTMLEvent;
	public var opera:String;
	public reference var parent:HTMLWindow;
	public reference var top:HTMLWindow;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		deviceZoom = global.deviceZoom;
		devicePixelRatio = global.devicePixelRatio;
		innerHeight = global.innerHeight / global.devicePixelRatio;
		innerWidth = global.innerWidth / global.devicePixelRatio;
		opera = "";

		e = new HTMLEvent;
		__elements = new Array<Function>;
		__uid = 0;
		orientation=0;
		deviceRotation=0;
		document = new HTMLDocument();
		location = new HTMLLocation();
		navigator = new HTMLNavigator();

		parent = this;
		top = this;

		screen = new HTMLScreen();
		screen.availWidth = screen.width = innerWidth;
		screen.availHeight = screen.height = innerHeight;

		__registerManager(this, dispatchEvent);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete location;
		delete document;
		delete navigator;
		delete screen;
		delete __elements;
		delete e;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function now():Time
	{
		return 0;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function open(url:String, WindowName:String, optional missing WindowFeatures:String)
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function postMessage(message:Object, domain:String, optional missing params:Object)
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addEventListener(eventType:String, listener:HTMLWindowEvent, optional missing useCapture:Boolean)
	{
		__registerCallback(__uid, eventType);
		__elements[eventType] = listener;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeEventListener(eventType:String, listener:HTMLWindowEvent, optional missing useCapture:Boolean)
	{
		__elements[eventType] = null;
		__unRegisterCallback(__uid, eventType);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispatchEvent(uid:Integer, eventType:String)
	{
		// Receive arbirtrary event params that we will read from the arguments array.
		// We decide which event it is from the eventType string param.
		// All device wrappers should fire "load" event so that the application can start.

		var Callback:Function = __elements[eventType];
		if(Callback)
		{
			e.type 		= String(arguments[1]);
			e.timestamp = Time(arguments[2]);

			if(e.type=="keydown" || e.type=="keyup")
			{
				var keys:Array<Object> = arguments[3];
				e.keyCode = keys[0];
				e.shiftKey = keys[1];
				e.altKey = keys[2];
				e.ctrlKey = keys[3];

				//trace(String.fromCharCode(e.keyCode));
			}
			else if(e.type=="keypress")
			{
				var keys:Array<Integer> = arguments[3];
				e.keyCode = keys[0];
			}
			else
			{
				e.clientX = Float(arguments[4]) / global.devicePixelRatio;
				e.clientY = Float(arguments[5]) / global.devicePixelRatio;

				e.touches[0].clientX = e.clientX;
				e.touches[0].clientY = e.clientY;

				e.changedTouches[0].clientX	= e.clientX;
				e.changedTouches[0].clientY	= e.clientY;
			}

			if(e.type=="keydown" || e.type=="keyup" || e.type=="keypress")
			{
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_SPACE		  ) e.key = "Space";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_UP		  ) e.key = "ArrowUp";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_DOWN        ) e.key = "ArrowDown";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_LEFT        ) e.key = "ArrowLeft";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_RIGHT       ) e.key = "ArrowRight";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_INSERT      ) e.key = "Insert";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_DELETE      ) e.key = "Delete";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_HOME        ) e.key = "Home";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_END         ) e.key = "End";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_PAGE_UP     ) e.key = "PageUp";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_PAGE_DOWN   ) e.key = "PageDown";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_NUM_LOCK    ) e.key = "NumLock";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_BACKSPACE   ) e.key = "Backspace";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_ENTER       ) e.key = "Enter";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_SHIFT       ) e.key = "Shift";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_CTRL        ) e.key = "Control";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_ALT         ) e.key = "Alt";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_CAPS_LOCK   ) e.key = "CapsLock";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_TAB         ) e.key = "Tab";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F1          ) e.key = "F1";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F2          ) e.key = "F2";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F3          ) e.key = "F3";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F4          ) e.key = "F4";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F5          ) e.key = "F5";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F6          ) e.key = "F6";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F7          ) e.key = "F7";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F8          ) e.key = "F8";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F9          ) e.key = "F9";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F10         ) e.key = "F10";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F11         ) e.key = "F11";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_F12         ) e.key = "F12";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_BREAK       ) e.key = "Pause";
				if(e.keyCode==DEVICE_KEYS_ENUM.DEVICE_KEY_ESCAPE      ) e.key = "Escape";
			}

			Callback(e);
		}
	}
}

