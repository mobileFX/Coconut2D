/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2017 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantcial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	   ______                             __ ___   ____     _   __      __  _               ____  _           ___
//	  / ____/___  _________  ____  __  __/ /|__ \ / __ \   / | / /___ _/ /_(_)   _____     / __ )(_)___  ____/ (_)___  ____ ______
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/_/ // / / /  /  |/ / __ `/ __/ / | / / _ \   / __  / / __ \/ __  / / __ \/ __ `/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_/ __// /_/ /  / /|  / /_/ / /_/ /| |/ /  __/  / /_/ / / / / / /_/ / / / / / /_/ (__  )
//	\____/\____/\___/\____/_/ /_/\__,_/\__/____/_____/  /_/ |_/\__,_/\__/_/ |___/\___/  /_____/_/_/ /_/\__,_/_/_/ /_/\__, /____/
//	                                                                                                                /____/
// ==================================================================================================================================

function __copy__(src:Object, dst:Object, members:COCO_OBJECT_COPY_MEMBERS_ENUM) {}

function parseServerConfig(s:String):GAME_SERVER_CONFIG {}

function read(src:String):String {}
function write(src:String, buff:String) {}

function __registerManager(manager:HTMLWindow, cb:HTMLWindowDispatchEvent) {}
function __registerCallback(uid:Integer, type:String) {}
function __unRegisterCallback(uid:Integer, type:String) {}

function __Video_load(url:String,obj:HTMLVideoElement) :Integer {}
function __Video_get_position(id:Integer):Float  {}
function __Video_set_position(id:Integer,time:Time)  {}
function __Video_play(id:Integer) {}
function __Video_pause(id:Integer) {}
function __Video_stop(id:Integer) {}
function __Video_delete(id:Integer) {}

function __Facebook_Initialize(AppID:String, ImageSize:Integer) {}
function __Facebook_Login(Permissions:String, ImageSize:Integer) {}
function __Facebook_Share(URL:String) {}
function __Facebook_Post(toUserID:String, URL:String) {}
function __Facebook_Invite(message:String) {}

function __Twitter_Share(URL:String) {}

function __close_window() {}
function __requestFullScreen() {}
function fixTouch(touch:Touch) {}

function require(module:String):Object {}

function md5(str:String):String {}
function GUID():String {}
function formatCurrency(number:Number, decimal_places:Integer, whole_part_length:Integer, whole_part_delimiter:String, decimal_delimiter:String):String {}

function atob(str:String):String {}
function btoa(str:String):String {}

function __Dataset_SQLite_SELECT(dbFileName:String, SQL:String):ArrayBuffer {}
function __Dataset_SQLite_UPDATE(ab:ArrayBuffer):ArrayBuffer {}
function __Dataset_SQLite_EXEC(dbFileName:String, SQL:String):String {}

function QRCodeEncode(data:String, optional missing size:Integer, optional missing margin:Integer=1):String {}
function QRCodeDecode(b64:String):String {}

function setInterval(Callback:Function, Interval:Integer):Integer {}
function clearInterval(Handle:Integer) {}

function __cococlip_debugger_tick(p:String) {}
function __cococlip_debugger_paint(p:String) {}
function __cococlip_debugger_interpolation(p:String) {}
function __cococlip_debugger_keyframe(p:String, f:Float) {}

function __Canvas2DRenderingContext_flush(uid:Integer, length:Integer, width:Integer, height:Integer) {}

function __WebGLRenderingContext_activeTexture(uid:Integer, texture:Integer) {}
function __WebGLRenderingContext_attachShader(uid:Integer, program_uid:Integer, shader_uid:Integer) {}
function __WebGLRenderingContext_bindAttribLocation(uid:Integer, program_uid:Integer, index:Integer, name:String) {}
function __WebGLRenderingContext_bindBuffer(uid:Integer, target:Integer, buffer_uid:Integer) {}
function __WebGLRenderingContext_bindFramebuffer(uid:Integer, target:Integer, framebuffer_uid:Integer) {}
function __WebGLRenderingContext_bindRenderbuffer(uid:Integer, target:Integer, renderbuffer_uid:Integer) {}
function __WebGLRenderingContext_bindTexture(uid:Integer, target:Integer, texture_uid:Integer) {}
function __WebGLRenderingContext_blendColor(uid:Integer, red:Float, green:Float, blue:Float, alpha:Float) {}
function __WebGLRenderingContext_blendEquation(uid:Integer, mode:Integer) {}
function __WebGLRenderingContext_blendEquationSeparate(uid:Integer, modeRGB:Integer, modeAlpha:Integer) {}
function __WebGLRenderingContext_blendFunc(uid:Integer, sfactor:Integer, dfactor:Integer) {}
function __WebGLRenderingContext_blendFuncSeparate(uid:Integer, srcRGB:Integer, dstRGB:Integer, srcAlpha:Integer, dstAlpha:Integer) {}
function __WebGLRenderingContext_bufferData(uid:Integer, ...) {}
function __WebGLRenderingContext_bufferSubData(uid:Integer, target:Integer, offset:Integer, data_buffer_uid:Integer, data_byteOffset:Integer, data_length:Integer) {}
function __WebGLRenderingContext_checkFramebufferStatus(uid:Integer, target:Integer):Integer {}
function __WebGLRenderingContext_clear(uid:Integer, mask:Integer) {}
function __WebGLRenderingContext_clearColor(uid:Integer, red:Float, green:Float, blue:Float, alpha:Float) {}
function __WebGLRenderingContext_clearDepth(uid:Integer, depth:Float) {}
function __WebGLRenderingContext_clearStencil(uid:Integer, s:Integer) {}
function __WebGLRenderingContext_colorMask(uid:Integer, red:Boolean, green:Boolean, blue:Boolean, alpha:Boolean) {}
function __WebGLRenderingContext_compileShader(uid:Integer, shader_uid:Integer) {}
function __WebGLRenderingContext_compressedTexImage2D(uid:Integer, target:Integer, level:Integer, internalformat:Integer, width:Integer, height:Integer, border:Integer, data_buffer_uid:Integer, data_byteOffset:Integer, data_length:Integer) {}
function __WebGLRenderingContext_compressedTexSubImage2D(uid:Integer, target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, data_buffer_uid:Integer, data_byteOffset:Integer, data_length:Integer) {}
function __WebGLRenderingContext_copyTexImage2D(uid:Integer, target:Integer, level:Integer, internalformat:Integer, x:Integer, y:Integer, width:Integer, height:Integer, border:Integer) {}
function __WebGLRenderingContext_copyTexSubImage2D(uid:Integer, target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, x:Integer, y:Integer, width:Integer, height:Integer) {}
function __WebGLRenderingContext_createBuffer(uid:Integer):Integer {}
function __WebGLRenderingContext_createFramebuffer(uid:Integer):Integer {}
function __WebGLRenderingContext_createProgram(uid:Integer):Integer {}
function __WebGLRenderingContext_createRenderbuffer(uid:Integer):Integer {}
function __WebGLRenderingContext_createShader(uid:Integer, type:Integer):Integer {}
function __WebGLRenderingContext_createTexture(uid:Integer):Integer {}
function __WebGLRenderingContext_cullFace(uid:Integer, mode:Integer) {}
function __WebGLRenderingContext_deleteBuffer(uid:Integer, buffer_uid:Integer) {}
function __WebGLRenderingContext_deleteFramebuffer(uid:Integer, framebuffer_uid:Integer) {}
function __WebGLRenderingContext_deleteProgram(uid:Integer, program_uid:Integer) {}
function __WebGLRenderingContext_deleteRenderbuffer(uid:Integer, renderbuffer_uid:Integer) {}
function __WebGLRenderingContext_deleteShader(uid:Integer, shader_uid:Integer) {}
function __WebGLRenderingContext_deleteTexture(uid:Integer, texture_uid:Integer) {}
function __WebGLRenderingContext_depthFunc(uid:Integer, func:Integer) {}
function __WebGLRenderingContext_depthMask(uid:Integer, flag:Boolean) {}
function __WebGLRenderingContext_depthRange(uid:Integer, zNear:Float, zFar:Float) {}
function __WebGLRenderingContext_detachShader(uid:Integer, program_uid:Integer, shader_uid:Integer) {}
function __WebGLRenderingContext_disable(uid:Integer, cap:Integer) {}
function __WebGLRenderingContext_disableVertexAttribArray(uid:Integer, index:Integer) {}
function __WebGLRenderingContext_drawArrays(uid:Integer, mode:Integer, first:Integer, count:Integer) {}
function __WebGLRenderingContext_drawElements(uid:Integer, mode:Integer, count:Integer, type:Integer, offset:Integer) {}
function __WebGLRenderingContext_enable(uid:Integer, cap:Integer) {}
function __WebGLRenderingContext_enableVertexAttribArray(uid:Integer, index:Integer) {}
function __WebGLRenderingContext_finish(uid:Integer) {}
function __WebGLRenderingContext_flush(uid:Integer) {}
function __WebGLRenderingContext_framebufferRenderbuffer(uid:Integer, target:Integer, attachment:Integer, renderbuffertarget:Integer, renderbuffer_uid:Integer) {}
function __WebGLRenderingContext_framebufferTexture2D(uid:Integer, target:Integer, attachment:Integer, textarget:Integer, texture_uid:Integer, level:Integer) {}
function __WebGLRenderingContext_frontFace(uid:Integer, mode:Integer) {}
function __WebGLRenderingContext_generateMipmap(uid:Integer, target:Integer) {}
function __WebGLRenderingContext_getActiveAttrib(uid:Integer, program_uid:Integer, index:Integer):Integer {}
function __WebGLRenderingContext_getActiveUniform(uid:Integer, program_uid:Integer, index:Integer):Integer {}
function __WebGLRenderingContext_getAttachedShaders(uid:Integer, program_uid:Integer):Array<WebGLShader> {}
function __WebGLRenderingContext_getAttribLocation(uid:Integer, program_uid:Integer, name:String):Integer {}
function __WebGLRenderingContext_getBufferParameter(uid:Integer, target:Integer, pname:Integer):String {}
function __WebGLRenderingContext_getContextAttributes(uid:Integer):Integer {}
function __WebGLRenderingContext_getError(uid:Integer):Integer {}
function __WebGLRenderingContext_getExtension(uid:Integer, name:String):Object {}
function __WebGLRenderingContext_getFramebufferAttachmentParameter(uid:Integer, target:Integer, attachment:Integer, pname:Integer):String {}
function __WebGLRenderingContext_getParameter(uid:Integer, pname:Integer):String {}
function __WebGLRenderingContext_getProgramInfoLog(uid:Integer, program_uid:Integer):String {}
function __WebGLRenderingContext_getProgramParameter(uid:Integer, program_uid:Integer, pname:Integer):Boolean {}
function __WebGLRenderingContext_getRenderbufferParameter(uid:Integer, target:Integer, pname:Integer):String {}
function __WebGLRenderingContext_getShaderInfoLog(uid:Integer, shader_uid:Integer):String {}
function __WebGLRenderingContext_getShaderParameter_boolean(uid:Integer, shader_uid:Integer, pname:Integer):Boolean {}
function __WebGLRenderingContext_getShaderParameter_enum(uid:Integer, shader_uid:Integer, pname:Integer):Integer {}
function __WebGLRenderingContext_getShaderPrecisionFormat(uid:Integer, shadertype:Integer, precisiontype:Integer):Integer {}
function __WebGLRenderingContext_getShaderSource(uid:Integer, shader_uid:Integer):String {}
function __WebGLRenderingContext_getSupportedExtensions(uid:Integer):Array<String> {}
function __WebGLRenderingContext_getTexParameter(uid:Integer, target:Integer, pname:Integer):String {}
function __WebGLRenderingContext_getUniform(uid:Integer, program_uid:Integer, location_uid:Integer):String {}
function __WebGLRenderingContext_getUniformLocation(uid:Integer, program_uid:Integer, name:String):Integer {}
function __WebGLRenderingContext_getVertexAttrib(uid:Integer, index:Integer, pname:Integer):String {}
function __WebGLRenderingContext_getVertexAttribOffset(uid:Integer, index:Integer, pname:Integer):Integer {}
function __WebGLRenderingContext_hint(uid:Integer, target:Integer, mode:Integer) {}
function __WebGLRenderingContext_isBuffer(uid:Integer, buffer_uid:Integer):Boolean {}
function __WebGLRenderingContext_isContextLost(uid:Integer):Boolean {}
function __WebGLRenderingContext_isEnabled(uid:Integer, cap:Integer):Boolean {}
function __WebGLRenderingContext_isFramebuffer(uid:Integer, framebuffer_uid:Integer):Boolean {}
function __WebGLRenderingContext_isProgram(uid:Integer, program_uid:Integer):Boolean {}
function __WebGLRenderingContext_isRenderbuffer(uid:Integer, renderbuffer_uid:Integer):Boolean {}
function __WebGLRenderingContext_isShader(uid:Integer, shader_uid:Integer):Boolean {}
function __WebGLRenderingContext_isTexture(uid:Integer, texture_uid:Integer):Boolean {}
function __WebGLRenderingContext_lineWidth(uid:Integer, width:Float) {}
function __WebGLRenderingContext_linkProgram(uid:Integer, program_uid:Integer) {}
function __WebGLRenderingContext_pixelStorei(uid:Integer, pname:Integer, param:Integer) {}
function __WebGLRenderingContext_polygonOffset(uid:Integer, factor:Float, units:Float) {}
function __WebGLRenderingContext_readPixels(uid:Integer, x:Integer, y:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels_buffer_uid:Integer, pixels_byteOffset:Integer, pixels_length:Integer) {}
function __WebGLRenderingContext_renderbufferStorage(uid:Integer, target:Integer, internalformat:Integer, width:Integer, height:Integer) {}
function __WebGLRenderingContext_sampleCoverage(uid:Integer, value:Float, invert:Boolean) {}
function __WebGLRenderingContext_scissor(uid:Integer, x:Integer, y:Integer, width:Integer, height:Integer) {}
function __WebGLRenderingContext_shaderSource(uid:Integer, shader_uid:Integer, source:String) {}
function __WebGLRenderingContext_stencilFunc(uid:Integer, func:Integer, ref:Integer, mask:Integer) {}
function __WebGLRenderingContext_stencilFuncSeparate(uid:Integer, face:Integer, func:Integer, ref:Integer, mask:Integer) {}
function __WebGLRenderingContext_stencilMask(uid:Integer, mask:Integer) {}
function __WebGLRenderingContext_stencilMaskSeparate(uid:Integer, face:Integer, mask:Integer) {}
function __WebGLRenderingContext_stencilOp(uid:Integer, fail:Integer, zfail:Integer, zpass:Integer) {}
function __WebGLRenderingContext_stencilOpSeparate(uid:Integer, face:Integer, fail:Integer, zfail:Integer, zpass:Integer) {}
function __WebGLRenderingContext_texImage2D(uid:Integer, ...) {}
function __WebGLRenderingContext_texParameterf(uid:Integer, target:Integer, pname:Integer, param:Float) {}
function __WebGLRenderingContext_texParameteri(uid:Integer, target:Integer, pname:Integer, param:Integer) {}
function __WebGLRenderingContext_texSubImage2D(uid:Integer, target:Integer, level:Integer, xoffset:Integer, yoffset:Integer, width:Integer, height:Integer, format:Integer, type:Integer, pixels_buffer_uid:Integer, pixels_byteOffset:Integer, pixels_length:Integer) {}
function __WebGLRenderingContext_uniform1f(uid:Integer, location_uid:Integer, x:Float) {}
function __WebGLRenderingContext_uniform1fv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform1i(uid:Integer, location_uid:Integer, x:Integer) {}
function __WebGLRenderingContext_uniform1iv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform2f(uid:Integer, location_uid:Integer, x:Float, y:Float) {}
function __WebGLRenderingContext_uniform2fv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform2i(uid:Integer, location_uid:Integer, x:Integer, y:Integer) {}
function __WebGLRenderingContext_uniform2iv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform3f(uid:Integer, location_uid:Integer, x:Float, y:Float, z:Float) {}
function __WebGLRenderingContext_uniform3fv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform3i(uid:Integer, location_uid:Integer, x:Integer, y:Integer, z:Integer) {}
function __WebGLRenderingContext_uniform3iv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform4f(uid:Integer, location_uid:Integer, x:Float, y:Float, z:Float, w:Float) {}
function __WebGLRenderingContext_uniform4fv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniform4i(uid:Integer, location_uid:Integer, x:Integer, y:Integer, z:Integer, w:Integer) {}
function __WebGLRenderingContext_uniform4iv(uid:Integer, location_uid:Integer, v_buffer_uid:Integer, v_byteOffset:Integer, v_length:Integer) {}
function __WebGLRenderingContext_uniformMatrix2fv(uid:Integer, location_uid:Integer, transpose:Boolean, value_buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_uniformMatrix3fv(uid:Integer, location_uid:Integer, transpose:Boolean, value_buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_uniformMatrix4fv(uid:Integer, location_uid:Integer, transpose:Boolean, value_buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_useProgram(uid:Integer, program_uid:Integer) {}
function __WebGLRenderingContext_validateProgram(uid:Integer, program_uid:Integer) {}
function __WebGLRenderingContext_vertexAttrib1f(uid:Integer, indx:Integer, x:Float) {}
function __WebGLRenderingContext_vertexAttrib1fv(uid:Integer, indx:Integer, value_buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_vertexAttrib2f(uid:Integer, indx:Integer, x:Float, y:Float) {}
function __WebGLRenderingContext_vertexAttrib2fv(uid:Integer, indx:Integer, value__buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_vertexAttrib3f(uid:Integer, indx:Integer, x:Float, y:Float, z:Float) {}
function __WebGLRenderingContext_vertexAttrib3fv(uid:Integer, indx:Integer, value__buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_vertexAttrib4f(uid:Integer, indx:Integer, x:Float, y:Float, z:Float, w:Float) {}
function __WebGLRenderingContext_vertexAttrib4fv(uid:Integer, indx:Integer, value__buffer_uid:Integer, value_byteOffset:Integer, value_length:Integer) {}
function __WebGLRenderingContext_vertexAttribPointer(uid:Integer, indx:Integer, size:Integer, type:Integer, normalized:Boolean, stride:Integer, offset:Integer) {}
function __WebGLRenderingContext_viewport(uid:Integer, x:Float, y:Float, width:Float, height:Float) {}

// ==================================================================================================================================
//	    ______________  ______           __                  _____           _       __     ____  __      _           __
//	   / ____/ ____/  |/  /   |         / /___ __   ______ _/ ___/__________(_)___  / /_   / __ \/ /_    (_)__  _____/ /______
//	  / __/ / /   / /|_/ / /| |    __  / / __ `/ | / / __ `/\__ \/ ___/ ___/ / __ \/ __/  / / / / __ \  / / _ \/ ___/ __/ ___/
//	 / /___/ /___/ /  / / ___ |   / /_/ / /_/ /| |/ / /_/ /___/ / /__/ /  / / /_/ / /_   / /_/ / /_/ / / /  __/ /__/ /_(__  )
//	/_____/\____/_/  /_/_/  |_|   \____/\__,_/ |___/\__,_//____/\___/_/  /_/ .___/\__/   \____/_.___/_/ /\___/\___/\__/____/
//	                                                                      /_/                      /___/
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
class Object
{
	//public var prototype:Object;
	public function Destructor() {}
	public function toString():String {}
	public function toLocaleString():String {}
	public function valueOf():Object {}
	public function hasOwnProperty(name:String):Boolean {}
	public function isPrototypeOf(o:Object):Boolean {}
	public function propertyIsEnumerable(name:String):Boolean {}
	public function defineProperty(object:Object, name:String, params:Object){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Array
{
	public var length:Integer;
	public function concat(args:Array):Array<Object> {}
	public function join(seperator:String):String {}
	public function pop():Object {}
	public function push(args:Object):Object {}
	public function reverse():Array<Object> {}
	public function shift():Array<Object> {}
	public function slice(start:Integer, optional missing end:Integer):Array<Object> {}
	public function sort(funct:Function):Array<Object> {}
	public function splice(start:Integer, deletecount:Integer, optional missing items:Object):Object {}
	public function unshift(start:Integer):Array<Object> {}
	public function forEach(item:Object):Array<Object> {}
	public virtual function size():Integer {}
	public function clear() {}
	public function indexOf(item:Object):Integer {}
	public function sum():Float {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Dictionary : Object
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Function
{
	public var length:Integer;
	public function apply(thisObject:Object, optional missing args:Array<Object>):Object {}
	public function call(thisObject:Object, ...):Object {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Global
{
	public var NaN:Number;
	public var Infinity:Number;
	public var innerWidth:Float;
	public var innerHeight:Float;
	public var deviceRotation:Float;
	public var devicePixelRatio:Float;
	public var deviceZoom:Float;
	public var __native:Boolean;
	public var __Coconut2DPlayer:Boolean;
	public var __touchEvents:Boolean;
	public var __webAudio:Boolean;
	public function Destructor() {}
	public function eval(s:String):Object {}
	public function parseInt(s:String, optional missing radix:Integer):Integer {}
	public function parseFloat(s:String):Float {}
	public function parseTime(s:String):Time {}
	public function escape(s:String):String {}
	public function unescape(s:String):String {}
	public function isNaN(number:Object):Boolean {}
	public function isFinite(number:Object):Boolean {}
	public function decodeURI(encodedURI:String):String {}
	public function decodeURIComponent(uriComponent:String):String {}
	public function encodeURIComponent(uriComponent:String):String {}
	public function encodeURI(URI:String):String {}
	public function trace(message:String) {}
	public function alert(message:String) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class String
{
	public var length:Integer;
	public static function fromCharCode(charCode:Integer):String {}
	public function charAt(position:Integer):String {}
	public function charCodeAt(position:Integer, optional missing fast:Boolean):Integer {}
	public function concat(value:String):String {}
	public function indexOf(searchString:String, optional missing startPosition:Integer):Integer {}
	public function lastIndexOf(searchString:String, optional missing startPosition:Integer):Integer {}
	public function localeCompare(otherString:String):Integer {}
	public function match(regexp:RegExp):Array<Object> {}
	public function replace(find:String, replaceValue:String):String {}
	public function replace(regexp:RegExp, replaceValue:String):String {}
	public function search(regexp:RegExp):Integer {}
	public function slice(start:Integer, end:Integer):String {}
	public function split(separator:String):Array<String> {}
	public function split(rx:RegExp):Array<String> {}
	public function substring(start:Integer, optional missing end:Integer):String {}
	public function substr(start:Integer, optional missing size:Integer):String {}
	public function toLowerCase():String {}
	public function toLocaleLowerCase():String {}
	public function toUpperCase():String {}
	public function toLocaleUpperCase():String {}
	public function size():Integer {}
	public function trim():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Number
{
	public var MIN_VALUE:Number;
	public var MAX_VALUE:Number;
	public var NEGATIVE_INFINITY:Number;
	public var POSITIVE_INFINITY:Number;
	public function toFixed(fractionDigits:Integer):String {}
	public function toExponential(fractionDigits:Integer):String {}
	public function toPrecision(fractionDigits:Integer):String {}
	public function toString(optional missing fractionDigits:Integer):String {}
}

class Integer : Number 	{}
class Color: Integer 	{}
class Float : Number 	{}
class Time : Float		{}
class Currency : Float  {}
class Cents:Integer     {}
class Coins:Integer     {}

class int8_t : Integer {}
class int16_t : Integer {}
class int32_t : Integer {}
class int64_t : Integer {}

class uint8_t : Integer {}
class uint16_t : Integer {}
class uint32_t : Integer {}
class uint64_t : Integer {}

class CartesianX : Float {}
class CartesianY : Float {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Boolean
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Date
{
	public function UTC(hour:Integer, min:Integer, sec:Integer, ms:Integer):Integer {}
	public function parse(string:String):Integer {}
	public function toDateString():String {}
	public function toTimeString():String {}
	public function toLocaleString():String {}
	public function toLocaleDateString():String {}
	public function toLocaleTimeString():String {}
	public function valueOf():Object {}
	public function getFullYear():Integer {}
	public function getTime():Integer {}
	public function getUTCFullYear():Integer {}
	public function getMonth():Integer {}
	public function getUTCMonth():Integer {}
	public function getDate():Integer {}
	public function getUTCDate():Integer {}
	public function getDay():Integer {}
	public function getUTCDay():Integer {}
	public function getHours():Integer {}
	public function getUTCHours():Integer {}
	public function getMinutes():Integer {}
	public function getUTCMinutes():Integer {}
	public function getSeconds():Integer {}
	public function getUTCSeconds():Integer {}
	public function getMilliseconds():Integer {}
	public function getUTCMilliseconds():Integer {}
	public function getTimezoneOffset():Integer {}
	public function setTime(value:Integer):Integer {}
	public function setMilliseconds(value:Integer):Integer {}
	public function setUTCMilliseconds(ms:Integer):Integer {}
	public function setSeconds(sec:Integer, ms:Integer):Integer {}
	public function setUTCSeconds(sec:Integer, ms:Integer):Integer {}
	public function setMinutes(min:Integer, sec:Integer, ms:Integer):Integer {}
	public function setUTCMinute(min:Integer, sec:Integer, ms:Integer):Integer {}
	public function setHours(hour:Integer, min:Integer, sec:Integer, ms:Integer):Integer {}
	public function setUTCHours(hour:Integer, min:Integer, sec:Integer, ms:Integer):Integer {}
	public function setDate(date:Integer):Integer {}
	public function setUTCDate(date:Integer):Integer {}
	public function setMonth(month:Integer, date:Integer):Integer {}
	public function setUTCMonth(month:Integer, date:Integer):Integer {}
	public function setFullYear(year:Integer, month:Integer, date:Integer):Integer {}
	public function setUTCFullYear(year:Integer, month:Integer, date:Integer){}
	public function toUTCString():String {}
	public function toJSON():String {}
	public static function now():Time {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class performance
{
	public static function now():Time {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Math
{
	public static var E:Float;
	public static var LN10:Float;
	public static var LN2:Float;
	public static var LOG2E:Float;
	public static var LOG10E:Float;
	public static var PI:Float;
	public static var SQRT1_2:Float;
	public static var SQRT2:Float;
	public static function abs(x:Number):Number {}
	public static function acos(x:Number):Float {}
	public static function asin(x:Number):Float {}
	public static function atan(x:Number):Float {}
	public static function atan2(x:Number, y:Number):Float {}
	public static function ceil(x:Float):Integer {}
	public static function cos(x:Number):Float {}
	public static function exp(x:Number):Float {}
	public static function floor(x:Float):Integer {}
	public static function log(x:Number):Float {}
	public static function max(a:Number, b:Number):Float {}
	public static function min(a:Number, b:Number):Float {}
	public static function pow(x:Number, y:Number):Float {}
	public static function random():Float {}
	public static function round(x:Float):Integer {}
	public static function sin(x:Number):Float {}
	public static function sqrt(x:Number):Float {}
	public static function tan(x:Number):Float {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class RegExp
{
	public function Constructor(optional missing pattern:String, optional missing flags:String) {}
	public var source:String;
	public var global:Boolean;
	public var ignoreCase:Boolean;
	public var multiline:Boolean;
	public var lastIndex:Integer;
	public function exec(string:String):Array<String> {}
	public function test(string:String):Boolean {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBuffer
{
	public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {}
	public var byteLength:Integer;
    public function slice(begin:Integer, end:Integer): ArrayBuffer {}
    public function encodeAsPNG(width:Integer, height:Integer):ArrayBuffer {}
    public function encodeAsBase64():String {}
    public var __uid:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ArrayBufferView
{
	public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {}
	public var buffer:ArrayBuffer;
	public var byteOffset:Integer;
	public var byteLength:Integer;
	public var __uid:Integer;
	public function Destructor() {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class TypedArray : ArrayBufferView
{
	public var length:Integer;
	public var BYTES_PER_ELEMENT:Integer;
	public function set(array:TypedArray, optional missing offset:Integer) {}
	public function toString():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Int8Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Int16Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Int32Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Int64Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Uint8Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Uint16Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Uint32Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Uint64Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Float32Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Float64Array 		: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }
class Uint8ClampedArray	: TypedArray { public function Constructor(optional missing buff:Object, optional missing offset:Integer, optional missing length:Integer) {} }

////////////////////////////////////////////////////////////////////////////////////////////////////
class Error
{
	public var code:Integer;
	public var name:String;
	public var message:String;
	public function toString():String {}
	public var stack:String;
}

class EvalError :Error {}
class RangeError :Error {}
class ReferenceError :Error {}
class SyntaxError :Error {}
class TypeError :Error {}

////////////////////////////////////////////////////////////////////////////////////////////////////
class JSON
{
	public static function parse(json:String):Dictionary { return null; };
	public static function stringify(obj:Dictionary, optional missing fn:Function, optional missing tabs:Integer):String { return null; };
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class DataView : ArrayBufferView
{
	public function Constructor(buffer:ArrayBuffer, optional missing byteOffset:Integer, optional missing byteLength:Integer)
	{
	}

    public function getInt8(byteOffset:Integer):Integer {}
    public function getUint8(byteOffset:Integer):Integer {}
    public function getInt16(byteOffset:Integer, optional missing littleEndian:Boolean):Integer {}
    public function getUint16(byteOffset:Integer, optional missing littleEndian:Boolean):Integer {}
    public function getInt32(byteOffset:Integer, optional missing littleEndian:Boolean):Integer {}
    public function getUint32(byteOffset:Integer, optional missing littleEndian:Boolean):Integer {}
    public function getFloat32(byteOffset:Integer, optional missing littleEndian:Boolean):Float {}
    public function getFloat64(byteOffset:Integer, optional missing littleEndian:Boolean):Float {}

    public function setInt8(byteOffset:Integer, value:Integer) {}
    public function setUint8(byteOffset:Integer, value:Integer) {}
    public function setInt16(byteOffset:Integer, value:Integer, optional missing littleEndian:Boolean) {}
    public function setUint16(byteOffset:Integer, value:Integer, optional missing littleEndian:Boolean) {}
    public function setInt32(byteOffset:Integer, value:Integer, optional missing littleEndian:Boolean) {}
    public function setUint32(byteOffset:Integer, value:Integer, optional missing littleEndian:Boolean) {}
    public function setFloat32(byteOffset:Integer, value:Float, optional missing littleEndian:Boolean) {}
    public function setFloat64(byteOffset:Integer, value:Float, optional missing littleEndian:Boolean) {}
}

// ==================================================================================================================================
//	    __  __________  _____    ______
//	   / / / /_  __/  |/  / /   / ____/
//	  / /_/ / / / / /|_/ / /   /___ \
//	 / __  / / / / /  / / /_______/ /
//	/_/ /_/ /_/ /_/  /_/_____/_____/
//
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
callback XMLHttpRequestOnTimeout(code:Integer):Integer;
callback XMLHttpRequestOnLoad():Integer;

class XMLHttpRequest
{
	public const UNSENT:Integer = 0;
	public const OPENED:Integer = 1;
	public const HEADERS_RECEIVED:Integer = 2;
	public const LOADING:Integer = 3;
	public const DONE:Integer = 4;

	public var ontimeout:XMLHttpRequestOnTimeout;
	public var onload:XMLHttpRequestOnLoad;

	public function Constructor(){}
	public function Destructor(){}

	// request
	public var timeout:Integer;
	public var readyState:Integer;
	public function open(method:String, url:String, optional missing async:Boolean) {}
	public function setRequestHeader(header:String, value:String) {}
	public function send(data:String) {}
	public function send(data:ArrayBuffer) {}
	public function send(data:ArrayBufferView) {}
	public function send() {}
	public function abort() {}

	// response
	public var status:Integer;
	public var statusText:String;
	public var responseText:String;
	public var responseType:String;
	public var response:ArrayBuffer;
	public function getAllResponseHeaders():String {}
	public function getResponseHeader(header:String):String {}
}

class Console
{
	public function log(msg:String) {}
	public function trace() {}
}

#if (COCONUT2D_HTML5)

////////////////////////////////////////////////////////////////////////////////////////////////////
class CanvasGradient
{
	public function Constructor(x0:Integer, y0:Integer, x1:Integer, y1:Integer){}
	public function Destructor(){}
	public function addColorStop(offset:Float, scolor:String){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class HTMLTextMetrics
{
	public var width:Integer;
	public function Constructor(){}
	public function Destructor(){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ImageData
{
	public var data:Uint8Array;
	public var src:String;
	public var width:Integer;
	public var height:Integer;
	public function Constructor(a0:String, optional missing a1:String){}
	public function Destructor(){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class CanvasRenderingContext2D
{
	public var canvas:HTMLCanvasElement;

 	public var imageSmoothingEnabled:Boolean;
 	public var webkitImageSmoothingEnabled:Boolean;
 	public var oImageSmoothingEnabled:Boolean;
 	public var mozImageSmoothingEnabled:Boolean;

	public property fillStyle						{ function get():Object { return null; } function set(v:Object) {} }
	public property strokeStyle						{ function get():Object { return null; } function set(v:Object) {}	}
	public property font							{ function get():String { return ""; } function set(v:String) {}	}
	public property globalCompositeOperation		{ function get():String { return ""; } function set(v:String) {}	}
	public property textBaseline					{ function get():String { return ""; } function set(v:String) {}	}
	public property textAlign						{ function get():String { return ""; } function set(v:String) {}	}
	public property lineCap							{ function get():String { return ""; } function set(v:String) {}	}
	public property lineJoin						{ function get():Float { return 0; } function set(v:Float) {} }
	public property shadowColor						{ function get():Float { return 0; } function set(v:Float) {} }
	public property globalAlpha						{ function get():Float { return 0; } function set(v:Float) {} }
	public property lineDashOffset					{ function get():Float { return 0; } function set(v:Float) {} }
	public property miterLimit						{ function get():Float { return 0; } function set(v:Float) {} }
	public property lineWidth						{ function get():Float { return 0; } function set(v:Float) {} }
	public property shadowBlur						{ function get():Float { return 0; } function set(v:Float) {} }
	public property shadowOffsetX					{ function get():Integer { return 0; } function set(v:Integer) {} }
	public property shadowOffsetY					{ function get():Integer { return 0; } function set(v:Integer) {} }

	public function __toDataURL(mime:String):String {}
	public function __BitBltToHDC(ptr:Integer){}
	public function fullScreen() {}

	public function createPattern(image:Image, repetition:String):HTMLCanvasPattern																				{ return null; }
	public function isPointInPath(x:Float, y:Float):Boolean																										{ return false; }
	public function isPointInStroke(x:Float, y:Float):Boolean																									{ return false; }
	public function createRadialGradient(x0:Float, y0:Float, r0:Float, x1:Float, y1:Float, r1:Float):CanvasGradient												{ return null; }
	public function createLinearGradient(x0:Integer, y0:Integer, x1:Integer, y1:Integer):CanvasGradient															{ return null; }

	public function Constructor(canvas:HTMLCanvasElement)																										{}
	public function Destructor()																																{}
	public function clip()                                                                                                  									{}
	public function closePath()                                                                                             									{}
	public function drawCustomFocusRing(element:HTMLElement)																									{}
	public function drawSystemFocusRing(element:HTMLElement)																									{}
	public function getLineDash()																																{}
	public function scrollPathIntoView()                                                                                    									{}
	public function setLineDash(segments:Array<Integer>)                                                                    									{}
	public function strokeRect(x:Float, y:Float, w:Float, h:Float)                                                          									{}
	public function strokeText(text:String, x:Float, y:Float, optional missing maxWidth:Float)                                      									{}
	public function restore()                                                                                               									{}
	public function save()                                                                                                  									{}
	public function scale(x:Float, y:Float)                                                                                 									{}
	public function translate(x:Float, y:Float)                                                                             									{}
	public function rotate(angle:Float)                                                                                     									{}
	public function bezierCurveTo(cp1x:Float, cp1y:Float, cp2x:Float, cp2y:Float, x:Float, y:Float)                         									{}
	public function quadraticCurveTo(cpx:Float, cpy:Float, x:Float, y:Float)                                                									{}
	public function rect(x:Float, y:Float, width:Float, height:Float)                                                       									{}
	public function fill()                                                     																					{}
	public function setTransform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float)																{}
	public function transform(m11:Float, m12:Float, m21:Float, m22:Float, dx:Float, dy:Float)                               									{}
	public function beginPath()                                                                                             									{}
	public function moveTo(x:Float, y:Float)                                                                                									{}
	public function lineTo(x:Float, y:Float)                                                                                									{}
	public function arcTo(x1:Float, y1:Float, x2:Float, y2:Float, radius:Float)                                             									{}
	public function arc(cx:Float, cy:Float, radius:Float, startAngle:Float, endAngle:Float, optional missing anticlockwise:Boolean) 									{}
	public function stroke()                                                                                                									{}
	public function fillText(text:String, x:Integer, y:Integer)                                                             									{}
	public function fillRect(x:Integer, y:Integer, width:Integer, height:Integer)                                                                               {}
	public function clearRect(x:Integer, y:Integer, width:Integer, height:Integer)                                                                              {}
	public function measureText(text:String):HTMLTextMetrics                                                                                                    {}
	public function drawImage(image:Image, sx:Integer, sy:Integer, sw:Integer, sh:Integer, dx:Integer, dy:Integer, dw:Integer, dh:Integer)                      {}
	public function drawImage(image:Image, dx:Integer, dy:Integer)                                                                                              {}
	public function drawImage(image:Image, dx:Integer, dy:Integer, dw:Integer, dh:Integer)                                                                      {}
	public function drawImage(image:HTMLCanvasElement, dx:Integer, dy:Integer, dw:Integer, dh:Integer)                                                          {}

	public function createImageData(sw:Integer, sh:Integer):ImageData                                                                                           {}
	public function createImageData(imagedata:ImageData):ImageData                                                                                              {}
	public function getImageData(sx:Integer, sy:Integer, sw:Integer, sh:Integer):ImageData                                                                      {}
	public function putImageData(imagedata:ImageData, dx:Integer, dy:Integer)                                                                                   {}
	public function putImageData(imagedata:ImageData, dx:Integer, dy:Integer, dirtyX:Integer, dirtyY:Integer, dirtyWidth:Integer, dirtyHeight:Integer)          {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Image : HTMLElement
{
	public var __imageData:ImageData;
	public var __BGRA:Boolean;
	public var src:String;
	public var width:Integer;
	public var height:Integer;
	public var naturalWidth:Integer;
	public var naturalHeight:Integer;
	public var crossOrigin:String;
	public var complete:Boolean;
	public var style:HTMLStyleElement;

	public function Constructor(){}
	public function Destructor(){}
	public function load(url:String, optional missing cocoimage:CocoImage) {}
	public function cloneNode(deep:Boolean):Image{};
}

////////////////////////////////////////////////////////////////////////////////////////////////////


callback AudioOnEnded();
callback AudioOnError();
callback AudioOnLoad();
callback AudioOnloadStart();
callback AudioOnDurationChange();
callback AudioOnLoadedMetadata();
callback AudioOnLoadedData();
callback AudioOnProgress();
callback AudioOnCanPlay();
callback AudioOnCanPlayThrough();
callback AudioOnPlay();
callback AudioOnPlaying();

class Audio : HTMLElement
{
	public function Constructor(optional missing url:String){}
	public function Destructor(){}

	public function load(){}
	public function play(){}
	public function pause(){}
	public function cloneNode(deep:Boolean):Audio {}

	//public var id:String;
	public var src:String;
	public var __src:String;
	public var currentTime:Time;
	public var duration:Time;
	public var volume:Float;
	public var paused:Boolean;
	public var ended:Boolean;
	public var autoplay:Boolean;
	public var loop:Boolean;
	public var readyState:Integer;
	public var preload:String;
	public var muted:Boolean;

	public var onended:AudioOnEnded;
	public var onerror:AudioOnError;
	public var onload:AudioOnLoad;
	public var onloadstart:AudioOnloadStart;
	public var ondurationchange:AudioOnDurationChange;
	public var onloadedmetadata:AudioOnLoadedMetadata;
	public var onloadeddata:AudioOnLoadedData;
	public var onprogress:AudioOnProgress;
	public var oncanplay:AudioOnCanPlay;
	public var oncanplaythrough:AudioOnCanPlayThrough;
	public var onplay:AudioOnPlay;
	public var onplaying:AudioOnPlaying;

	public var error:MediaError;
}

class MediaError : Error {};

// ==================================================================================================================================
//	 _       __     __    ___             ___
//	| |     / /__  / /_  /   | __  ______/ (_)___
//	| | /| / / _ \/ __ \/ /| |/ / / / __  / / __ \
//	| |/ |/ /  __/ /_/ / ___ / /_/ / /_/ / / /_/ /
//	|__/|__/\___/_.___/_/  |_\__,_/\__,_/_/\____/
//
// ==================================================================================================================================

callback DecodeSuccessCallback(buffer:AudioBuffer):Integer;
callback DecodeErrorCallback():Integer;

////////////////////////////////////////////////////////////////////////////////////////////////////
class AudioContext
{
	public function Constructor(){}
	public function Destructor(){}

	public function decodeAudioData(audioData:ArrayBuffer, successCallback:DecodeSuccessCallback, optional missing errorCallback:DecodeErrorCallback) {}
	public function createBufferSource():AudioBufferSourceNode {}
	public function createGain():GainNode {}

	public var destination:AudioDestinationNode;
	public var currentTime:Time;
	public var sampleRate:Integer;
	//public var state:String;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class AudioNode
{
	public function Constructor(){}
	public function Destructor(){}

	public function disconnect(){}
	public function disconnect(node:AudioNode){}
	public function disconnect(destination:AudioNode, output:AudioNode){}
	public function disconnect(destination:AudioNode, output:AudioNode, input:AudioNode){}

	public function connect(destination:AudioNode, optional missing output:Integer=0, optional missing input:Integer=0) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////

callback AudioBufferSourceNodeOnEnded();

class AudioBufferSourceNode : AudioNode
{
	public function Constructor(){}
	public function Destructor(){}

	public function start(optional missing when:Float=0, optional missing offset:Float=0, optional missing duration:Float) {}
	public function stop(optional missing when:Float) {}

	public var buffer:AudioBuffer;
	public var loop:Boolean;
	public var loopStart:Float;
	public var loopEnd:Float;

	public var onended:AudioBufferSourceNodeOnEnded;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class AudioDestinationNode : AudioNode
{
	public function Constructor(){}
	public function Destructor(){}

	public var maxChannelCount:Integer;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class GainNode : AudioNode
{
	public function Constructor(){}
	public function Destructor(){}

	public var gain:AudioParam;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class AudioBuffer
{
	public function Constructor(){}
	public function Destructor(){}

	public var sampleRate:Float;
	public var length:Float;
	public var duration:Float;
	public var numberOfChannels:Integer;

	public function getChannelData():Float32Array {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class AudioParam
{
	public function Constructor(){}
	public function Destructor(){}

	public var value:Float;
	public var defaultValue:Float;

	public function setValueAtTime(value:Float, startTime:Time) {}
	public function linearRampToValueAtTime(value:Float, endTime:Time) {}
	public function exponentialRampToValueAtTime(value:Float, endTime:Time) {}
	public function setTargetAtTime(target:Float, startTime:Time, timeConstant:Time) {}
	public function setValueCurveAtTime(values:Float32Array, startTime:Time, duration:Time) {}
	public function cancelScheduledValues(startTime:Time) {}
}

#endif

// ==================================================================================================================================
//	   ______                             __     _   __      __  _
//	  / ____/___  _________  ____  __  __/ /_   / | / /___ _/ /_(_)   _____
//	 / /   / __ \/ ___/ __ \/ __ \/ / / / __/  /  |/ / __ `/ __/ / | / / _ \
//	/ /___/ /_/ / /__/ /_/ / / / / /_/ / /_   / /|  / /_/ / /_/ /| |/ /  __/
//	\____/\____/\___/\____/_/ /_/\__,_/\__/  /_/ |_/\__,_/\__/_/ |___/\___/
//
// ==================================================================================================================================

callback CocoAction();

// ==================================================================================================================================
//	   __  __                  ____      __            ____
//	  / / / /_______  _____   /  _/___  / /____  _____/ __/___ _________
//	 / / / / ___/ _ \/ ___/   / // __ \/ __/ _ \/ ___/ /_/ __ `/ ___/ _ \
//	/ /_/ (__  )  __/ /     _/ // / / / /_/  __/ /  / __/ /_/ / /__/  __/
//	\____/____/\___/_/     /___/_/ /_/\__/\___/_/  /_/  \__,_/\___/\___/
//
// ==================================================================================================================================

class Gradient: String {}

// ==================================================================================================================================
//	   ________      __          __   _    __           _       __    __
//	  / ____/ /___  / /_  ____ _/ /  | |  / /___ ______(_)___ _/ /_  / /__  _____
//	 / / __/ / __ \/ __ \/ __ `/ /   | | / / __ `/ ___/ / __ `/ __ \/ / _ \/ ___/
//	/ /_/ / / /_/ / /_/ / /_/ / /    | |/ / /_/ / /  / / /_/ / /_/ / /  __(__  )
//	\____/_/\____/_.___/\__,_/_/     |___/\__,_/_/  /_/\__,_/_.___/_/\___/____/
//
// ==================================================================================================================================

var global:Global;
var engine:CocoEngine;
var window:HTMLWindow;
var document:HTMLDocument;
var location:HTMLLocation;
var graphics:CocoGraphics;
var webgl:WebGLRenderingContext;
var console:Console;
var __dirname:String;
var ____debugger_current_scene:CocoScene;
var ____debugger_current_clip:Array<CocoClip>;

// ==================================================================================================================================
//	    _   __          __          _______
//	   / | / /___  ____/ /__       / / ___/
//	  /  |/ / __ \/ __  / _ \ __  / /\__ \
//	 / /|  / /_/ / /_/ /  __// /_/ /___/ /
//	/_/ |_/\____/\__,_/\___(_)____//____/
//
// ==================================================================================================================================

#if (TARGET_EXPORT=="nodejs")

class NodeJS_Buffer : Array
{
	public var length:Integer;
	public const INSPECT_MAX_BYTES:Integer=50;

	public function Constructor(var_args:Object) {}
	public function isEncoding(encoding:String):Boolean {}
	public function isBuffer(obj:Object):Boolean {}
	public function byteLength(string:String, optional missing encoding:String):Integer {}
	public function concat(list:Array<Buffer>, optional missing totalLength:Integer):NodeJS_Buffer {}
	public function get(offset:Integer):Object {}
	public function set(offset:Integer, v:Object) {}
	public function write(string:String, optional missing offset:Integer, optional missing length:Integer, optional missing encoding:String):Object {}
	public function toJSON():Array {}
	public function copy(targetBuffer:NodeJS_Buffer, optional missing targetStart:Integer, optional missing sourceStart:Integer, optional missing sourceEnd:Integer):NodeJS_Buffer {}
	public function slice(optional missing start:Integer, optional missing end:Integer):NodeJS_Buffer {}
	public function readUInt8(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readUInt16LE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readUInt16BE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readUInt32LE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readUInt32BE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readInt8(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readInt16LE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readInt16BE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readInt32LE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readInt32BE(offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function readFloatLE(offset:Integer, optional missing noAssert:Boolean):Float {}
	public function readFloatBE(offset:Integer, optional missing noAssert:Boolean):Float {}
	public function readDoubleLE(offset:Integer, optional missing noAssert:Boolean):Float {}
	public function readDoubleBE(offset:Integer, optional missing noAssert:Boolean):Float {}
	public function writeUInt8(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeUInt16LE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeUInt16BE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeUInt32LE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeUInt32BE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeInt8(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeInt16LE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeInt16BE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeInt32LE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeInt32BE(value:Integer, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeFloatLE(value:Float, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeFloatBE(value:Float, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeDoubleLE(value:Float, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function writeDoubleBE(value:Float, offset:Integer, optional missing noAssert:Boolean):Integer {}
	public function fill(value:Object, optional missing offset:Integer, optional missing end:Integer) {}
	public function toString(optional missing encoding:String, optional missing start:Integer, optional missing end:Integer) {}
	public function utf8Slice(optional missing start:Integer, optional missing end:Integer):NodeJS_Buffer {}
	public function binarySlice(optional missing start:Integer, optional missing end:Integer):NodeJS_Buffer {}
	public function asciiSlice(optional missing start:Integer, optional missing end:Integer):NodeJS_Buffer {}
	public function utf8Write(string:String, optional missing offset:Integer):NodeJS_Buffer {}
	public function binaryWrite(string:String, optional missing offset:Integer):NodeJS_Buffer {}
	public function asciiWrite(string:String, optional missing offset:Integer):NodeJS_Buffer {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_Socket
{
	public var bufferSize:Integer;
	public var remoteAddress:String;
	public var remotePort:Integer;
	public var bytesRead:Integer;
	public var bytesWritten:Integer;
	public var localPort:String;
	public var localAddress:String;

	public function connect(port:Integer, host:String, optional missing connectListener:Function) {}
	public function setEncoding(optional missing encoding:String) {}
	public function write(data:String, optional missing encoding:String, optional missing Callback:Function) {}
	public function write(data:ArrayBuffer, optional missing encoding:String, optional missing Callback:Function) {}
	public function end(optional missing data:String, optional missing encoding:String) {}
	public function destroy() {}
	public function pause() {}
	public function resume() {}
	public function setTimeout(timeout:Number, optional missing Callback:Function) {}
	public function setNoDelay(optional missing noDelay:Boolean) {}
	public function setKeepAlive(optional missing enable:Boolean, optional missing initialDelay:Number) {}
	public function address():String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_Request
{
	public var method:String;
	public var url:String;
	public var headers:Dictionary;
	public var trailers:Dictionary;
	public var httpVersion:String;
	public var httpVersionMajor:String;
	public var httpVersionMinor:String;
	public var connection:NodeJS_Socket;
	public var statusCode:Number;
	public var socket:NodeJS_Socket;

	public var __url:String;
	public var __query:String;
	public var __file:String;
	public var __path:String;
	public var __base:String;
	public var __ext:String;
	public var __mime:String;
	public var __arrayBuffer:ArrayBuffer;
	public var __body:String;

	public function setTimeout(msecs:Number, optional missing Callback:Function) {}
	public function read(optional missing count:Number):ArrayBuffer {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_Response
{
	public var statusCode:Integer;
	public var headersSent:Boolean;
	public var sendDate:Boolean;
	public var connection:NodeJS_Socket;
	public var finished:Boolean;
	public var _header:Boolean;

	public function writeContinue() {}
	public function writeHead(statusCode:Integer, optional missing reasonPhrase:String, optional missing headers:Object) {}
	public function setTimeout(msecs:Integer, callbackfn:Function) {}
	public function setHeader(name:String, value:String) {}
	public function setHeader(cookie:String, value:Array<String>) {}
	public function getHeader(name:String):String {}
	public function removeHeader(name:String) {}
	public function write(chunk:String, encoding:String) {}
	public function write(chunk:NodeJS_Buffer, encoding:String) {}
	public function addTrailers(headers:String) {}
	public function end(optional missing data:String, optional missing encoding:String) {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class ReadStream
{
	public function pipe(destination:Object, optional missing params:Object){}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_FS
{
	public function appendFile(filename:String, data:String, encoding:String, optional missing Callback:Function) {}
	public function appendFileSync(filename:String, data:String, encoding:String) {}
	public function chmod(path:String, mode:Number, optional missing Callback:Function) {}
	public function chmodSync(path:String, mode:Number) {}
	public function chown(path:String, uid:Number, gid:Number, optional missing Callback:Function) {}
	public function chownSync(path:String, uid:Number, gid:Number) {}
	public function close(fd:Object, optional missing Callback:Function) {}
	public function closeSync(fd:Object) {}
	public function createReadStream(path:String, optional missing options:Dictionary):ReadStream {}
	public function createWriteStream(path:String, options:Dictionary):WriteStream {}
	public function exists(path:String, Callback:Function) {}
	public function existsSync(path:String) {}
	public function fchmod(fd:Object, mode:Number, optional missing Callback:Function) {}
	public function fchmodSync(fd:Object, mode:Number) {}
	public function fchown(fd:Object, uid:Number, gid:Number, optional missing Callback:Function) {}
	public function fchownSync(fd:Object, uid:Number, gid:Number) {}
	public function fstat(fd:Object, optional missing Callback:Function) {}
	public function fstatSync(fd:Object):Object {}
	public function fsync(fd:Object, optional missing Callback:Function) {}
	public function fsyncSync(fd:Object) {}
	public function futimes(fd:Object, atime:Number, mtime:Number, optional missing Callback:Function) {}
	public function futimesSync(fd:Object, atime:Number, mtime:Number) {}
	public function lchmod(path:String, mode:Number, optional missing Callback:Function) {}
	public function lchmodSync(path:String, mode:Number) {}
	public function lchown(path:String, uid:Number, gid:Number, optional missing Callback:Function) {}
	public function lchownSync(path:String, uid:Number, gid:Number) {}
	public function link(srcpath:String, dstpath:String, optional missing Callback:Function) {}
	public function linkSync(srcpath:String, dstpath:String) {}
	public function lstat(path:String, optional missing Callback:Function) {}
	public function lstatSync(path:String):Object {}
	public function mkdir(path:String, optional missing mode:Number, optional missing Callback:Function) {}
	public function mkdirSync(path:String, optional missing mode:Number) {}
	public function open(path:String, flags:String, optional missing mode:Number, optional missing Callback:Function) {}
	public function openSync(path:String, flags:String, optional missing mode:Number):Object {}
	public function read(fd:Object, buffer:Object, offset:Number, length:Number, position:Number, optional missing Callback:Function) {}
	public function readdir(path:String, optional missing Callback:Function) {}
	public function readdirSync(path:String):Array<String> {}
	public function readFile(filename:String, encodingOrOptions:String, optional missing Callback:Function) {}
	public function readFileSync(filename:String, optional missing encodingOrOptions:String):String {}
	public function readlink(path:String, optional missing Callback:Function) {}
	public function readlinkSync(path:String):String {}
	public function readSync(fd:Object, buffer:Object, offset:Number, length:Number, position:Number):Number {}
	public function realpath(path:String, optional missing cache:Object, optional missing Callback:Function) {}
	public function realpathSync(path:String, optional missing cache:Object):String {}
	public function rename(oldPath:String, newPath:String, optional missing Callback:Function) {}
	public function renameSync(oldPath:String, newPath:String) {}
	public function rmdir(path:String, optional missing Callback:Function) {}
	public function rmdirSync(path:String) {}
	public function stat(path:String, optional missing Callback:Function) {}
	public function statSync(path:String):Object {}
	public function symlink(srcpath:String, dstpath:String, optional missing type:String, optional missing Callback:Function) {}
	public function symlinkSync(srcpath:String, dstpath:String, optional missing type:String) {}
	public function truncate(fd:Object, len:Number, optional missing Callback:Function) {}
	public function truncateSync(fd:Object, len:Number) {}
	public function unlink(path:String, optional missing Callback:Function) {}
	public function unlinkSync(path:String) {}
	public function unwatchFile(filename:String, optional missing listener:Function) {}
	public function utimes(path:String, atime:Number, mtime:Number, optional missing Callback:Function) {}
	public function utimesSync(path:String, atime:Number, mtime:Number) {}
	public function watch(filename:String, options:Object, optional missing listener:Function):Object {}
	public function watchFile(filename:String, options:Object, optional missing listener:Function) {}
	public function write(fd:Object, buffer:Object, offset:Number, length:Number, position:Number, optional missing Callback:Function) {}
	public function writeFile(filename:String, data:String, encodingOrOptions:String, optional missing Callback:Function) {}
	public function writeFileSync(filename:String, data:String, optional missing encodingOrOptions:String) {}
	public function writeSync(fd:Object, buffer:Object, offset:Number, length:Number, position:Number):Number {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_V8Context
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_VM
{
	public function runInThisContext(code:String, optional missing filename:String):String {}
	public function runInNewContext(code:String, optional missing sandbox:Dictionary, optional missing filename:String):String {}
	public function runInContext(code:String, context:NodeJS_V8Context, optional missing filename:String):String {}
	public function createContext(optional missing initSandbox:Dictionary):NodeJS_V8Context {}
	public function createScript(code:String, optional missing filename:String):NodeJS_Script {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_Script
{
	public function runInThisContext():String {}
	public function runInNewContext(optional missing sandbox:Dictionary):String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_Path
{
	public var sep:String;
	public function normalize(path:String):String {}
	public function join(var_args:String):String {}
	public function resolve(fromPath:String, optional missing toPath:String):String {}
	public function relative(fromPath:String, toPath:String):String {}
	public function dirname(path:String):String {}
	public function basename(path:String, optional missing ext:String):String {}
	public function extname(path:String):String {}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_QueryString
{
	public function stringify(obj:Dictionary, optional missing sep:String = "&", optional missing eq:String = "="):String {}
	public function parse(str:String, optional missing sep:String, optional missing eq:String, optional missing options:Object):Dictionary {}
	public function escape(str:String):String {}
	public function unescape(str:String):String {}
	public function unescapeBuffer(s:ArrayBuffer, decodeSpaces:Boolean) {}
}

// ==================================================================================================================================
//	   ______                 _   __          __
//	  / ____/___  _________  / | / /___  ____/ /__
//	 / /   / __ \/ ___/ __ \/  |/ / __ \/ __  / _ \
//	/ /___/ /_/ / /__/ /_/ / /|  / /_/ / /_/ /  __/
//	\____/\____/\___/\____/_/ |_/\____/\__,_/\___/
//
// ==================================================================================================================================

////////////////////////////////////////////////////////////////////////////////////////////////////
struct RSA_CERT
{
	PUBLIC:String;
	PRIVATE:String;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class NodeJS_Coconut2D
{
	public function Constructor() {}
	public function Destructor() {}

	public static function SELECT(database:String, SQL:String):ArrayBuffer {}
	public static function UPDATE(data:ArrayBuffer):ArrayBuffer {}
	public static function SendEmail(server:String, server_login:String, server_pass:String, from_name:String, from_email:String, to:String, bcc:String, subject:String, body:String, attachment:String):Boolean {}
	public static function MD5(text:String):String {}
	public static function GetGUID():String {}
	public static function FileExists(path:String):Boolean {}
	public static function ReadFile(path:String):String {}
	public static function ImageToBase64(path:String):String {}
	public static function BuildPath(path:String) {}
	public static function DeleteFolder(path:String):Boolean {}
	public static function SQLiteExec(filename:String, SQL:String):String {}
	public static function XMLHttp(method:String, url:String, content_type:String, content:String):String {}
	public static function QRCodeEncode(data:String):String {}
	public static function QRCodeDecode(b64:String):String {}
	public static function CreatePassBook(TemplateFolder:String, OutputFolder:String, PassbookFileName:String, JSONData:String, IntermediateCertificate:String, PassbookCertificate:String, Callback:Function):Boolean {}
	public static function CreateFormGuard(Code:String, width:Integer, height:Integer):String {}

	public static function RSA_Create_Certificate(Bits:Integer, Exp:Integer):RSA_CERT {}
	public static function RSA_Save_PrivateKey(fileName:String, optional password:String):Boolean {}
	public static function RSA_Save_PublicKey(fileName:String):Boolean {}
	public static function RSA_Load_PrivateKey(fileName:String, optional password:String):String {}
	public static function RSA_Load_PublicKey(fileName:String):Boolean {}
	public static function RSA_Load_Certificate(fileName:String, optional password:String):Boolean {}
	public static function RSA_Load_CertificateFromString(fileName:String, optional password:String):Boolean {}
	public static function RSA_Public_Encrypt(PublicKey:String, Data:String):String {}
	public static function RSA_Private_Decrypt(PrivateKey:String, EncryptedData:String):String {}

}

////////////////////////////////////////////////////////////////////////////////////////////////////
enum SQLX_SCHEMA_ENUM
{
	SQLX_TABLES			= 0x1,
	SQLX_VIEWS			= 0x2,
	SQLX_COLUMNS		= 0x3,
	SQLX_FOREIGN_KEYS	= 0x4
};

////////////////////////////////////////////////////////////////////////////////////////////////////
enum SQLX_RECORD_STATUS
{
	RECORD_NO_RECORD	= 0,
	RECORD_UNCHANGED	= 1,
	RECORD_CHANGED		= 2,
	RECORD_INSERTED		= 4,
	RECORD_DELETED		= 8,
	RECORD_EDITABLE		= RECORD_UNCHANGED|RECORD_CHANGED|RECORD_INSERTED,
	RECORD_ALL			= RECORD_UNCHANGED|RECORD_CHANGED|RECORD_DELETED|RECORD_INSERTED
};

////////////////////////////////////////////////////////////////////////////////////////////////////
class DataField
{
	public function Constructor() {}
	public function Destructor() {}

	public var value:String;			// Read/Write
	public var lookupValue:String;		// Read/Write

	public var intValue:Integer;
	public var uintValue:Integer;
	public var floatValue:Float;
	public var doubleValue:Number;
	public var boolValue:Boolean;

	public var ORDINAL:Integer;
	public var NAME:String;
	public var BASECOLUMNNAME:String;
	public var BASETABLENAME:String;
	public var ID:String;
	public var TYPE:Integer;
	public var LCID:String;
	public var PRECISION:Integer;
	public var SCALE:Integer;
	public var SIZE:Integer;
	public var LENGTH:Integer;
	public var FLAGS:Integer;
	public var DECLARED_TYPE:String;
	public var LOOKUP_TABLE:String;
	public var LOOKUP_ID_COLUMN:String;
	public var LOOKUP_VALUE_COLUMN:String;
	public var DEFAULTVALUE:String;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
class Dataset
{
	public var EOF:Boolean;
	public var fieldCount:Integer;
	public var recordIndex:Integer;

	public function Constructor() {}
	public function Destructor() {}

	// Driver
	public function getDriver():String { }

	// Open / Query / Requery / Close
	public function openSchema(connectionString:String, type:SQLX_SCHEMA_ENUM):Boolean { }
	public function open(connectionString:String, SQL:String):Boolean { }
	public function reopen():Boolean { }
	public function select(SQL:String):Boolean { }
	public function exec(SQL:String):Boolean { }
	public function requery(useBookmark:Boolean):Boolean { }
	public function sort(fieldName:String, ascending:Boolean):Boolean { }
	public function close() { }

	// Indexes
	public function addIndex(csFieldNames:String):Boolean { }
	public function removeIndex(indexName:String):Boolean { }
	public function reindex():Boolean { }
	public function locate(fieldName:String, fieldValue:String):Boolean { }

	// Navigation
	public function move(recordIndex:Integer):Boolean { }
	public function moveFirst():Boolean { }
	public function moveLast():Boolean { }
	public function moveNext():Boolean { }
	public function movePrev():Boolean { }
	public function moved():Boolean { }

	// Navigation of editable records
	public function first():Boolean { }
	public function next():Boolean { }

	// Editing
	public function status():SQLX_RECORD_STATUS { }
	public function field(name:String):DataField { }
	public function fieldByIndex(ordinal:Integer):DataField { }
	public function fieldByName(name:String):DataField { }
	public function DEFAULT(Ordinal:Integer):String {}
	public function KEY_COLUMN_ORDINAL():Integer {}

	public function getValue(RecordIndex:Integer, Ordinal:Integer):String { }
	public function putValue(RecordIndex:Integer, Ordinal:Integer, Value:String):Boolean { }
	public function insertRecord():Boolean { }
	public function deleteRecord():Boolean { }
	public function deleteRecords(FieldName:String, FieldValue:String, Normalize:Boolean):Boolean { }
	public function update():Boolean { }

	// Transactions & Bookmarks
	public function transactionBegin():Boolean { }
	public function transactionCommit():Boolean { }
	public function transactionRollback(savepointName:String):Boolean { }
	public function savepointCreate(name:String):Boolean { }
	public function savepointRelease(name:String):Boolean { }
	public function getBookmark():String { }
	public function setBookmark(bookmark:String):Boolean { }
	public function modified():Boolean { }

	// Errors
	public function getLastError():String { }

	// Data binding for Grids
	public function recordCount(optional status:SQLX_RECORD_STATUS = 7):Integer { } //SQLX_RECORD_STATUS.RECORD_EDITABLE
	public function row_to_record(status:SQLX_RECORD_STATUS):Integer { }
	public function getMatrix(Row:Integer, Col:Integer):String { }
	public function putMatrix(Row:Integer, Col:Integer, Value:String):Boolean { }

	// Persistence
	public function loadBase64(data:String):Boolean { }
	public function loadXML(data:String):Boolean { }
	public function loadJSON(data:String):Boolean { }
	public function toJSON():String { }
	public function toXML():String { }
	public function toBase64():String { }
	public function toArrayBuffer():ArrayBuffer { }
	public function openFromArrayBuffer(data:ArrayBuffer):Boolean { }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
var Coconut2D:NodeJS_Coconut2D;
var __fs:NodeJS_FS;
var __vm:NodeJS_VM;
var __path:NodeJS_Path;
var __qs:NodeJS_QueryString;

#endif

#if (EMS_BOX2D)

enum b2ManifoldType
{
	e_circles 			= 0,
	e_faceA   			= 1,
	e_faceB   			= 2
};

enum b2BodyType
{
	b2_staticBody 		= 0,
	b2_kinematicBody 	= 1,
	b2_dynamicBody 		= 2
};


enum b2JointType
{
	e_unknownJoint		= 0,
	e_revoluteJoint     = 1,
	e_prismaticJoint    = 2,
	e_distanceJoint     = 3,
	e_pulleyJoint       = 4,
	e_mouseJoint        = 5,
	e_gearJoint         = 6,
	e_wheelJoint        = 7,
    e_weldJoint         = 8,
	e_frictionJoint     = 9,
	e_ropeJoint         = 10
};

struct b2Manifold
{
	points: Array<b2ManifoldPoint>;
	localNormal:b2Vec2;
	localPoint:b2Vec2;
	type:b2ManifoldType;
	pointCount:Integer;
};

struct b2MassData
{
	mass:Float;
	center:b2Vec2;
	I:Float;
};

struct b2RayCastInput
{
	p1:b2Vec2;
	p2:b2Vec2;
	maxFraction:Float;
};

struct b2RayCastOutput
{
	normal:b2Vec2;
	fraction:Float;
};

struct b2ContactImpulse
{
	normalImpulses:Array<Float>;
	tangentImpulses:Array<Float>;
	count:Integer;
};

class b2WorldManifold
{
	public var normal:b2Vec2;
	public var points:Array<b2Vec2>;
	public function Initialize(manifold:b2Manifold, xfA:b2Transform, radiusA:Float, xfB:b2Transform, radiusB:Float) {}
};

class b2ContactFilter
{
	public virtual function ShouldCollide(fixtureA:b2Fixture, fixtureB:b2Fixture) :Boolean {}
};

function createPolygonShape(vertices:Array<b2Vec2>):b2PolygonShape  {}


// BEGIN EMSCRIPTEN EXTERNS FOR EMS_BOX2D //

// ==================================================================================================================================
//	    ____            ___   ____     ____  __               _              ______            _
//	   / __ )____  _  _|__ \ / __ \   / __ \/ /_  __  _______(_)_________   / ____/___  ____ _(_)___  ___
//	  / __  / __ \| |/_/_/ // / / /  / /_/ / __ \/ / / / ___/ / ___/ ___/  / __/ / __ \/ __ `/ / __ \/ _ \
//	 / /_/ / /_/ />  </ __// /_/ /  / ____/ / / / /_/ (__  ) / /__(__  )  / /___/ / / / /_/ / / / / /  __/
//	/_____/\____/_/|_/____/_____/  /_/   /_/ /_/\__, /____/_/\___/____/  /_____/_/ /_/\__, /_/_/ /_/\___/
//	                                           /____/                                /____/
// ==================================================================================================================================

emscripten class b2ContactManager
{
	public function get_m_contactFilter() : b2ContactFilter {}
	public function get_m_contactCount() : Integer {}
	public function set_m_contactFilter(arg0:b2ContactFilter) {}
	public function Constructor() {}
	public function AddPair(arg0:Object, arg1:Object) {}
	public function set_m_allocator(arg0:b2BlockAllocator) {}
	public function set_m_contactCount(arg0:Integer) {}
	public function Collide() {}
	public function set_m_contactList(arg0:b2Contact) {}
	public function FindNewContacts() {}
	public function get_m_contactListener() : b2ContactListener {}
	public function Destructor() {}
	public function set_m_contactListener(arg0:b2ContactListener) {}
	public function get_m_broadPhase() : b2BroadPhase {}
	public function Destroy(arg0:b2Contact) {}
	public function set_m_broadPhase(arg0:b2BroadPhase) {}
	public function get_m_contactList() : b2Contact {}
	public function get_m_allocator() : b2BlockAllocator {}
}

emscripten class b2DistanceJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() : Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetFrequency() : Float {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetLength() : Float {}
	public function GetDampingRatio() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function Destructor() {}
	public function Dump() {}
	public function GetType() : Integer {}
	public function Constructor() {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function SetLength(arg0:Float) {}
	public function IsActive() : Boolean {}
}

emscripten class b2Fixture
{
	public function GetRestitution() : Float {}
	public function SetFilterData(arg0:b2Filter) {}
	public function SetFriction(arg0:Float) {}
	public function Constructor() {}
	public function GetShape() : b2Shape {}
	public function SetRestitution(arg0:Float) {}
	public function GetBody() : b2Body {}
	public function GetNext() : b2Fixture {}
	public function GetFriction() : Float {}
	public function GetUserData() : Object {}
	public function SetDensity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function SetSensor(arg0:Boolean) {}
	public function GetAABB(arg0:Integer) : b2AABB {}
	public function TestPoint(arg0:b2Vec2) : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function Destructor() {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:Integer) : Boolean {}
	public function Refilter() {}
	public function Dump(arg0:Integer) {}
	public function GetFilterData() : b2Filter {}
	public function IsSensor() : Boolean {}
	public function GetType() : Integer {}
	public function GetDensity() : Float {}
}

emscripten class b2MouseJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() : Object {}
	public function SetMaxForce(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function Constructor() {}
	public function GetNext() : b2Joint {}
	public function GetMaxForce() : Float {}
	public function GetTarget() : b2Vec2 {}
	public function GetFrequency() : Float {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetDampingRatio() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function Destructor() {}
	public function Dump() {}
	public function SetTarget(arg0:b2Vec2) {}
	public function GetType() : Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function IsActive() : Boolean {}
}

emscripten class b2PulleyJoint
{
	public function GetBodyA() : b2Body {}
	public function Destructor() {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetType() : Integer {}
	public function GetGroundAnchorB() : b2Vec2 {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function Dump() {}
	public function GetGroundAnchorA() : b2Vec2 {}
	public function GetLengthB() : Float {}
	public function GetUserData() : Object {}
	public function GetLengthA() : Float {}
	public function GetBodyB() : b2Body {}
	public function GetCollideConnected() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function Constructor() {}
	public function IsActive() : Boolean {}
	public function GetRatio() : Float {}
}

emscripten class b2BroadPhase
{
	public function GetTreeQuality() : Float {}
	public function GetFatAABB(arg0:Integer) : b2AABB {}
	public function GetUserData(arg0:Integer) : Object {}
	public function Destructor() {}
	public function GetTreeHeight() : Integer {}
	public function Constructor() {}
	public function GetProxyCount() : Integer {}
	public function GetTreeBalance() : Integer {}
	public function TestOverlap(arg0:Integer, arg1:Integer) : Boolean {}
	public function TouchProxy(arg0:Integer) {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) : Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) {}
	public function DestroyProxy(arg0:Integer) {}
}

emscripten class b2World
{
	public function QueryAABB(arg0:b2QueryCallback, arg1:b2AABB) {}
	public function SetSubStepping(arg0:Boolean) {}
	public function GetTreeQuality() : Float {}
	public function GetTreeHeight() : Integer {}
	public function GetProfile() : b2Profile {}
	public function GetTreeBalance() : Integer {}
	public function GetSubStepping() : Boolean {}
	public function GetContactManager() : b2ContactManager {}
	public function SetContactListener(arg0:b2ContactListener) {}
	public function DrawDebugData() {}
	public function SetContinuousPhysics(arg0:Boolean) {}
	public function SetGravity(arg0:b2Vec2) {}
	public function GetBodyCount() : Integer {}
	public function GetAutoClearForces() : Boolean {}
	public function GetContinuousPhysics() : Boolean {}
	public function GetJointList() : b2Joint {}
	public function CreateBody(arg0:b2BodyDef) : b2Body {}
	public function GetBodyList() : b2Body {}
	public function SetDestructionListener(arg0:b2DestructionListener) {}
	public function DestroyJoint(arg0:b2Joint) {}
	public function Constructor(v:b2Vec2) {}
	public function GetJointCount() : Integer {}
	public function Step(arg0:Float, arg1:Integer, arg2:Integer) {}
	public function ClearForces() {}
	public function GetWarmStarting() : Boolean {}
	public function SetAllowSleeping(arg0:Boolean) {}
	public function DestroyBody(arg0:b2Body) {}
	public function GetAllowSleeping() : Boolean {}
	public function CreateJoint(arg0:b2JointDef) : b2Joint {}
	public function GetProxyCount() : Integer {}
	public function RayCast(arg0:b2RayCastCallback, arg1:b2Vec2, arg2:b2Vec2) {}
	public function IsLocked() : Boolean {}
	public function GetContactList() : b2Contact {}
	public function SetDebugDraw(arg0:b2Draw) {}
	public function Destructor() {}
	public function Dump() {}
	public function SetAutoClearForces(arg0:Boolean) {}
	public function GetGravity() : b2Vec2 {}
	public function GetContactCount() : Integer {}
	public function SetWarmStarting(arg0:Boolean) {}
	public function SetContactFilter(arg0:b2ContactFilter) {}
}

emscripten class b2PrismaticJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetUserData() : Object {}
	public function GetLocalAxisA() : b2Vec2 {}
	public function GetLowerLimit() : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function Constructor() {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetMotorSpeed() : Float {}
	public function SetMaxMotorForce(arg0:Float) {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetMaxMotorForce() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function GetJointSpeed() : Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Destructor() {}
	public function GetReferenceAngle() : Float {}
	public function Dump() {}
	public function GetMotorForce(arg0:Float) : Float {}
	public function GetJointTranslation() : Float {}
	public function GetType() : Integer {}
	public function IsLimitEnabled() : Boolean {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetUpperLimit() : Float {}
	public function IsActive() : Boolean {}
	public function GetAnchorB() : b2Vec2 {}
}

emscripten class b2CircleShape
{
	public function Destructor() {}
	public function GetType() : Integer {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function GetVertex(arg0:Integer) : b2Vec2 {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetSupportVertex(arg0:b2Vec2) : b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetVertexCount() : Integer {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function Constructor() {}
	public function GetSupport(arg0:b2Vec2) : Integer {}
	public function set_m_p(arg0:b2Vec2) {}
	public function get_m_p() : b2Vec2 {}
}

emscripten class b2WheelJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetUserData() : Object {}
	public function GetDefinition(arg0:b2WheelJointDef) {}
	public function GetLocalAxisA() : b2Vec2 {}
	public function SetSpringDampingRatio(arg0:Float) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function GetSpringFrequencyHz() : Float {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetMotorSpeed() : Float {}
	public function GetMotorTorque(arg0:Float) : Float {}
	public function Constructor() {}
	public function IsMotorEnabled() : Boolean {}
	public function GetJointTranslation() : Float {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetSpringDampingRatio() : Float {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() : Boolean {}
	public function GetJointSpeed() : Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Destructor() {}
	public function Dump() {}
	public function GetMaxMotorTorque() : Float {}
	public function GetType() : Integer {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function SetSpringFrequencyHz(arg0:Float) {}
	public function IsActive() : Boolean {}
}

emscripten class b2Draw
{
	public function Destructor() {}
	public function AppendFlags(arg0:Integer) {}
	public function DrawTransform(arg0:b2Transform) {}
	public function ClearFlags(arg0:Integer) {}
	public function DrawPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawSolidCircle(arg0:b2Vec2, arg1:Float, arg2:b2Vec2, arg3:b2Color) {}
	public function DrawSolidPolygon(arg0:b2Vec2, arg1:Integer, arg2:b2Color) {}
	public function DrawCircle(arg0:b2Vec2, arg1:Float, arg2:b2Color) {}
	public function SetFlags(arg0:Integer) {}
	public function DrawSegment(arg0:b2Vec2, arg1:b2Vec2, arg2:b2Color) {}
	public function Constructor() {}
	public function GetFlags() : Integer {}
}

emscripten class b2Joint
{
	public function GetNext() : b2Joint {}
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetUserData() : Object {}
	public function GetType() : Integer {}
	public function SetUserData(arg0:Object) {}
	public function GetCollideConnected() : Boolean {}
	public function Dump() {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function IsActive() : Boolean {}
}

emscripten class b2GearJoint
{
	public function GetJoint1() : b2Joint {}
	public function Constructor() {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetJoint2() : b2Joint {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function Dump() {}
	public function Destructor() {}
	public function SetRatio(arg0:Float) {}
	public function GetType() : Integer {}
	public function GetUserData() : Object {}
	public function GetBodyB() : b2Body {}
	public function GetCollideConnected() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetBodyA() : b2Body {}
	public function GetNext() : b2Joint {}
	public function IsActive() : Boolean {}
	public function GetRatio() : Float {}
}

emscripten class b2RayCastCallback
{
	public function ReportFixture(arg0:b2Fixture, arg1:b2Vec2, arg2:b2Vec2, arg3:Float) : Float {}
	public function Constructor() {}
	public function Destructor() {}
}

emscripten class b2DynamicTree
{
	public function Destructor() {}
	public function Constructor() {}
	public function GetFatAABB(arg0:Integer) : b2AABB {}
	public function GetUserData(arg0:Integer) : Object {}
	public function GetMaxBalance() : Integer {}
	public function GetHeight() : Integer {}
	public function GetAreaRatio() : Float {}
	public function RebuildBottomUp() {}
	public function CreateProxy(arg0:b2AABB, arg1:Object) : Integer {}
	public function MoveProxy(arg0:Integer, arg1:b2AABB, arg2:b2Vec2) : Boolean {}
	public function Validate() {}
	public function DestroyProxy(arg0:Integer) {}
}

emscripten class b2WeldJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function SetFrequency(arg0:Float) {}
	public function GetUserData() : Object {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetNext() : b2Joint {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetFrequency() : Float {}
	public function Constructor() {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetDampingRatio() : Float {}
	public function GetCollideConnected() : Boolean {}
	public function Destructor() {}
	public function GetReferenceAngle() : Float {}
	public function Dump() {}
	public function GetType() : Integer {}
	public function SetDampingRatio(arg0:Float) {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function IsActive() : Boolean {}
}

emscripten class b2RevoluteJoint
{
	public function GetBodyA() : b2Body {}
	public function GetBodyB() : b2Body {}
	public function GetUserData() : Object {}
	public function GetLowerLimit() : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function Constructor() {}
	public function GetNext() : b2Joint {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function SetMotorSpeed(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function GetJointAngle() : Float {}
	public function GetMotorSpeed() : Float {}
	public function GetMotorTorque(arg0:Float) : Float {}
	public function IsLimitEnabled() : Boolean {}
	public function EnableLimit(arg0:Boolean) {}
	public function IsMotorEnabled() : Boolean {}
	public function SetUserData(arg0:Object) {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function SetMaxMotorTorque(arg0:Float) {}
	public function GetCollideConnected() : Boolean {}
	public function GetJointSpeed() : Float {}
	public function EnableMotor(arg0:Boolean) {}
	public function Destructor() {}
	public function GetReferenceAngle() : Float {}
	public function Dump() {}
	public function SetLimits(arg0:Float, arg1:Float) {}
	public function GetMaxMotorTorque() : Float {}
	public function GetType() : Integer {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function GetUpperLimit() : Float {}
	public function IsActive() : Boolean {}
	public function GetAnchorB() : b2Vec2 {}
}

emscripten class b2Timer
{
	public function Constructor() {}
	public function Reset() {}
	public function Destructor() {}
	public function GetMilliseconds() : Float {}
}

emscripten class b2ContactListener
{
	public function Destructor() {}
	public function Constructor() {}
	public function EndContact(arg0:b2Contact) {}
	public function BeginContact(arg0:b2Contact) {}
	public function PreSolve(arg0:b2Contact, arg1:b2Manifold) {}
	public function PostSolve(arg0:b2Contact, arg1:b2ContactImpulse) {}
}

emscripten class b2ChainShape
{
	public function Destructor() {}
	public function GetType() : Integer {}
	public function CreateChain(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function get_m_vertices() : b2Vec2 {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function get_m_count() : Integer {}
	public function GetChildEdge(arg0:b2EdgeShape, arg1:Integer) {}
	public function Constructor() {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function SetPrevVertex(arg0:b2Vec2) {}
	public function CreateLoop(arg0:b2Vec2, arg1:Integer) {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function SetNextVertex(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
}

emscripten class b2QueryCallback
{
	public function ReportFixture(arg0:b2Fixture) : Boolean {}
	public function Destructor() {}
	public function Constructor() {}
}

emscripten class b2BlockAllocator
{
	public function Destructor() {}
	public function Clear() {}
	public function Free(arg0:Object, arg1:Integer) {}
	public function Allocate(arg0:Integer) : Object {}
	public function Constructor() {}
}

emscripten class b2RopeJoint
{
	public function GetNext() : b2Joint {}
	public function Destructor() {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function GetMaxLength() : Float {}
	public function GetBodyA() : b2Body {}
	public function GetCollideConnected() : Boolean {}
	public function GetUserData() : Object {}
	public function GetType() : Integer {}
	public function GetBodyB() : b2Body {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function Dump() {}
	public function SetMaxLength(arg0:Float) {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function Constructor() {}
	public function GetLimitState() : Integer {}
	public function IsActive() : Boolean {}
}

emscripten class b2PolygonShape : b2Shape
{
	public function Destructor() {}
	public function Set(arg0:b2Vec2, arg1:Integer) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetVertex(arg0:Integer) : b2Vec2 {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function SetAsBox(arg0:Float, arg1:Float) {}
	public function SetAsBox(arg0:Float, arg1:Float, arg2:b2Vec2, arg3:Float) {}
	public function set_m_centroid(arg0:b2Vec2) {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function set_m_vertexCount(arg0:Integer) {}
	public function GetVertexCount() : Integer {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function GetType() : Integer {}
	public function Constructor() {}
	public function get_m_vertexCount() : Integer {}
	public function get_m_centroid() : b2Vec2 {}
}

emscripten class b2EdgeShape
{
	public function Destructor() {}
	public function Set(arg0:b2Vec2, arg1:b2Vec2) {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function get_m_radius() : Float {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetType() : Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
	public function Constructor() {}
}

emscripten class b2Contact
{
	public function GetNext() : b2Contact {}
	public function SetEnabled(arg0:Boolean) {}
	public function GetWorldManifold(arg0:b2WorldManifold) {}
	public function GetRestitution() : Float {}
	public function ResetFriction() {}
	public function GetFriction() : Float {}
	public function IsTouching() : Boolean {}
	public function IsEnabled() : Boolean {}
	public function GetFixtureB() : b2Fixture {}
	public function SetFriction(arg0:Float) {}
	public function GetFixtureA() : b2Fixture {}
	public function GetChildIndexA() : Integer {}
	public function GetChildIndexB() : Integer {}
	public function Evaluate(arg0:b2Manifold, arg1:b2Transform, arg2:b2Transform) {}
	public function SetRestitution(arg0:Float) {}
	public function GetManifold() : b2Manifold {}
	public function ResetRestitution() {}
}

emscripten class b2Shape
{
	public function get_m_radius() : Float {}
	public function ComputeMass(arg0:b2MassData, arg1:Float) {}
	public function set_m_radius(arg0:Float) {}
	public function Clone(arg0:b2BlockAllocator) : b2Shape {}
	public function GetType() : Integer {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput, arg2:b2Transform, arg3:Integer) : Boolean {}
	public function ComputeAABB(arg0:b2AABB, arg1:b2Transform, arg2:Integer) {}
	public function GetChildCount() : Integer {}
	public function TestPoint(arg0:b2Transform, arg1:b2Vec2) : Boolean {}
}

emscripten class b2Body
{
	public function GetAngle() : Float {}
	public function GetUserData() : Object {}
	public function IsSleepingAllowed() : Boolean {}
	public function SetAngularDamping(arg0:Float) {}
	public function SetActive(arg0:Boolean) {}
	public function SetGravityScale(arg0:Float) {}
	public function SetUserData(arg0:Object) {}
	public function GetAngularVelocity() : Float {}
	public function GetFixtureList() : b2Fixture {}
	public function ApplyForce(arg0:b2Vec2, arg1:b2Vec2) {}
	public function GetLocalPoint(arg0:b2Vec2) : b2Vec2 {}
	public function SetLinearVelocity(arg0:b2Vec2) {}
	public function GetJointList() : b2JointEdge {}
	public function GetLinearVelocity() : b2Vec2 {}
	public function GetNext() : b2Body {}
	public function SetSleepingAllowed(arg0:Boolean) {}
	public function SetTransform(arg0:b2Vec2, arg1:Float) {}
	public function GetMass() : Float {}
	public function SetAngularVelocity(arg0:Float) {}
	public function GetMassData(arg0:b2MassData) {}
	public function GetLinearVelocityFromWorldPoint(arg0:b2Vec2) : b2Vec2 {}
	public function ResetMassData() {}
	public function ApplyForceToCenter(arg0:b2Vec2) {}
	public function ApplyTorque(arg0:Float) {}
	public function IsAwake() : Boolean {}
	public function SetType(arg0:b2BodyType) {}
	public function CreateFixture(arg0:b2FixtureDef) : b2Fixture {}
	public function CreateFixture(arg0:b2Shape, arg1:Float) : b2Fixture {}
	public function SetMassData(arg0:b2MassData) {}
	public function GetTransform() : b2Transform {}
	public function GetWorldCenter() : b2Vec2 {}
	public function GetAngularDamping() : Float {}
	public function ApplyLinearImpulse(arg0:b2Vec2, arg1:b2Vec2) {}
	public function IsFixedRotation() : Boolean {}
	public function GetLocalCenter() : b2Vec2 {}
	public function GetWorldVector(arg0:b2Vec2) : b2Vec2 {}
	public function GetLinearVelocityFromLocalPoint(arg0:b2Vec2) : b2Vec2 {}
	public function GetContactList() : b2ContactEdge {}
	public function GetWorldPoint(arg0:b2Vec2) : b2Vec2 {}
	public function SetAwake(arg0:Boolean) {}
	public function GetLinearDamping() : Float {}
	public function IsBullet() : Boolean {}
	public function GetWorld() : b2World {}
	public function GetLocalVector(arg0:b2Vec2) : b2Vec2 {}
	public function SetLinearDamping(arg0:Float) {}
	public function Dump() {}
	public function SetBullet(arg0:Boolean) {}
	public function GetType() : Integer {}
	public function GetGravityScale() : Float {}
	public function DestroyFixture(arg0:b2Fixture) {}
	public function GetInertia() : Float {}
	public function IsActive() : Boolean {}
	public function SetFixedRotation(arg0:Boolean) {}
	public function ApplyAngularImpulse(arg0:Float) {}
	public function GetPosition() : b2Vec2 {}
}

emscripten class b2FrictionJoint
{
	public function SetMaxTorque(arg0:Float) {}
	public function GetMaxForce() : Float {}
	public function GetAnchorA() : b2Vec2 {}
	public function GetReactionTorque(arg0:Float) : Float {}
	public function Dump() {}
	public function Destructor() {}
	public function GetCollideConnected() : Boolean {}
	public function GetUserData() : Object {}
	public function GetType() : Integer {}
	public function SetMaxForce(arg0:Float) {}
	public function GetBodyB() : b2Body {}
	public function GetLocalAnchorA() : b2Vec2 {}
	public function Constructor() {}
	public function GetLocalAnchorB() : b2Vec2 {}
	public function SetUserData(arg0:Object) {}
	public function GetAnchorB() : b2Vec2 {}
	public function GetReactionForce(arg0:Float) : b2Vec2 {}
	public function GetBodyA() : b2Body {}
	public function GetNext() : b2Joint {}
	public function GetMaxTorque() : Float {}
	public function IsActive() : Boolean {}
}

emscripten class b2StackAllocator
{
	public function GetMaxAllocation() : Integer {}
	public function Destructor() {}
	public function Constructor() {}
	public function Allocate(arg0:Integer) : Object {}
	public function Free(arg0:Object) {}
}

emscripten class b2DestructionListener
{
	public function Destructor() {}
	public function SayGoodbye(arg0:b2Joint) {}
	public function Constructor() {}
}

emscripten class b2Filter
{
	public function Destructor() {}
	public function set_maskBits(arg0:Integer) {}
	public function set_categoryBits(arg0:Integer) {}
	public function get_groupIndex() : Integer {}
	public function set_groupIndex(arg0:Integer) {}
	public function get_maskBits() : Integer {}
	public function Constructor() {}
	public function get_categoryBits() : Integer {}
}

emscripten class b2RopeJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_maxLength() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
	public function set_maxLength(arg0:Float) {}
}

emscripten class b2FrictionJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function get_maxForce() : Float {}
	public function Constructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function set_maxForce(arg0:Float) {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function set_maxTorque(arg0:Float) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_maxTorque() : Float {}
}

emscripten class b2BodyDef
{
	public function get_linearDamping() : Float {}
	public function get_awake() : Boolean {}
	public function get_type() : b2BodyType {}
	public function get_allowSleep() : Boolean {}
	public function set_position(arg0:b2Vec2) {}
	public function set_linearVelocity(arg0:b2Vec2) {}
	public function Constructor() {}
	public function get_bullet() : Boolean {}
	public function get_userData() : Object {}
	public function set_angularDamping(arg0:Float) {}
	public function set_fixedRotation(arg0:Boolean) {}
	public function set_allowSleep(arg0:Boolean) {}
	public function get_gravityScale() : Float {}
	public function set_angularVelocity(arg0:Float) {}
	public function set_userData(arg0:Object) {}
	public function get_position() : b2Vec2 {}
	public function Destructor() {}
	public function set_type(arg0:b2BodyType) {}
	public function set_gravityScale(arg0:Float) {}
	public function get_angularDamping() : Float {}
	public function set_bullet(arg0:Boolean) {}
	public function set_active(arg0:Boolean) {}
	public function set_angle(arg0:Float) {}
	public function get_angle() : Float {}
	public function get_angularVelocity() : Float {}
	public function get_linearVelocity() : b2Vec2 {}
	public function get_active() : Boolean {}
	public function set_linearDamping(arg0:Float) {}
	public function get_fixedRotation() : Boolean {}
	public function set_awake(arg0:Boolean) {}
}

emscripten class b2Vec2
{
	public function Normalize() : Float {}
	public function set_x(arg0:Float) {}
	public function Constructor(x:Float, y:Float) {}
	public function Set(arg0:Float, arg1:Float) {}
	public function get_x() : Float {}
	public function get_y() : Float {}
	public function set_y(arg0:Float) {}
	public function IsValid() : Boolean {}
	public function Skew() : b2Vec2 {}
	public function LengthSquared() : Float {}
	public function op_add(arg0:b2Vec2) {}
	public function SetZero() {}
	public function Length() : Float {}
	public function Destructor() {}
	public function op_mul(arg0:Float) {}
	public function op_sub() : b2Vec2 {}
}

emscripten class b2Vec3
{
	public function Destructor() {}
	public function set_z(arg0:Float) {}
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function get_z() : Float {}
	public function op_add(arg0:b2Vec3) {}
	public function SetZero() {}
	public function Constructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public function op_mul(arg0:Float) {}
	public function op_sub() : b2Vec3 {}
}

emscripten class b2AABB
{
	public function Destructor() {}
	public function Constructor() {}
	public function set_upperBound(arg0:b2Vec2) {}
	public function IsValid() : Boolean {}
	public function Contains(arg0:b2AABB) : Boolean {}
	public function GetExtents() : b2Vec2 {}
	public function GetCenter() : b2Vec2 {}
	public function get_upperBound() : b2Vec2 {}
	public function GetPerimeter() : Float {}
	public function Combine(arg0:b2AABB) {}
	public function Combine(arg0:b2AABB, arg1:b2AABB) {}
	public function RayCast(arg0:b2RayCastOutput, arg1:b2RayCastInput) : Boolean {}
	public function set_lowerBound(arg0:b2Vec2) {}
	public function get_lowerBound() : b2Vec2 {}
}

emscripten class b2FixtureDef
{
	public function Destructor() {}
	public function get_isSensor() : Boolean {}
	public function set_userData(arg0:Object) {}
	public function set_shape(arg0:b2Shape) {}
	public function get_density() : Float {}
	public function get_shape() : b2Shape {}
	public function Constructor() {}
	public function set_density(arg0:Float) {}
	public function set_restitution(arg0:Float) {}
	public function get_restitution() : Float {}
	public function set_isSensor(arg0:Boolean) {}
	public function get_filter() : b2Filter {}
	public function get_friction() : Float {}
	public function set_friction(arg0:Float) {}
	public function get_userData() : Object {}
	public function set_filter(arg0:b2Filter) {}
}

emscripten class b2PrismaticJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() : Float {}
	public function get_enableMotor() : Boolean {}
	public function get_referenceAngle() : Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() : b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Constructor() {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function set_lowerTranslation(arg0:Float) {}
	public function get_upperTranslation() : Float {}
	public function get_enableLimit() : Boolean {}
	public function Destructor() {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_upperTranslation(arg0:Float) {}
	public function get_maxMotorForce() : Float {}
	public function set_maxMotorForce(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function get_lowerTranslation() : Float {}
	public function set_localAxisA(arg0:b2Vec2) {}
}

emscripten class b2WheelJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_motorSpeed() : Float {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_localAxisA() : b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
	public function Constructor() {}
	public function get_frequencyHz() : Float {}
	public function set_dampingRatio(arg0:Float) {}
	public function Destructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_maxMotorTorque() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_enableMotor() : Boolean {}
	public function get_dampingRatio() : Float {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_localAxisA(arg0:b2Vec2) {}
}

emscripten class b2RevoluteJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_lowerAngle() : Float {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_lowerAngle(arg0:Float) {}
	public function get_enableMotor() : Boolean {}
	public function set_upperAngle(arg0:Float) {}
	public function get_referenceAngle() : Float {}
	public function set_enableLimit(arg0:Boolean) {}
	public function get_motorSpeed() : Float {}
	public function set_motorSpeed(arg0:Float) {}
	public function get_maxMotorTorque() : Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Constructor() {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function get_enableLimit() : Boolean {}
	public function Destructor() {}
	public function get_upperAngle() : Float {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_maxMotorTorque(arg0:Float) {}
	public function set_enableMotor(arg0:Boolean) {}
	public function set_collideConnected(arg0:Boolean) {}
}

emscripten class b2PulleyJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_ratio(arg0:Float) {}
	public function set_groundAnchorB(arg0:b2Vec2) {}
	public function set_groundAnchorA(arg0:b2Vec2) {}
	public function get_groundAnchorB() : b2Vec2 {}
	public function get_groundAnchorA() : b2Vec2 {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2, arg4:b2Vec2, arg5:b2Vec2, arg6:Float) {}
	public function get_ratio() : Float {}
	public function Destructor() {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function set_lengthB(arg0:Float) {}
	public function set_lengthA(arg0:Float) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function get_lengthB() : Float {}
	public function get_lengthA() : Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
}

emscripten class b2JointDef
{
	public function get_bodyA() : b2Body {}
	public function set_userData(arg0:Object) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function get_bodyB() : b2Body {}
	public function set_type(arg0:b2JointType) {}
	public function get_collideConnected() : Boolean {}
	public function get_type() : b2JointType {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
	public function get_userData() : Object {}
}

emscripten class b2Transform
{
	public function Destructor() {}
	public function Set(arg0:b2Vec2, arg1:Float) {}
	public function set_p(arg0:b2Vec2) {}
	public function set_q(arg0:b2Rot) {}
	public function get_p() : b2Vec2 {}
	public function get_q() : b2Rot {}
	public function Constructor() {}
	public function Constructor(arg1:b2Rot) {}
	public function SetIdentity() {}
}

emscripten class b2Color
{
	public function Destructor() {}
	public function Set(arg0:Float, arg1:Float, arg2:Float) {}
	public function set_r(arg0:Float) {}
	public function get_r() : Float {}
	public function Constructor() {}
	public function Constructor(arg1:Float, arg2:Float) {}
	public function set_b(arg0:Float) {}
	public function get_g() : Float {}
	public function get_b() : Float {}
	public function set_g(arg0:Float) {}
}

emscripten class b2Rot
{
	public function Destructor() {}
	public function Set(arg0:Float) {}
	public function GetAngle() : Float {}
	public function GetYAxis() : b2Vec2 {}
	public function GetXAxis() : b2Vec2 {}
	public function set_c(arg0:Float) {}
	public function SetIdentity() {}
	public function Constructor() {}
	public function Constructor() {}
	public function get_c() : Float {}
}

emscripten class b2WeldJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function get_frequencyHz() : Float {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Destructor() {}
	public function set_referenceAngle(arg0:Float) {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_referenceAngle() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_dampingRatio() : Float {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function Constructor() {}
}

emscripten class b2MouseJointDef
{
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function Constructor() {}
	public function get_maxForce() : Float {}
	public function set_target(arg0:b2Vec2) {}
	public function set_maxForce(arg0:Float) {}
	public function get_frequencyHz() : Float {}
	public function get_target() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function Destructor() {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_frequencyHz(arg0:Float) {}
	public function get_dampingRatio() : Float {}
}

emscripten class b2DistanceProxy
{
	public function get_m_radius() : Float {}
	public function Set(arg0:b2Shape, arg1:Integer) {}
	public function Constructor() {}
	public function set_m_radius(arg0:Float) {}
	public function Destructor() {}
	public function get_m_vertices() : b2Vec2 {}
	public function GetSupportVertex(arg0:b2Vec2) : b2Vec2 {}
	public function get_m_count() : Integer {}
	public function GetVertexCount() : Integer {}
	public function GetVertex(arg0:Integer) : b2Vec2 {}
	public function GetSupport(arg0:b2Vec2) : Integer {}
	public function set_m_vertices(arg0:b2Vec2) {}
	public function set_m_count(arg0:Integer) {}
}

emscripten class b2DistanceJointDef
{
	public function set_localAnchorA(arg0:b2Vec2) {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function set_localAnchorB(arg0:b2Vec2) {}
	public function set_dampingRatio(arg0:Float) {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function get_length() : Float {}
	public function get_localAnchorA() : b2Vec2 {}
	public function get_frequencyHz() : Float {}
	public function get_localAnchorB() : b2Vec2 {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_dampingRatio() : Float {}
	public function Constructor() {}
	public function Destructor() {}
	public function set_collideConnected(arg0:Boolean) {}
	public function set_length(arg0:Float) {}
	public function set_frequencyHz(arg0:Float) {}
	public function Initialize(arg0:b2Body, arg1:b2Body, arg2:b2Vec2, arg3:b2Vec2) {}
}

emscripten class b2GearJointDef
{
	public function Destructor() {}
	public function get_bodyA(arg0:b2Body) : b2Body {}
	public function get_bodyB(arg0:b2Body) : b2Body {}
	public function get_joint1() : b2Joint {}
	public function set_bodyA(arg0:b2Body) {}
	public function set_bodyB(arg0:b2Body) {}
	public function set_joint2(arg0:b2Joint) {}
	public function set_ratio(arg0:Float) {}
	public function get_collideConnected(arg0:Boolean) : Boolean {}
	public function get_joint2() : b2Joint {}
	public function set_collideConnected(arg0:Boolean) {}
	public function Constructor() {}
	public function get_ratio() : Float {}
	public function set_joint1(arg0:b2Joint) {}
}

emscripten class b2ContactEdge
{
	public function Destructor() {}
	public function set_contact(arg0:b2Contact) {}
	public function get_prev() : b2ContactEdge {}
	public function get_other() : b2Body {}
	public function set_prev(arg0:b2ContactEdge) {}
	public function get_next() : b2ContactEdge {}
	public function set_other(arg0:b2Body) {}
	public function set_next(arg0:b2ContactEdge) {}
	public function Constructor() {}
	public function get_contact() : b2Contact {}
}

// END EMSCRIPTEN EXTERNS FOR EMS_BOX2D //

#endif

