
var Coconut2D = require("D:/mobileFX/Projects/Software/Coconut/IDE/Studio/etc/.SDK/DeviceWrappers/web/CocoNode/node_modules/org.coconut2d.sdk.server.ASP.CocoNode/bin/CocoNode.node");

/*

var template_folder 		= "D:/mobileFX/CocoProjects/TrainosePassbook.project/.server/.CocoNode/data/passbook";
var certificates_folder 	= "D:/mobileFX/CocoProjects/TrainosePassbook.project/.server/.CocoNode/data/passbkKeys";
var output_folder 			= "D:/mobileFX/CocoProjects/TrainosePassbook.project/.server/.CocoNode/data/temp/A4F403040AB04067A538966275FD9A52";
var PassbookCertificate 	= certificates_folder + "/FX_BoardingPass.p12";
var IntermediateCertificate = certificates_folder + "/wwdr.cer";

var SERIAL_NUMBER 						= "TR123";
var AUTHENTICATION_TOKEN				= "A4F403040AB04067A538966275FD9A52";
var QRCODE								= "A4F403040AB04067A538966275FD9A52|Rou|2016-03-10|1|Terry & Heavy G|2016-06-11|61.50";
var ROUTE_TITLE							= "Athens - Thessaloniki";

var PASSENGER_EMAIL						= "irida@mobilefx.com";
var VENDOR_EMAIL						= "cavo@mobilefx.com";

var TRAIN_NUMBER						= "AE600";
var BOARDING_STATION_SHORT				= "ATH";
var BOARDING_STATION_LONG				= "Athens";
var DESTINATION_STATION_SHORT			= "THES";
var DESTINATION_STATION_LONG			= "Thessaloniki";
var BOARDING_DATE_SHORT_DDMM			= "22/11";
var DEPARTURE_DATE_TIME					= "08:43";
var PASSENGER_RESERVATION_NAME			= "Irida SE Kalostipi";
var PASSENGER_SEAT						= "A721";

var COMMA_SEPARATED_PASSENGERS_LIST		= "Georgios Christodoulopoulos";
var BOOKING_REFERENCE					= "A7371421";
var TRIP_NOTES							= "http://www.trainose.gr/eticket/notes.html";
var SUPPORT_TELEPHONE					= "2109522504";


var JSONData = {
			"formatVersion":1,
			"passTypeIdentifier":"pass.com.mobilefx.boardingpass",
			"teamIdentifier":"ST9XP4938Z",
			"organizationName":"TRAINOSE",
			"description":"TRAINOSE Ticket",
			"foregroundColor":"rgb(56, 54, 55)",
			"backgroundColor":"rgb(244, 240, 242)",
			"labelColor":"rgb(56,54,55)",
			"serialNumber":SERIAL_NUMBER,
			"authenticationToken":AUTHENTICATION_TOKEN,
			"barcode":{
		  		"message":QRCODE,
		  		"format":"PKBarcodeFormatQR",
		  		"messageEncoding":"UTF8"
			},
		   	"boardingPass":	{
		    	"headerFields":[
					{
					   "key":"depart_date",
					   "label":"DATE",
					   "value":BOARDING_DATE_SHORT_DDMM
					},
					{
					   "key":"train_number",
					   "label":"TRAIN",
					   "value":TRAIN_NUMBER
					}
		    	],
				"primaryFields" : [
					{
					    "key" : "depart_station",
					    "label" : BOARDING_STATION_LONG,
					    "value" : BOARDING_STATION_SHORT
					},
					{
					    "key" : "destination_station",
					    "label" : DESTINATION_STATION_LONG,
					    "value" : DESTINATION_STATION_SHORT
					}
				],
       			"auxiliaryFields" : [
       			    {
       			        "key" : "depart_date_time",
       			        "label" : "DEPARTS",
       			        "value" : DEPARTURE_DATE_TIME
       			    },
       			    {
       			        "key" : "passenger_seat",
       			        "label" : "SEAT",
       			        "value" : PASSENGER_SEAT
       			    }
       			],
		    	"secondaryFields":[
		    	  	{
		    	  	   "key":"passenger_reservation_name",
		    	  	   "label":"NAME",
		    	  	   "value":PASSENGER_RESERVATION_NAME
		    	  	}
		    	],
	      		"backFields":[
					{
						"key" : "booking_reference",
						"label" : "BOOKING REFERENCE:",
						"value" : BOOKING_REFERENCE
					},
					{
						"key" : "passengers_list",
						"label" : "PASSENGERS LIST:",
						"value" : COMMA_SEPARATED_PASSENGERS_LIST
					},
					{
						"key" : "departure_date_long2",
						"label" : "DEPARTURE DATE TIME:",
						"value" : DEPARTURE_DATE_TIME
					},
					{
						"key" : "boarding_station_long2",
						"label" : "BOARDING STATION:",
						"value" : BOARDING_STATION_LONG
					},
					{
						"key" : "destination_station_long2",
						"label" : "DESTINATION STATION:",
						"value" : DESTINATION_STATION_LONG
					},
					{
						"key" : "ticket_notes",
						"label" : "TICKET NOTES:",
						"value" : TRIP_NOTES
					},
					{
						"key" : "support_telephone",
						"label" : "PASSENGER SUPPORT CLICK TO CALL:",
						"value" : SUPPORT_TELEPHONE
					}
	      		],
        		"transitType" : "PKTransitTypeTrain"
	   		}
	};

var result = Coconut2D.CreatePassBook(template_folder,
									  output_folder,
									  "Trainose.pkpass",
									  JSON.stringify(JSONData),
									  IntermediateCertificate,
									  PassbookCertificate,
									  function() { Coconut2D.SendEmail(); }
									  );


function getRandomString()
{
	var c = "";
	for(var i=0; i<6; i++)
	{
		var cap = 32 * Math.round(Math.random());
		var asc = 65 + cap + Math.floor(Math.random() * 26);
		c += String.fromCharCode(asc);
	}
	return c;
}

var Coconut2D = require("D:/mobileFX/Projects/Software/Coconut/IDE/Studio/etc/.SDK/DeviceWrappers/web/CocoNode/node_modules/org.coconut2d.sdk.server.ASP.CocoNode/bin/CocoNode.node");

var test = Coconut2D.CreateFormGuard(getRandomString());

*/

var cert = Coconut2D.RSA_Create_Certificate(2048);
console.log(cert.PRIVATE);
console.log(cert.PUBLIC);
var encr = Coconut2D.RSA_Public_Encrypt(cert.PUBLIC, "This is a test");
console.log(encr);
var data = Coconut2D.RSA_Private_Decrypt(cert.PRIVATE, encr);
console.log(data);

//Coconut2D.Compile("D:/mobileFX/Projects/Software/Coconut/Projects/NeonStars_Mobile.project/.SDK/Toolchain/Compiler", "CocoMake", "{\"mode\":\"build\"}");


var ds = new Coconut2D.Dataset;
if (ds.open("D:/mobileFX/Projects/Software/Coconut/Projects/ASP.project/.server/.CocoNode/data/database.db", "SELECT * FROM [TEST]"))
{
    var f = ds.field("Ελληνικά");
    console.log(f);
    console.log(f.NAME + " = " + f.value);
    f.value = "Λίνα + Ιόλη";
    ds.update();

    var ab = ds.toArrayBuffer();
    ds.close();
    delete ds;
    ds = null;
    ds = new Coconut2D.Dataset;
    if (ds.openFromArrayBuffer(ab))
    {
        f = ds.field("Ελληνικά");
        console.log(f.NAME + " = " + f.value);
    }

    while (!ds.DB_EOF)
    {
        var s = "";
        for (i = 0; i < ds.fieldCount; i++)
        {
            var f = ds.field(i);
            s += f.NAME + " = " + f.value + ", ";
        }
        console.log(ds.recordIndex + ": " + s);
        ds.moveNext();
    }
    ds.close();
}
delete ds;
ds = null;

console.log("Press Ctl+C to end.");
function __loop__() { setInterval(function () { }, 1000); }
__loop__();
